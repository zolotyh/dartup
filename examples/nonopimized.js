// Generated by dart2js (full emitter, strong), the Dart to JavaScript compiler version: 2.1.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
(function() {
  // /* ::norenaming:: */
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  // The global objects start as so-called "slow objects". For V8, this
  // means that it won't try to make map transitions as we add properties
  // to these objects. Later on, we attempt to turn these objects into
  // fast objects by calling "convertToFastObject" (see
  // [emitConvertToFastObjectFunction]).
  var A = map();
  var B = map();
  var C = map();
  var D = map();
  var E = map();
  var F = map();
  var G = map();
  var H = map();
  var J = map();
  var K = map();
  var L = map();
  var M = map();
  var N = map();
  var O = map();
  var P = map();
  var Q = map();
  var R = map();
  var S = map();
  var T = map();
  var U = map();
  var V = map();
  var W = map();
  var X = map();
  var Y = map();
  var Z = map();
  function Isolate() {
  }
  init();
  // Constructors are generated at runtime.
  function setupProgram(programData, metadataOffset, typesOffset) {
    "use strict";
    function generateAccessor(fieldDescriptor, accessors, cls) {
      var fieldInformation = fieldDescriptor.split("-");
      var field = fieldInformation[0];
      var len = field.length;
      var code = field.charCodeAt(len - 1);
      var reflectable;
      if (fieldInformation.length > 1)
        reflectable = true;
      else
        reflectable = false;
      code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
      if (code) {
        var getterCode = code & 3;
        var setterCode = code >> 2;
        var accessorName = field = field.substring(0, len - 1);
        var divider = field.indexOf(":");
        if (divider > 0) {
          accessorName = field.substring(0, divider);
          field = field.substring(divider + 1);
        }
        if (getterCode) {
          var args = getterCode & 2 ? "receiver" : "";
          var receiver = getterCode & 1 ? "this" : "receiver";
          var body = "return " + receiver + "." + field;
          var property = cls + ".prototype.get$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
        if (setterCode) {
          var args = setterCode & 2 ? "receiver, value" : "value";
          var receiver = setterCode & 1 ? "this" : "receiver";
          var body = receiver + "." + field + " = value";
          var property = cls + ".prototype.set$" + accessorName + "=";
          var fn = "function(" + args + "){" + body + "}";
          if (reflectable)
            accessors.push(property + "$reflectable(" + fn + ");\n");
          else
            accessors.push(property + fn + ";\n");
        }
      }
      return field;
    }
    function defineClass(name, fields) {
      var accessors = [];
      var str = "function " + name + "(";
      var comma = "", body = "";
      for (var i = 0; i < fields.length; i++) {
        var fieldDescriptor = fields[i];
        if (fieldDescriptor.charCodeAt(0) == 48) {
          fieldDescriptor = fieldDescriptor.substring(1);
          var field = generateAccessor(fieldDescriptor, accessors, name);
          body += "this." + field + " = null;\n";
        } else {
          var field = generateAccessor(fieldDescriptor, accessors, name);
          var parameter = "p_" + field;
          str += comma;
          comma = ", ";
          str += parameter;
          body += "this." + field + " = " + parameter + ";\n";
        }
      }
      if (supportsDirectProtoAccess)
        body += "this." + "$deferredAction" + "();";
      str += ") {\n" + body + "}\n";
      str += name + ".builtin$cls=\"" + name + "\";\n";
      str += "$desc=$collectedClasses." + name + "[1];\n";
      str += name + ".prototype = $desc;\n";
      if (typeof defineClass.name != "string")
        str += name + ".name=\"" + name + "\";\n";
      str += accessors.join("");
      return str;
    }
    var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
      var prototype = constructor.prototype;
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
      prototype["$is" + constructor.name] = constructor;
      return convertToFastObject(prototype);
    } : function() {
      function tmp() {
      }
      return function(constructor, superConstructor) {
        tmp.prototype = superConstructor.prototype;
        var object = new tmp();
        convertToSlowObject(object);
        var properties = constructor.prototype;
        var members = Object.keys(properties);
        for (var i = 0; i < members.length; i++) {
          var member = members[i];
          object[member] = properties[member];
        }
        object["$is" + constructor.name] = constructor;
        object.constructor = constructor;
        constructor.prototype = object;
        return object;
      };
    }();
    function finishClasses(processedClasses) {
      var allClasses = init.allClasses;
      processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
      processedClasses.combinedConstructorFunction = null;
      for (var i = 0; i < constructors.length; i++) {
        var constructor = constructors[i];
        var cls = constructor.name;
        var desc = processedClasses.collected[cls];
        var globalObject = desc[0];
        desc = desc[1];
        allClasses[cls] = constructor;
        globalObject[cls] = constructor;
      }
      constructors = null;
      var finishedClasses = init.finishedClasses;
      function finishClass(cls) {
        if (finishedClasses[cls])
          return;
        finishedClasses[cls] = true;
        var superclass = processedClasses.pending[cls];
        if (!superclass || typeof superclass != "string") {
          var constructor = allClasses[cls];
          var prototype = constructor.prototype;
          prototype.constructor = constructor;
          prototype.$isObject = constructor;
          prototype.$deferredAction = function() {
          };
          return;
        }
        finishClass(superclass);
        var superConstructor = allClasses[superclass];
        if (!superConstructor)
          superConstructor = existingIsolateProperties[superclass];
        var constructor = allClasses[cls];
        var prototype = inheritFrom(constructor, superConstructor);
        if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
          var nativeSpec = prototype["%"].split(";");
          if (nativeSpec[0]) {
            var tags = nativeSpec[0].split("|");
            for (var i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = true;
            }
          }
          if (nativeSpec[1]) {
            tags = nativeSpec[1].split("|");
            if (nativeSpec[2]) {
              var subclasses = nativeSpec[2].split("|");
              for (var i = 0; i < subclasses.length; i++) {
                var subclass = allClasses[subclasses[i]];
                subclass.$nativeSuperclassTag = tags[0];
              }
            }
            for (i = 0; i < tags.length; i++) {
              init.interceptorsByTag[tags[i]] = constructor;
              init.leafTags[tags[i]] = false;
            }
          }
          prototype.$deferredAction();
        }
        if (prototype.$isInterceptor)
          prototype.$deferredAction();
      }
      var properties = Object.keys(processedClasses.pending);
      for (var i = 0; i < properties.length; i++)
        finishClass(properties[i]);
    }
    function finishAddStubsHelper() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      delete prototype.$deferredAction;
      var properties = Object.keys(prototype);
      for (var index = 0; index < properties.length; index++) {
        var property = properties[index];
        var firstChar = property.charCodeAt(0);
        var elem;
        if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
          addStubs(prototype, elem, property, false, []);
      }
      convertToFastObject(prototype);
      prototype = prototype.__proto__;
      prototype.$deferredAction();
    }
    function processClassData(cls, descriptor, processedClasses) {
      descriptor = convertToSlowObject(descriptor);
      var previousProperty;
      var properties = Object.keys(descriptor);
      var hasDeferredWork = false;
      var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        var firstChar = property.charCodeAt(0);
        if (property === "static") {
          processStatics(init.statics[cls] = descriptor.static, processedClasses);
          delete descriptor.static;
        } else if (firstChar === 43) {
          mangledNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
        } else if (firstChar === 42) {
          descriptor[previousProperty].$defaultValues = descriptor[property];
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else {
          var elem = descriptor[property];
          if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
            if (shouldDeferWork)
              hasDeferredWork = true;
            else
              addStubs(descriptor, elem, property, false, []);
          else
            previousProperty = property;
        }
      }
      if (hasDeferredWork)
        descriptor.$deferredAction = finishAddStubsHelper;
      var classData = descriptor["^"],
        split, supr,
        fields = classData;
      var s = fields.split(";");
      fields = s[1] ? s[1].split(",") : [];
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          descriptor.$signature = function(s) {
            return function() {
              return init.types[s];
            };
          }(functionSignature);
      }
      if (supr)
        processedClasses.pending[cls] = supr;
      processedClasses.combinedConstructorFunction += defineClass(cls, fields);
      processedClasses.constructorsList.push(cls);
      processedClasses.collected[cls] = [globalObject, descriptor];
      classes.push(cls);
    }
    function processStatics(descriptor, processedClasses) {
      var properties = Object.keys(descriptor);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (property === "^")
          continue;
        var element = descriptor[property];
        var firstChar = property.charCodeAt(0);
        var previousProperty;
        if (firstChar === 43) {
          mangledGlobalNames[previousProperty] = property.substring(1);
          var flag = descriptor[property];
          if (flag > 0)
            descriptor[previousProperty].$reflectable = flag;
          if (element && element.length)
            init.typeInformation[previousProperty] = element;
        } else if (firstChar === 42) {
          globalObject[previousProperty].$defaultValues = element;
          var optionalMethods = descriptor.$methodsWithOptionalArguments;
          if (!optionalMethods)
            descriptor.$methodsWithOptionalArguments = optionalMethods = {};
          optionalMethods[property] = previousProperty;
        } else if (typeof element === "function") {
          globalObject[previousProperty = property] = element;
          functions.push(property);
        } else if (element.constructor === Array)
          addStubs(globalObject, element, property, true, functions);
        else {
          previousProperty = property;
          processClassData(property, element, processedClasses);
        }
      }
    }
    function addStubs(prototype, array, name, isStatic, functions) {
      var index = 0,
        applyTrampolineIndex = index,
        alias = array[index],
        f;
      if (typeof alias == "string")
        f = array[++index];
      else {
        f = alias;
        alias = name;
      }
      if (typeof f == "number") {
        applyTrampolineIndex = f;
        f = array[++index];
      }
      prototype[name] = prototype[alias] = f;
      var funcs = [f];
      f.$stubName = name;
      functions.push(name);
      for (index++; index < array.length; index++) {
        f = array[index];
        if (typeof f != "function")
          break;
        if (!isStatic)
          f.$stubName = array[++index];
        funcs.push(f);
        if (f.$stubName) {
          prototype[f.$stubName] = f;
          functions.push(f.$stubName);
        }
      }
      for (var i = 0; i < funcs.length; index++, i++)
        funcs[i].$callName = array[index];
      var getterStubName = array[index];
      array = array.slice(++index);
      var requiredParameterInfo = array[0];
      var isIntercepted = (requiredParameterInfo & 1) === 1;
      requiredParameterInfo = requiredParameterInfo >> 1;
      var requiredParameterCount = requiredParameterInfo >> 1;
      var isAccessor = (requiredParameterInfo & 1) === 1;
      var isSetter = requiredParameterInfo === 3;
      var isGetter = requiredParameterInfo === 1;
      var optionalParameterInfo = array[1];
      var optionalParameterCount = optionalParameterInfo >> 1;
      var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
      var totalParameterCount = requiredParameterCount + optionalParameterCount;
      var functionTypeIndex = array[2];
      if (typeof functionTypeIndex == "number")
        array[2] = functionTypeIndex + typesOffset;
      if (metadataOffset > 0) {
        var position = 3;
        for (var i = 0; i < optionalParameterCount; i++) {
          if (typeof array[position] == "number")
            array[position] = array[position] + metadataOffset;
          position++;
        }
        for (var i = 0; i < totalParameterCount; i++) {
          array[position] = array[position] + metadataOffset;
          position++;
        }
      }
      var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
      if (getterStubName) {
        f = tearOff(funcs, applyTrampolineIndex, array, isStatic, name, isIntercepted);
        prototype[name].$getter = f;
        f.$getterStub = true;
        if (isStatic)
          functions.push(getterStubName);
        prototype[getterStubName] = f;
        funcs.push(f);
        f.$stubName = getterStubName;
        f.$callName = null;
      }
    }
    function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
      return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
    }
    function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
      var cache = null;
      return isStatic ? function() {
        if (cache === null)
          cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
        return cache;
      } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
    }
    var functionCounter = 0;
    if (!init.libraries)
      init.libraries = [];
    if (!init.mangledNames)
      init.mangledNames = map();
    if (!init.mangledGlobalNames)
      init.mangledGlobalNames = map();
    if (!init.statics)
      init.statics = map();
    if (!init.typeInformation)
      init.typeInformation = map();
    var libraries = init.libraries;
    var mangledNames = init.mangledNames;
    var mangledGlobalNames = init.mangledGlobalNames;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var length = programData.length;
    var processedClasses = map();
    processedClasses.collected = map();
    processedClasses.pending = map();
    processedClasses.constructorsList = [];
    processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
    for (var i = 0; i < length; i++) {
      var data = programData[i];
      var name = data[0];
      var uri = data[1];
      var metadata = data[2];
      var globalObject = data[3];
      var descriptor = data[4];
      var isRoot = !!data[5];
      var fields = descriptor && descriptor["^"];
      if (fields instanceof Array)
        fields = fields[0];
      var classes = [];
      var functions = [];
      processStatics(descriptor, processedClasses);
      libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
    }
    finishClasses(processedClasses);
  }
  Isolate.functionThatReturnsNull = function() {
  };
  var dart = [["_chrome", "dart:_chrome",, H, {
    "^": "",
    ChromeObject: {
      "^": "Object;$ti"
    },
    Rule: {
      "^": "ChromeObject;$ti"
    },
    Event0: {
      "^": "Object;$ti"
    },
    API_ChromeApp: {
      "^": "Object;$ti"
    },
    API_Chrome: {
      "^": "Object;$ti"
    },
    AppWindowBounds: {
      "^": "ChromeObject;$ti"
    },
    AppWindowCreateWindowOptions: {
      "^": "ChromeObject;$ti"
    },
    AppWindowAppWindow: {
      "^": "ChromeObject;$ti"
    },
    Event_app_window_onBoundsChanged: {
      "^": "Event0;$ti"
    },
    Event_app_window_onClosed: {
      "^": "Event0;$ti"
    },
    Event_app_window_onFullscreened: {
      "^": "Event0;$ti"
    },
    Event_app_window_onMaximized: {
      "^": "Event0;$ti"
    },
    Event_app_window_onMinimized: {
      "^": "Event0;$ti"
    },
    Event_app_window_onRestored: {
      "^": "Event0;$ti"
    },
    API_app_window: {
      "^": "Object;$ti"
    },
    AppRuntimeLaunchItem: {
      "^": "ChromeObject;$ti"
    },
    AppRuntimeLaunchData: {
      "^": "ChromeObject;$ti"
    },
    Event_app_runtime_onLaunched: {
      "^": "Event0;$ti"
    },
    Event_app_runtime_onRestarted: {
      "^": "Event0;$ti"
    },
    API_app_runtime: {
      "^": "Object;$ti"
    },
    FilesystemAcceptOption: {
      "^": "ChromeObject;$ti"
    },
    FilesystemChooseEntryOptions: {
      "^": "ChromeObject;$ti"
    },
    API_file_system: {
      "^": "Object;$ti"
    }
  }], ["_foreign_helper", "dart:_foreign_helper",, H, {
    "^": "",
    JS_CONST: {
      "^": "Object;code,$ti"
    }
  }], ["dart._http", "dart:_http",, H, {
    "^": "",
    _CryptoUtils: {
      "^": "Object;$ti"
    },
    _HashBase: {
      "^": "Object;$ti"
    },
    _MD5: {
      "^": "_HashBase;$ti"
    },
    _SHA1: {
      "^": "_HashBase;$ti"
    },
    HttpStatus: {
      "^": "Object;$ti"
    },
    HttpServer: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [H.HttpRequest];
      }
    },
    HttpConnectionsInfo: {
      "^": "Object;$ti"
    },
    HttpHeaders: {
      "^": "Object;$ti"
    },
    HeaderValue: {
      "^": "Object;$ti"
    },
    HttpSession: {
      "^": "Object;$ti",
      $isMap: 1,
      $asMap: Isolate.functionThatReturnsNull
    },
    ContentType: {
      "^": "Object;$ti",
      $isHeaderValue: 1
    },
    Cookie: {
      "^": "Object;$ti"
    },
    HttpRequest: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [[P.List, P.int]];
      }
    },
    HttpResponse: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $isStreamSink: 1,
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $isSink: 1,
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1,
      $isIOSink: 1
    },
    HttpClient: {
      "^": "Object;$ti"
    },
    HttpClientRequest: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $isStreamSink: 1,
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $isSink: 1,
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1,
      $isIOSink: 1
    },
    HttpClientResponse: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [[P.List, P.int]];
      }
    },
    HttpClientCredentials: {
      "^": "Object;$ti"
    },
    HttpClientBasicCredentials: {
      "^": "HttpClientCredentials;$ti"
    },
    HttpClientDigestCredentials: {
      "^": "HttpClientCredentials;$ti"
    },
    HttpConnectionInfo: {
      "^": "Object;$ti"
    },
    RedirectInfo: {
      "^": "Object;$ti"
    },
    DetachedSocket: {
      "^": "Object;$ti"
    },
    HttpException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    RedirectException: {
      "^": "Object;$ti",
      $isHttpException: 1,
      $isException: 1,
      $isIOException: 1
    },
    HttpDate: {
      "^": "Object;$ti"
    },
    _HttpHeaders: {
      "^": "Object;$ti",
      $isHttpHeaders: 1
    },
    _HeaderValue: {
      "^": "Object;$ti",
      $isHeaderValue: 1
    },
    _ContentType: {
      "^": "_HeaderValue;$ti",
      $isContentType: 1
    },
    _Cookie: {
      "^": "Object;$ti",
      $isCookie: 1
    },
    _ServiceObject: {
      "^": "Object;$ti"
    },
    _CopyingBytesBuilder: {
      "^": "Object;$ti",
      $isBytesBuilder: 1
    },
    _HttpIncoming: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [[P.List, P.int]];
      }
    },
    _HttpInboundMessage: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [[P.List, P.int]];
      }
    },
    _HttpRequest: {
      "^": "_HttpInboundMessage;$ti",
      $isHttpRequest: 1
    },
    _HttpClientResponse: {
      "^": "_HttpInboundMessage;$ti",
      $isHttpClientResponse: 1
    },
    _StreamSinkImpl: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isSink: 1
    },
    _IOSinkImpl: {
      "^": "_StreamSinkImpl;$ti",
      $as_StreamSinkImpl: function() {
        return [[P.List, P.int]];
      },
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1,
      $isIOSink: 1
    },
    _HttpOutboundMessage: {
      "^": "_IOSinkImpl;$ti"
    },
    _HttpResponse: {
      "^": "_HttpOutboundMessage;$ti",
      $isHttpResponse: 1,
      $as_StreamSinkImpl: function() {
        return [[P.List, P.int]];
      },
      $as_HttpOutboundMessage: function() {
        return [H.HttpResponse];
      },
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $asSink: function() {
        return [[P.List, P.int]];
      }
    },
    _HttpClientRequest: {
      "^": "_HttpOutboundMessage;$ti",
      $isHttpClientRequest: 1,
      $as_StreamSinkImpl: function() {
        return [[P.List, P.int]];
      },
      $as_HttpOutboundMessage: function() {
        return [H.HttpClientResponse];
      },
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $asSink: function() {
        return [[P.List, P.int]];
      }
    },
    _HttpGZipSink: {
      "^": "ByteConversionSink;$ti"
    },
    _HttpOutgoing: {
      "^": "Object;$ti",
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      }
    },
    _HttpClientConnection: {
      "^": "Object;$ti"
    },
    _ConnectionInfo: {
      "^": "Object;$ti"
    },
    _ConnectionTarget: {
      "^": "Object;$ti"
    },
    _HttpClient: {
      "^": "Object;$ti",
      $isHttpClient: 1
    },
    _HttpConnection: {
      "^": "__HttpConnection_LinkedListEntry__ServiceObject;$ti",
      $is_ServiceObject: 1,
      $asLinkedListEntry: function() {
        return [H._HttpConnection];
      }
    },
    _HttpServer: {
      "^": "__HttpServer_Stream__ServiceObject;$ti",
      $isHttpServer: 1,
      $is_ServiceObject: 1,
      $asStream: function() {
        return [H.HttpRequest];
      }
    },
    _ProxyConfiguration: {
      "^": "Object;$ti"
    },
    _Proxy: {
      "^": "Object;$ti"
    },
    _HttpConnectionInfo: {
      "^": "Object;$ti",
      $isHttpConnectionInfo: 1
    },
    _DetachedSocket: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [[P.List, P.int]];
      },
      $isEventSink: 1,
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $isStreamSink: 1,
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $isSink: 1,
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1,
      $isIOSink: 1,
      $isSocket: 1
    },
    _AuthenticationScheme: {
      "^": "Object;$ti"
    },
    _Credentials: {
      "^": "Object;$ti"
    },
    _SiteCredentials: {
      "^": "_Credentials;$ti"
    },
    _ProxyCredentials: {
      "^": "_Credentials;$ti"
    },
    _HttpClientCredentials: {
      "^": "Object;$ti",
      $isHttpClientCredentials: 1
    },
    _HttpClientBasicCredentials: {
      "^": "_HttpClientCredentials;$ti",
      $isHttpClientBasicCredentials: 1
    },
    _HttpClientDigestCredentials: {
      "^": "_HttpClientCredentials;$ti",
      $isHttpClientDigestCredentials: 1
    },
    _RedirectInfo: {
      "^": "Object;$ti",
      $isRedirectInfo: 1
    },
    _Const: {
      "^": "Object;$ti"
    },
    _CharCode: {
      "^": "Object;$ti"
    },
    _State: {
      "^": "Object;$ti"
    },
    _HttpVersion: {
      "^": "Object;$ti"
    },
    _MessageType: {
      "^": "Object;$ti"
    },
    _HttpDetachedStreamSubscription: {
      "^": "Object;$ti",
      $isStreamSubscription: 1,
      $asStreamSubscription: function() {
        return [[P.List, P.int]];
      }
    },
    _HttpDetachedIncoming: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [[P.List, P.int]];
      }
    },
    _HttpParser: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [H._HttpIncoming];
      }
    },
    _HttpSession: {
      "^": "Object;$ti",
      $isHttpSession: 1,
      $isMap: 1,
      $asMap: Isolate.functionThatReturnsNull
    },
    _HttpSessionManager: {
      "^": "Object;$ti"
    },
    HttpOverrides: {
      "^": "Object;$ti"
    },
    _HttpOverridesScope: {
      "^": "HttpOverrides;$ti"
    },
    WebSocketStatus: {
      "^": "Object;$ti"
    },
    CompressionOptions: {
      "^": "Object;$ti"
    },
    WebSocketTransformer: {
      "^": "Object;$ti",
      $isStreamTransformer: 1,
      $asStreamTransformer: function() {
        return [H.HttpRequest, H.WebSocket];
      }
    },
    WebSocket: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: Isolate.functionThatReturnsNull,
      $isEventSink: 1,
      $asEventSink: Isolate.functionThatReturnsNull,
      $isStreamConsumer: 1,
      $asStreamConsumer: Isolate.functionThatReturnsNull,
      $isStreamSink: 1,
      $asStreamSink: Isolate.functionThatReturnsNull,
      $isSink: 1,
      $asSink: Isolate.functionThatReturnsNull
    },
    WebSocketException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    _WebSocketMessageType: {
      "^": "Object;$ti"
    },
    _WebSocketOpcode: {
      "^": "Object;$ti"
    },
    _EncodedString: {
      "^": "Object;$ti"
    },
    _CompressionMaxWindowBits: {
      "^": "Object;$ti"
    },
    _WebSocketProtocolTransformer: {
      "^": "StreamTransformerBase;$ti",
      $isEventSink: 1,
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $asStreamTransformer: function() {
        return [[P.List, P.int], null];
      },
      $asStreamTransformerBase: function() {
        return [[P.List, P.int], null];
      },
      $isSink: 1,
      $asSink: function() {
        return [[P.List, P.int]];
      }
    },
    _WebSocketPing: {
      "^": "Object;$ti"
    },
    _WebSocketPong: {
      "^": "Object;$ti"
    },
    _WebSocketTransformerImpl: {
      "^": "StreamTransformerBase;$ti",
      $isWebSocketTransformer: 1,
      $asStreamTransformer: function() {
        return [H.HttpRequest, H.WebSocket];
      },
      $asStreamTransformerBase: function() {
        return [H.HttpRequest, H.WebSocket];
      }
    },
    _WebSocketPerMessageDeflate: {
      "^": "Object;$ti"
    },
    _WebSocketOutgoingTransformer: {
      "^": "StreamTransformerBase;$ti",
      $isEventSink: 1,
      $asEventSink: Isolate.functionThatReturnsNull,
      $asStreamTransformer: function() {
        return [null, [P.List, P.int]];
      },
      $asStreamTransformerBase: function() {
        return [null, [P.List, P.int]];
      },
      $isSink: 1,
      $asSink: Isolate.functionThatReturnsNull
    },
    _WebSocketConsumer: {
      "^": "Object;$ti",
      $isStreamConsumer: 1,
      $asStreamConsumer: Isolate.functionThatReturnsNull
    },
    _WebSocketImpl: {
      "^": "__WebSocketImpl_Stream__ServiceObject;$ti",
      $is_ServiceObject: 1,
      $isWebSocket: 1,
      $asStream: Isolate.functionThatReturnsNull,
      $isEventSink: 1,
      $asEventSink: Isolate.functionThatReturnsNull,
      $isStreamConsumer: 1,
      $asStreamConsumer: Isolate.functionThatReturnsNull,
      $isStreamSink: 1,
      $asStreamSink: Isolate.functionThatReturnsNull,
      $isSink: 1,
      $asSink: Isolate.functionThatReturnsNull
    },
    __HttpConnection_LinkedListEntry__ServiceObject: {
      "^": "LinkedListEntry;$ti",
      $is_ServiceObject: 1,
      $asLinkedListEntry: function() {
        return [H._HttpConnection];
      }
    },
    __HttpServer_Stream__ServiceObject: {
      "^": "Stream;$ti",
      $is_ServiceObject: 1,
      $asStream: function() {
        return [H.HttpRequest];
      }
    },
    __WebSocketImpl_Stream__ServiceObject: {
      "^": "Stream;$ti",
      $is_ServiceObject: 1,
      $asStream: Isolate.functionThatReturnsNull
    }
  }], ["_interceptors", "dart:_interceptors",, J, {
    "^": "",
    getDispatchProperty: function(object) {
      return object[init.dispatchPropertyName];
    },
    setDispatchProperty: function(object, value) {
      H.defineProperty(object, init.dispatchPropertyName, value);
    },
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    dispatchRecordInterceptor: function(record) {
      return record.i;
    },
    dispatchRecordProto: function(record) {
      return record.p;
    },
    dispatchRecordExtension: function(record) {
      return record.e;
    },
    getNativeInterceptor: function(object) {
      var record, proto, objectProto, $constructor, interceptor;
      record = J.getDispatchProperty(object);
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = J.getDispatchProperty(object);
        }
      if (record != null) {
        proto = J.dispatchRecordProto(record);
        if (false === proto)
          return J.dispatchRecordInterceptor(record);
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return J.dispatchRecordInterceptor(record);
        if (J.dispatchRecordExtension(record) === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = J.lookupInterceptorByConstructor($constructor);
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        J.cacheInterceptorOnConstructor($constructor, C.UnknownJavaScriptObject_methods);
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    lookupInterceptorByConstructor: function($constructor) {
      return $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
    },
    cacheInterceptorOnConstructor: function($constructor, interceptor) {
      H.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), interceptor);
    },
    Interceptor: {
      "^": "Object;$ti",
      $eq: function(receiver, other) {
        return receiver === other;
      },
      toString$0: ["super$Interceptor$toString", function(receiver) {
        return H.Primitives_objectToHumanReadableString(receiver);
      }]
    },
    JSBool: {
      "^": "Interceptor;$ti",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isbool: 1
    },
    JSNull: {
      "^": "Interceptor;$ti",
      $eq: function(receiver, other) {
        return null == other;
      },
      toString$0: function(receiver) {
        return "null";
      },
      $isNull: 1
    },
    JSIndexable: {
      "^": "Object;$ti"
    },
    JSMutableIndexable: {
      "^": "JSIndexable;$ti"
    },
    JSObject: {
      "^": "Object;$ti"
    },
    JavaScriptObject: {
      "^": "Interceptor;$ti",
      toString$0: ["super$JavaScriptObject$toString", function(receiver) {
        return String(receiver);
      }],
      $isJSObject: 1
    },
    PlainJavaScriptObject: {
      "^": "JavaScriptObject;$ti"
    },
    UnknownJavaScriptObject: {
      "^": "JavaScriptObject;$ti"
    },
    JavaScriptFunction: {
      "^": "JavaScriptObject;$ti",
      toString$0: function(receiver) {
        var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
        if (dartClosure == null)
          return this.super$JavaScriptObject$toString(receiver);
        return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
      },
      $signature: function() {
        return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
      },
      $isFunction: 1
    },
    _Growable: {
      "^": "Object;$ti"
    },
    JSArray: {
      "^": "Interceptor;$ti",
      checkGrowable$1: function(receiver, reason) {
        if (!!receiver.fixed$length)
          throw H.wrapException(P.UnsupportedError$(H.stringTypeCheck(reason)));
      },
      add$1: function(receiver, value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
        this.checkGrowable$1(receiver, "add");
        receiver.push(value);
      },
      removeLast$0: function(receiver) {
        this.checkGrowable$1(receiver, "removeLast");
        if (receiver.length === 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, -1));
        return receiver.pop();
      },
      toString$0: function(receiver) {
        return P.ListBase_listToString(receiver);
      },
      get$iterator: function(receiver) {
        return J.ArrayIterator$(receiver, H.getTypeArgumentByIndex(receiver, 0));
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1,
      static: {
        JSArray_JSArray$typed: function(allocation, $E) {
          return allocation;
        },
        JSArray_JSArray$markFixed: function(allocation, $E) {
          return J.JSArray_markFixedList(H.setRuntimeTypeInfo(J.JSArray_JSArray$typed(allocation, $E), [$E]));
        },
        JSArray_markFixedList: function(list) {
          H.listTypeCheck(list);
          list.fixed$length = Array;
          return list;
        }
      }
    },
    JSUnmodifiableArray: {
      "^": "JSArray;$ti"
    },
    ArrayIterator: {
      "^": "Object;_iterable,_length,_index,0_current,$ti",
      set$_current: function(_current) {
        this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
      },
      get$current: function() {
        return this._current;
      },
      moveNext$0: function() {
        var t1, t2, $length;
        t1 = this._iterable;
        t2 = J.getInterceptor$as(t1);
        $length = t2.get$length(t1);
        if (!J.$eq$(this._length, $length))
          throw H.wrapException(H.throwConcurrentModificationError(t1));
        if (J.$ge$n(this._index, $length)) {
          this.set$_current(null);
          return false;
        }
        this.set$_current(t2.$index(t1, this._index));
        this._index = H.intTypeCheck(J.$add$ns(this._index, 1));
        return true;
      },
      $isIterator: 1,
      static: {
        ArrayIterator$: function(iterable, $E) {
          return new J.ArrayIterator(iterable, iterable.length, 0, [$E]);
        }
      }
    },
    JSNumber: {
      "^": "Interceptor;$ti",
      remainder$1: function(receiver, b) {
        H.numTypeCheck(b);
        if (typeof b !== "number")
          throw H.wrapException(H.argumentErrorValue(b));
        return receiver % b;
      },
      toString$0: function(receiver) {
        if (receiver === 0 && 1 / receiver < 0)
          return "-0.0";
        else
          return "" + receiver;
      },
      $add: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver + other;
      },
      _isInt32$1: function(receiver, value) {
        return (value | 0) === value;
      },
      _tdivFast$1: function(receiver, other) {
        H.numTypeCheck(other);
        return this._isInt32$1(receiver, receiver) ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
      },
      _tdivSlow$1: function(receiver, other) {
        var quotient;
        H.numTypeCheck(other);
        quotient = receiver / other;
        if (quotient >= -2147483648 && quotient <= 2147483647)
          return quotient | 0;
        if (quotient > 0) {
          if (quotient !== 1 / 0)
            return Math.floor(quotient);
        } else if (quotient > -1 / 0)
          return Math.ceil(quotient);
        throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + H.S(other)));
      },
      _shrOtherPositive$1: function(receiver, other) {
        var t1;
        H.numTypeCheck(other);
        if (receiver > 0)
          t1 = this._shrBothPositive$1(receiver, other);
        else {
          if (typeof other !== "number")
            return other.$gt();
          if (other > 31)
            t1 = 31;
          else
            t1 = other;
          t1 = receiver >> t1 >>> 0;
        }
        return t1;
      },
      _shrBothPositive$1: function(receiver, other) {
        H.numTypeCheck(other);
        return other > 31 ? 0 : receiver >>> other;
      },
      $lt: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver < other;
      },
      $gt: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver > other;
      },
      $le: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver <= other;
      },
      $ge: function(receiver, other) {
        H.numTypeCheck(other);
        if (typeof other !== "number")
          throw H.wrapException(H.argumentErrorValue(other));
        return receiver >= other;
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      },
      $isdouble: 1,
      $isnum: 1
    },
    JSInt: {
      "^": "JSNumber;$ti",
      $isint: 1
    },
    JSDouble: {
      "^": "JSNumber;$ti"
    },
    JSString: {
      "^": "Interceptor;$ti",
      _codeUnitAt$1: function(receiver, index) {
        H.intTypeCheck(index);
        if (typeof index !== "number")
          return index.$ge();
        if (index >= receiver.length)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver.charCodeAt(index);
      },
      $add: function(receiver, other) {
        H.stringTypeCheck(other);
        if (typeof other !== "string")
          throw H.wrapException(P.ArgumentError$value(other, null, null));
        return receiver + other;
      },
      substring$2: function(receiver, startIndex, endIndex) {
        H.intTypeCheck(startIndex);
        H.intTypeCheck(endIndex);
        H.checkInt(startIndex);
        if (endIndex == null)
          endIndex = receiver.length;
        if (typeof startIndex !== "number")
          return startIndex.$lt();
        if (startIndex < 0)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (startIndex > endIndex)
          throw H.wrapException(P.RangeError$value(startIndex, null, null));
        if (endIndex > receiver.length)
          throw H.wrapException(P.RangeError$value(endIndex, null, null));
        return receiver.substring(startIndex, endIndex);
      },
      substring$1: function($receiver, startIndex) {
        return this.substring$2($receiver, startIndex, null);
      },
      get$isEmpty: function(receiver) {
        return receiver.length === 0;
      },
      toString$0: function(receiver) {
        return receiver;
      },
      get$length: function(receiver) {
        return receiver.length;
      },
      $index: function(receiver, index) {
        H.intTypeCheck(index);
        if (typeof index !== "number" || Math.floor(index) !== index)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        if (index >= receiver.length || index < 0)
          throw H.wrapException(H.diagnoseIndexError(receiver, index));
        return receiver[index];
      },
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1,
      $isString: 1
    }
  }], ["dart._internal", "dart:_internal",, H, {
    "^": "",
    printToConsole: function(line) {
      H.printString(H.S(H.stringTypeCheck(line)));
    },
    CastStream: {
      "^": "Stream;$ti",
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    CastStreamSubscription: {
      "^": "Object;$ti",
      $isStreamSubscription: 1,
      $asStreamSubscription: function($S, $T) {
        return [$T];
      }
    },
    CastStreamTransformer: {
      "^": "StreamTransformerBase;$ti",
      $asStreamTransformer: function(SS, ST, TS, TT) {
        return [TS, TT];
      },
      $asStreamTransformerBase: function(SS, ST, TS, TT) {
        return [TS, TT];
      }
    },
    CastConverter: {
      "^": "Converter;$ti",
      $asStreamTransformer: function(SS, ST, TS, TT) {
        return [TS, TT];
      },
      $asStreamTransformerBase: function(SS, ST, TS, TT) {
        return [TS, TT];
      },
      $asConverter: function(SS, ST, TS, TT) {
        return [TS, TT];
      }
    },
    _CastIterableBase: {
      "^": "Iterable;$ti",
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    CastIterator: {
      "^": "Object;$ti",
      $isIterator: 1,
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    CastIterable: {
      "^": "_CastIterableBase;$ti"
    },
    _EfficientLengthCastIterable: {
      "^": "CastIterable;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      }
    },
    _CastListBase: {
      "^": "__CastListBase__CastIterableBase_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $isListMixin: 1,
      $asListMixin: function($S, $T) {
        return [$T];
      },
      $isList: 1,
      $asList: function($S, $T) {
        return [$T];
      }
    },
    CastList: {
      "^": "_CastListBase;$ti"
    },
    CastSet: {
      "^": "_CastIterableBase;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $isSet: 1,
      $asSet: function($S, $T) {
        return [$T];
      }
    },
    CastMap: {
      "^": "MapBase;$ti",
      $asMapBase: function(SK, SV, $K, $V) {
        return [$K, $V];
      },
      $asMapMixin: function(SK, SV, $K, $V) {
        return [$K, $V];
      },
      $asMap: function(SK, SV, $K, $V) {
        return [$K, $V];
      }
    },
    CastQueue: {
      "^": "_CastIterableBase;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $isQueue: 1,
      $asQueue: function($S, $T) {
        return [$T];
      }
    },
    CodeUnits: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    ExternalName: {
      "^": "Object;$ti"
    },
    EfficientLengthIterable: {
      "^": "Iterable;$ti"
    },
    ListIterable: {
      "^": "EfficientLengthIterable;$ti"
    },
    SubListIterable: {
      "^": "ListIterable;$ti"
    },
    ListIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    MappedIterable: {
      "^": "Iterable;$ti",
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    EfficientLengthMappedIterable: {
      "^": "MappedIterable;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      }
    },
    MappedIterator: {
      "^": "Iterator;$ti",
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    MappedListIterable: {
      "^": "ListIterable;$ti",
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $asListIterable: function($S, $T) {
        return [$T];
      },
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    WhereIterable: {
      "^": "Iterable;$ti"
    },
    WhereIterator: {
      "^": "Iterator;$ti"
    },
    ExpandIterable: {
      "^": "Iterable;$ti",
      $asIterable: function($S, $T) {
        return [$T];
      }
    },
    ExpandIterator: {
      "^": "Object;$ti",
      $isIterator: 1,
      $asIterator: function($S, $T) {
        return [$T];
      }
    },
    TakeIterable: {
      "^": "Iterable;$ti"
    },
    EfficientLengthTakeIterable: {
      "^": "TakeIterable;$ti",
      $isEfficientLengthIterable: 1
    },
    TakeIterator: {
      "^": "Iterator;$ti"
    },
    TakeWhileIterable: {
      "^": "Iterable;$ti"
    },
    TakeWhileIterator: {
      "^": "Iterator;$ti"
    },
    SkipIterable: {
      "^": "Iterable;$ti"
    },
    EfficientLengthSkipIterable: {
      "^": "SkipIterable;$ti",
      $isEfficientLengthIterable: 1
    },
    SkipIterator: {
      "^": "Iterator;$ti"
    },
    SkipWhileIterable: {
      "^": "Iterable;$ti"
    },
    SkipWhileIterator: {
      "^": "Iterator;$ti"
    },
    EmptyIterable: {
      "^": "EfficientLengthIterable;$ti"
    },
    EmptyIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    FollowedByIterable: {
      "^": "Iterable;$ti"
    },
    EfficientLengthFollowedByIterable: {
      "^": "FollowedByIterable;$ti",
      $isEfficientLengthIterable: 1
    },
    FollowedByIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    WhereTypeIterable: {
      "^": "Iterable;$ti"
    },
    WhereTypeIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    IterableElementError: {
      "^": "Object;$ti"
    },
    LinkedList: {
      "^": "IterableBase;$ti"
    },
    LinkedListEntry0: {
      "^": "Object;$ti"
    },
    _LinkedListIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    FixedLengthListMixin: {
      "^": "Object;$ti"
    },
    UnmodifiableListMixin: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    FixedLengthListBase: {
      "^": "ListBase;$ti",
      $isFixedLengthListMixin: 1
    },
    UnmodifiableListBase: {
      "^": "ListBase;$ti",
      $isUnmodifiableListMixin: 1
    },
    _ListIndicesIterable: {
      "^": "ListIterable;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asListIterable: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      }
    },
    ListMapView: {
      "^": "UnmodifiableMapBase;$ti",
      $asMapBase: function($E) {
        return [P.int, $E];
      },
      $asMapMixin: function($E) {
        return [P.int, $E];
      },
      $asUnmodifiableMapBase: function($E) {
        return [P.int, $E];
      },
      $as_UnmodifiableMapMixin: function($E) {
        return [P.int, $E];
      },
      $asMap: function($E) {
        return [P.int, $E];
      }
    },
    ReversedListIterable: {
      "^": "ListIterable;$ti"
    },
    UnmodifiableListError: {
      "^": "Object;$ti"
    },
    NonGrowableListError: {
      "^": "Object;$ti"
    },
    Sort: {
      "^": "Object;$ti"
    },
    Symbol0: {
      "^": "Object;$ti",
      $isSymbol: 1
    },
    __CastListBase__CastIterableBase_ListMixin: {
      "^": "_CastIterableBase;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function($S, $T) {
        return [$T];
      },
      $isListMixin: 1,
      $asListMixin: function($S, $T) {
        return [$T];
      },
      $isList: 1,
      $asList: function($S, $T) {
        return [$T];
      }
    }
  }], ["dart2js._embedded_names", "dart:_js_embedded_names",, H, {
    "^": "",
    JsGetName: {
      "^": "Object;$ti"
    },
    JsBuiltin: {
      "^": "Object;$ti"
    }
  }], ["_js_helper", "dart:_js_helper",, H, {
    "^": "",
    isCheckPropertyToJsConstructorName: function(isCheckProperty) {
      return H.stringTypeCheck(isCheckProperty).substring(3);
    },
    isDartFunctionType: function(type) {
      return 'func' in type;
    },
    isDartFutureOrType: function(type) {
      return 'futureOr' in type;
    },
    isDartVoidTypeRti: function(type) {
      return type === -1;
    },
    rawRtiToJsConstructorName: function(rti) {
      return rti.builtin$cls;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved;
      H.stringTypeCheck(rawClassName);
      preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getRawRuntimeType: function(o) {
      return o.constructor;
    },
    builtinIsSubtype: function(type, other) {
      return '$is' + H.stringTypeCheck(other) in type.prototype;
    },
    isDartFunctionTypeRti: function(type) {
      return type.builtin$cls === "Function";
    },
    isNullType: function(type) {
      return type.builtin$cls === "Null";
    },
    isDartDynamicTypeRti: function(type) {
      return type == null;
    },
    isDartJsInteropTypeArgumentRti: function(type) {
      return type === -2;
    },
    isDartObjectTypeRti: function(type) {
      return type.builtin$cls === "Object";
    },
    isNullTypeRti: function(type) {
      return type.builtin$cls === "Null";
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    requiresPreamble: function() {
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_formatType: function(className, typeArguments) {
      H.stringTypeCheck(className);
      H.listTypeCheck(typeArguments);
      return H.unmangleAllIdentifiersIfPreservedAnyways(H.S(className) + H.S(H.joinArguments(typeArguments, 0)));
    },
    Primitives_objectTypeName: function(object) {
      var className, $arguments;
      className = H.Primitives__objectClassName(object);
      $arguments = H.joinArguments(H.getRuntimeTypeInfo(object), 0);
      return H.S(className) + H.S($arguments);
    },
    Primitives__objectClassName: function(object) {
      var interceptor, interceptorConstructor, interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName;
      interceptor = J.getInterceptor$(object);
      interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = H.constructorNameFallback(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_objectToHumanReadableString: function(object) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    Primitives_stringConcatUnchecked: function(string1, string2) {
      return H.stringTypeCheck(string1) + H.stringTypeCheck(string2);
    },
    Primitives_flattenString: function(str) {
      H.stringTypeCheck(str);
      return str.charCodeAt(0) == 0 ? str : str;
    },
    JsCache_fetch: function(cache, key) {
      return cache[H.stringTypeCheck(key)];
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$as(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1;
      if (typeof index !== "number" || Math.floor(index) !== index)
        return P.ArgumentError$value(index, "index", null);
      $length = H.intTypeCheck(J.get$length$as(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, "index", null, $length);
      return P.RangeError$value(index, "index", null);
    },
    argumentErrorValue: function(object) {
      return P.ArgumentError$value(object, null, null);
    },
    checkInt: function(value) {
      if (typeof value !== "number" || Math.floor(value) !== value)
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = P.NullThrownError$();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    unwrapException: function(ex) {
      var t1, message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2;
      t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(H.UnknownJsTypeError$(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && H.contains(message, "call stack"))
          return P.StackOverflowError$();
        message = H.tryStringifyException(ex);
        return t1.call$1(P.ArgumentError$(typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return P.StackOverflowError$();
      return ex;
    },
    tryStringifyException: function(ex) {
      return function(ex) {
        try {
          return String(ex);
        } catch (e) {
        }
        return null;
      }(ex);
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return H._StackTrace$(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = H._StackTrace$(exception);
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $function, callName, functionType, $prototype, $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName;
      H.listTypeCheck(functions);
      H.intTypeCheck(applyTrampolineIndex);
      H.boolTypeCheck(isStatic);
      H.boolTypeCheck(isIntercepted);
      H.stringTypeCheck(propertyName);
      $function = functions[0];
      callName = $function.$callName;
      if (!!J.getInterceptor$(reflectionInfo).$isList) {
        $function.$reflectionInfo = reflectionInfo;
        functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
      } else
        functionType = reflectionInfo;
      $prototype = isStatic ? Object.create(H.StaticClosure$().constructor.prototype) : Object.create(H.BoundClosure$(null, null, null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else if (H.Closure_isCsp()) {
        t1 = function tear_off(a, b, c, d) {
          this.$initialize(a, b, c, d);
        };
        $constructor = t1;
      } else {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t1, 1);
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof functionType == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      else if (typeof functionType == "function")
        if (isStatic)
          signatureFunction = functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf;
      H.intTypeCheck(arity);
      H.boolTypeCheck(isSuperCall);
      H.stringTypeCheck(stubName);
      getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_isCsp: function() {
      return false;
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, selfName, $arguments;
      if (H.boolTypeCheck(isIntercepted))
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      if (H.Closure_isCsp() || !t1 || arity >= 27)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t1, 1);
        selfName = "self" + H.S(t1);
        return new Function("return function(){var " + selfName + " = this." + H.S(H.BoundClosure_selfFieldName()) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      $arguments += H.S(t1);
      return new Function("return function(" + H.S($arguments) + "){return this." + H.S(H.BoundClosure_selfFieldName()) + "." + H.S(stubName) + "(" + H.S($arguments) + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf, getReceiver;
      H.intTypeCheck(arity);
      H.boolTypeCheck(isSuperCall);
      H.stringTypeCheck($name);
      getSelf = H.BoundClosure_selfOf;
      getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var selfField, receiverField, stubName, arity, lookedUpFunction, t1, t2, $arguments;
      selfField = H.BoundClosure_selfFieldName();
      receiverField = H.BoundClosure_receiverFieldName();
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 28;
      if (t2)
        return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(receiverField) + ");";
        t2 = $.Closure_functionCounter;
        $.Closure_functionCounter = J.$add$ns(t2, 1);
        return new Function(t1 + H.S(t2) + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(receiverField) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(H.stringTypeCheck(property)))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFrom: function(o) {
      return H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(o));
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return H.getType(H.intTypeCheck(signature));
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (value == null)
        return false;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFrom(value);
      if (functionTypeObject == null)
        return false;
      return H.isFunctionSubtype(functionTypeObject, functionTypeRti);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if (true === $._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.boolTypeCheck(H.functionTypeTest(value, functionTypeRti)))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      return H.assertSubtypeOfRuntimeType(o, futureOrRti);
    },
    _typeDescription: function(value) {
      var functionTypeObject;
      if (value instanceof H.Closure) {
        functionTypeObject = H.extractFunctionTypeObjectFrom(value);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(P.CyclicInitializationError$(H.stringTypeCheck(staticName)));
    },
    jsonEncodeNative: function(string) {
      return JSON.stringify(H.stringTypeCheck(string));
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag(H.stringTypeCheck($name));
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(H.getField(interceptor, "$as" + H.S(substitutionName)), H.getRuntimeTypeInfo(object));
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : H.getIndex(rti, index);
    },
    _getRuntimeTypeAsString: function(rti, genericContext) {
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      return H.S(H.unminifyOrTag(H.rawRtiToJsConstructorName(H.getIndex(rti, 0)))) + H.S(H._joinArguments(rti, 1, genericContext));
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (H.isDartDynamicTypeRti(rti))
        return "dynamic";
      if (H.isDartVoidTypeRti(rti))
        return "void";
      if (H.isJsArray(rti))
        return H._getRuntimeTypeAsString(rti, genericContext);
      if (H.isJsFunction(rti))
        return H.unminifyOrTag(H.rawRtiToJsConstructorName(rti));
      if (H.isDartJsInteropTypeArgumentRti(rti))
        return "dynamic";
      if (H.isGenericFunctionTypeParameter(rti)) {
        H.intTypeCheck(rti);
        if (genericContext != null) {
          if (typeof rti !== "number")
            return rti.$lt();
          t1 = rti < 0 || rti >= genericContext.length;
        } else
          t1 = true;
        if (t1)
          return "unexpected-generic-index:" + H.S(rti);
        t1 = genericContext.length;
        if (typeof rti !== "number")
          return H.iae(rti);
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if (H.isDartFunctionType(rti))
        return H._functionRtiToString(rti, genericContext);
      if (H.isDartFutureOrType(rti))
        return "FutureOr<" + H.S(H._runtimeTypeToString(H.getFutureOrArgument(rti), genericContext)) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var t1, boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, argumentsText, sep, argument, optionalArguments, namedArguments;
      t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if (H.boolTypeCheck(H.hasField(rti, "bounds"))) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = ", ") {
          typeParameters = J.$add$ns(typeParameters, typeSep);
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = J.$add$ns(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (H.isInterestingBound(boundRti))
            typeParameters = J.$add$ns(typeParameters, C.JSString_methods.$add(" extends ", H._runtimeTypeToString(boundRti, genericContext)));
        }
        typeParameters = J.$add$ns(typeParameters, ">");
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if (H.boolTypeCheck(H.hasField(rti, "args")))
        for (t1 = C.JSArray_methods.get$iterator(rti.args), argumentsText = "", sep = ""; t1.moveNext$0(); sep = ", ") {
          argument = t1.get$current();
          argumentsText = J.$add$ns(J.$add$ns(argumentsText, sep), H._runtimeTypeToString(argument, genericContext));
        }
      else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText = J.$add$ns(argumentsText, sep + "[");
        for (t1 = C.JSArray_methods.get$iterator(optionalArguments), sep = ""; t1.moveNext$0(); sep = ", ") {
          argument = t1.get$current();
          argumentsText = J.$add$ns(J.$add$ns(argumentsText, sep), H._runtimeTypeToString(argument, genericContext));
        }
        argumentsText = J.$add$ns(argumentsText, "]");
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText = J.$add$ns(argumentsText, sep + "{");
        for (t1 = J.get$iterator$a(H.extractKeys(namedArguments)), sep = ""; t1.moveNext$0(); sep = ", ") {
          t2 = H.stringTypeCheck(t1.get$current());
          argumentsText = J.$add$ns(J.$add$ns(J.$add$ns(argumentsText, sep), H._runtimeTypeToString(namedArguments[t2], genericContext)), " " + H.S(t2));
        }
        argumentsText = J.$add$ns(argumentsText, "}");
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return H.S(typeParameters) + "(" + H.S(argumentsText) + ") => " + H.S(returnTypeText);
    },
    joinArguments: function(types, startIndex) {
      return H._joinArguments(types, H.intTypeCheck(startIndex), null);
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.intTypeCheck(startIndex);
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = P.StringBuffer$("");
      index = startIndex;
      separator = "";
      allDynamic = true;
      while (true) {
        t1 = H.getLength(types);
        if (typeof index !== "number")
          return index.$lt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(index < t1))
          break;
        buffer.write$1(separator);
        argument = H.getIndex(types, index);
        if (argument != null)
          allDynamic = false;
        buffer.write$1(H._runtimeTypeToString(argument, genericContext));
        ++index;
        separator = ", ";
      }
      return "<" + H.S(buffer) + ">";
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = H.invoke(substitution, $arguments);
      if (substitution == null)
        return;
      if (H.isJsArray(substitution))
        return substitution;
      if (H.isJsFunction(substitution))
        return H.invoke(substitution, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (H.getField(interceptor, isField) == null)
        return false;
      return H.checkArguments(H.getField(interceptor, asField), $arguments, null, checks, null);
    },
    computeTypeName: function(isField, $arguments) {
      H.stringTypeCheck(isField);
      H.listTypeCheck($arguments);
      return H.Primitives_formatType(H.unminifyOrTag(H.isCheckPropertyToJsConstructorName(isField)), $arguments);
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, H.computeTypeName(isField, checks)));
    },
    checkArguments: function(substitution, $arguments, sEnv, checks, tEnv) {
      return H.areSubtypes(H.substitute(substitution, $arguments), sEnv, checks, tEnv);
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = H.getLength(t);
        if (typeof len !== "number")
          return H.iae(len);
        i = 0;
        for (; i < len; ++i)
          if (!H._isSubtype(null, null, H.getIndex(t, i), tEnv))
            return false;
        return true;
      }
      len = H.getLength(s);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        if (!H._isSubtype(H.getIndex(s, i), sEnv, H.getIndex(t, i), tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return H.invokeOn(signature, context, H.getRuntimeTypeArguments(J.getInterceptor$(context), context, contextName));
    },
    isTopType: function(type) {
      return H.isDartDynamicTypeRti(type) || H.isDartVoidTypeRti(type) || H.isDartObjectTypeRti(type) || H.isDartJsInteropTypeArgumentRti(type);
    },
    isSupertypeOfNull: function(type) {
      return H.isSupertypeOfNullBase(type) || H.isSupertypeOfNullRecursive(type);
    },
    isSupertypeOfNullBase: function(type) {
      return H.isDartDynamicTypeRti(type) || H.isDartObjectTypeRti(type) || H.isNullTypeRti(type) || H.isDartVoidTypeRti(type) || H.isDartJsInteropTypeArgumentRti(type);
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (H.isGenericFunctionTypeParameter(type))
        return false;
      if (H.isDartFutureOrType(type)) {
        typeArgument = H.getFutureOrArgument(type);
        return H.isSupertypeOfNullBase(type) || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    getFutureOrArgument: function(type) {
      return H.boolTypeCheck(H.hasField(type, "type")) ? H.getField(type, "type") : null;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return H.isSupertypeOfNull(t);
      if (H.isTopType(t))
        return true;
      if (typeof t == "object") {
        if (H.isDartFutureOrType(t))
          if (H.checkSubtypeOfRuntimeType(o, H.getFutureOrArgument(t)))
            return true;
        if (H.isDartFunctionType(t))
          return H.boolTypeCheck(H.functionTypeTest(o, t));
      }
      type = H.getRawRuntimeType(J.getInterceptor$(o));
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H.isSubtype(type, t);
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    getArguments: function(type) {
      return H.isJsArray(type) ? type.slice(1) : null;
    },
    isSubtype: function(s, t) {
      return H._isSubtype(s, null, t, null);
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var typeOfS, tTypeArgument, futureArguments, typeOfT, typeOfTString, substitution;
      if (H.isIdentical(s, t))
        return true;
      if (H.isTopType(t))
        return true;
      if (H.isDartJsInteropTypeArgumentRti(s))
        return true;
      if (H.isTopType(s)) {
        if (H.isGenericFunctionTypeParameter(t))
          return false;
        if (H.isDartFutureOrType(t))
          return H._isSubtype(s, sEnv, H.getFutureOrArgument(t), tEnv);
        return false;
      }
      if (H.isGenericFunctionTypeParameter(s))
        return false;
      if (H.isGenericFunctionTypeParameter(t))
        return false;
      if (H.isNullType(s))
        return true;
      if (H.isDartFunctionType(t))
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if (H.isDartFunctionType(s))
        return H.isDartFunctionTypeRti(t);
      typeOfS = H.isJsArray(s) ? H.getIndex(s, 0) : s;
      if (H.isDartFutureOrType(t)) {
        tTypeArgument = H.getFutureOrArgument(t);
        if (H.isDartFutureOrType(s))
          return H._isSubtype(H.getFutureOrArgument(s), sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!H.builtinIsSubtype(typeOfS, "Future"))
            return false;
          futureArguments = H.substitute(H.getField(typeOfS.prototype, "$as" + "Future"), H.getArguments(s));
          return H._isSubtype(H.isJsArray(futureArguments) ? H.getIndex(futureArguments, 0) : null, sEnv, tTypeArgument, tEnv);
        }
      }
      typeOfT = H.isJsArray(t) ? H.getIndex(t, 0) : t;
      if (H.isNotIdentical(typeOfT, typeOfS)) {
        typeOfTString = H.rawRtiToJsConstructorName(typeOfT);
        if (!H.builtinIsSubtype(typeOfS, typeOfTString))
          return false;
        substitution = H.getField(typeOfS.prototype, "$as" + H.S(typeOfTString));
      } else
        substitution = null;
      if (!H.isJsArray(t))
        return true;
      return H.checkArguments(substitution, H.getArguments(s), sEnv, H.getArguments(t), tEnv);
    },
    isFunctionSubtype: function(s, t) {
      return H._isFunctionSubtype(s, null, t, null);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!H.isDartFunctionType(s))
        return false;
      if (H.boolTypeCheck(H.hasField(s, "bounds"))) {
        if (H.boolTypeCheck(H.hasNoField(t, "bounds")))
          return false;
        sBounds = H.getField(s, "bounds");
        tBounds = H.getField(t, "bounds");
        if (H.getLength(sBounds) != H.getLength(tBounds))
          return false;
      } else if (H.boolTypeCheck(H.hasField(t, "bounds")))
        return false;
      if (!H._isSubtype(H.getField(s, "ret"), sEnv, H.getField(t, "ret"), tEnv))
        return false;
      sParameterTypes = H.getField(s, "args");
      tParameterTypes = H.getField(t, "args");
      sOptionalParameterTypes = H.getField(s, "opt");
      tOptionalParameterTypes = H.getField(t, "opt");
      sParametersLen = sParameterTypes != null ? H.getLength(sParameterTypes) : 0;
      tParametersLen = tParameterTypes != null ? H.getLength(tParameterTypes) : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? H.getLength(sOptionalParameterTypes) : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? H.getLength(tOptionalParameterTypes) : 0;
      if (typeof sParametersLen !== "number")
        return sParametersLen.$gt();
      if (typeof tParametersLen !== "number")
        return H.iae(tParametersLen);
      if (sParametersLen > tParametersLen)
        return false;
      if (typeof sOptionalParametersLen !== "number")
        return H.iae(sOptionalParametersLen);
      if (typeof tOptionalParametersLen !== "number")
        return H.iae(tOptionalParametersLen);
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(H.getIndex(tParameterTypes, pos), tEnv, H.getIndex(sParameterTypes, pos), sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(H.getIndex(tParameterTypes, tPos), tEnv, H.getIndex(sOptionalParameterTypes, sPos), sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(H.getIndex(tOptionalParameterTypes, tPos), tEnv, H.getIndex(sOptionalParameterTypes, sPos), sEnv))
          return false;
      sNamedParameters = H.getField(s, "named");
      tNamedParameters = H.getField(t, "named");
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var names, t1, i, $name;
      names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    isGenericFunctionTypeParameter: function(type) {
      return typeof type === "number";
    },
    invoke: function($function, $arguments) {
      return H.invokeOn($function, null, $arguments);
    },
    invokeOn: function($function, receiver, $arguments) {
      return $function.apply(receiver, $arguments);
    },
    getField: function(object, $name) {
      return object[H.stringTypeCheck($name)];
    },
    getIndex: function(array, index) {
      return array[H.intTypeCheck(index)];
    },
    getLength: function(array) {
      return array.length;
    },
    isJsArray: function(value) {
      return typeof value === "object" && value !== null && value.constructor === Array;
    },
    hasField: function(object, $name) {
      return $name in object;
    },
    hasNoField: function(object, $name) {
      return !H.boolTypeCheck(H.hasField(object, $name));
    },
    isJsFunction: function(o) {
      return typeof o == "function";
    },
    isIdentical: function(s, t) {
      return s === t;
    },
    isNotIdentical: function(s, t) {
      return s !== t;
    },
    isInterestingBound: function(rti) {
      return rti != null && H.isNotIdentical(rti, P.Object);
    },
    contains: function(userAgent, $name) {
      return H.stringTypeCheck(userAgent).indexOf(H.stringTypeCheck($name)) !== -1;
    },
    propertyGet: function(object, property) {
      return object[H.stringTypeCheck(property)];
    },
    propertySet: function(object, property, value) {
      object[H.stringTypeCheck(property)] = value;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    interceptorsByTag: function() {
      return init.interceptorsByTag;
    },
    leafTags: function() {
      return init.leafTags;
    },
    lookupInterceptor: function(tag) {
      H.stringTypeCheck(tag);
      return H.propertyGet(H.interceptorsByTag(), tag);
    },
    lookupAndCacheInterceptor: function(obj) {
      var tag, record, interceptor, interceptorClass, mark;
      tag = H.stringTypeCheck($.getTagFunction.call$1(obj));
      record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
      if (record != null)
        return H.patchInstance(obj, record);
      interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
      if (interceptor != null)
        return interceptor;
      interceptorClass = H.lookupInterceptor(tag);
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = H.propertyGet($.dispatchRecordsForInstanceTags, tag);
          if (record != null)
            return H.patchInstance(obj, record);
          interceptor = H.propertyGet($.interceptorsForUncacheableTags, tag);
          if (interceptor != null)
            return interceptor;
          interceptorClass = H.lookupInterceptor(tag);
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        H.propertySet($.dispatchRecordsForInstanceTags, tag, record);
        return H.patchInstance(obj, record);
      }
      if (mark === "~") {
        H.propertySet($.interceptorsForUncacheableTags, tag, interceptor);
        return interceptor;
      }
      if (mark === "-")
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (H.leafTags()[tag] === true)
        return H.patchProto(obj, H.makeLeafDispatchRecord(interceptor));
      else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInstance: function(obj, record) {
      J.setDispatchProperty(obj, record);
      return J.dispatchRecordInterceptor(record);
    },
    patchProto: function(obj, record) {
      J.setDispatchProperty(Object.getPrototypeOf(obj), record);
      return J.dispatchRecordInterceptor(record);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      J.setDispatchProperty(proto, J.makeDispatchRecord(interceptor, proto, null, null));
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (H.leafTags()[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    constructorNameFallback: function(object) {
      return C.JS_CONST_u2C(object);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = H.interceptorsByTag();
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              J.setDispatchProperty(proto, record);
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = H.propertyGet(map, tag);
          H.propertySet(map, "!" + tag, interceptorClass);
          H.propertySet(map, "~" + tag, interceptorClass);
          H.propertySet(map, "-" + tag, interceptorClass);
          H.propertySet(map, "+" + tag, interceptorClass);
          H.propertySet(map, "*" + tag, interceptorClass);
        }
      }
    },
    initHooks: function() {
      var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
      hooks = C.JS_CONST_bDt();
      hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_u2C), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = H.applyHooksTransformer(transformer, hooks);
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    quoteStringForRegExp: function(string) {
      return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
    },
    NoSideEffects: {
      "^": "Object;$ti"
    },
    NoThrows: {
      "^": "Object;$ti"
    },
    NoInline: {
      "^": "Object;$ti"
    },
    ForceInline: {
      "^": "Object;$ti"
    },
    Native: {
      "^": "Object;$ti"
    },
    _Patch: {
      "^": "Object;$ti"
    },
    ConstantMapView: {
      "^": "UnmodifiableMapView;$ti",
      $isConstantMap: 1
    },
    ConstantMap: {
      "^": "Object;$ti",
      $isMap: 1
    },
    ConstantStringMap: {
      "^": "ConstantMap;$ti"
    },
    ConstantProtoMap: {
      "^": "ConstantStringMap;$ti"
    },
    _ConstantMapKeyIterable: {
      "^": "Iterable;$ti"
    },
    GeneralConstantMap: {
      "^": "ConstantMap;$ti"
    },
    InternalMap: {
      "^": "Object;$ti"
    },
    JSInvocationMirror: {
      "^": "Object;$ti",
      $isInvocation: 1
    },
    ReflectionInfo: {
      "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,0cachedSortedIndices,$ti",
      static: {
        ReflectionInfo$internal: function(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType) {
          return new H.ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, []);
        },
        ReflectionInfo_ReflectionInfo: function(jsFunction) {
          var data, requiredParametersInfo, optionalParametersInfo;
          data = jsFunction.$reflectionInfo;
          if (data == null)
            return;
          data = J.JSArray_markFixedList(data);
          requiredParametersInfo = data[0];
          optionalParametersInfo = data[1];
          return H.ReflectionInfo$internal(jsFunction, data, (requiredParametersInfo & 2) === 2, requiredParametersInfo >> 2, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2]);
        }
      }
    },
    Primitives: {
      "^": "Object;$ti"
    },
    JsCache: {
      "^": "Object;$ti"
    },
    TypeErrorDecoder: {
      "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver,$ti",
      matchTypeError$1: function(message) {
        var match, result, t1;
        match = new RegExp(this._pattern).exec(message);
        if (match == null)
          return;
        result = Object.create(null);
        t1 = this._arguments;
        if (!J.$eq$(t1, -1))
          result.arguments = match[t1 + 1];
        t1 = this._argumentsExpr;
        if (!J.$eq$(t1, -1))
          result.argumentsExpr = match[t1 + 1];
        t1 = this._expr;
        if (!J.$eq$(t1, -1))
          result.expr = match[t1 + 1];
        t1 = this._method;
        if (!J.$eq$(t1, -1))
          result.method = match[t1 + 1];
        t1 = this._receiver;
        if (!J.$eq$(t1, -1))
          result.receiver = match[t1 + 1];
        return result;
      },
      static: {
        TypeErrorDecoder$: function(_arguments, _argumentsExpr, _expr, _method, _receiver, _pattern) {
          return new H.TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver, []);
        },
        TypeErrorDecoder_buildJavaScriptObject: function() {
          return {
            toString: function() {
              return "$receiver$";
            }
          };
        },
        TypeErrorDecoder_buildJavaScriptObjectWithNonClosure: function() {
          return {$method$: null,
            toString: function() {
              return "$receiver$";
            }
          };
        },
        TypeErrorDecoder_extractPattern: function(message) {
          var match;
          message = H.stringTypeCheck(H.quoteStringForRegExp(H.stringTypeCheck(message).replace(String({}), '$receiver$')));
          match = message.match(/\\\$[a-zA-Z]+\\\$/g);
          if (match == null)
            match = H.setRuntimeTypeInfo([], [P.String]);
          return H.TypeErrorDecoder$(match.indexOf("\\$arguments\\$"), match.indexOf("\\$argumentsExpr\\$"), match.indexOf("\\$expr\\$"), match.indexOf("\\$method\\$"), match.indexOf("\\$receiver\\$"), message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'));
        },
        TypeErrorDecoder_provokeCallErrorOn: function(expression) {
          return function($expr$) {
            var $argumentsExpr$ = '$arguments$';
            try {
              $expr$.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokeCallErrorOnNull: function() {
          return function() {
            var $argumentsExpr$ = '$arguments$';
            try {
              null.$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }();
        },
        TypeErrorDecoder_provokeCallErrorOnUndefined: function() {
          return function() {
            var $argumentsExpr$ = '$arguments$';
            try {
              (void 0).$method$($argumentsExpr$);
            } catch (e) {
              return e.message;
            }
          }();
        },
        TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
          return function($expr$) {
            try {
              $expr$.$method$;
            } catch (e) {
              return e.message;
            }
          }(expression);
        },
        TypeErrorDecoder_provokePropertyErrorOnNull: function() {
          return function() {
            try {
              null.$method$;
            } catch (e) {
              return e.message;
            }
          }();
        },
        TypeErrorDecoder_provokePropertyErrorOnUndefined: function() {
          return function() {
            try {
              (void 0).$method$;
            } catch (e) {
              return e.message;
            }
          }();
        }
      }
    },
    NullError: {
      "^": "Error;_message,_method,$ti",
      toString$0: function(_) {
        var t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on null";
      },
      $isNoSuchMethodError: 1,
      static: {
        NullError$: function(_message, match) {
          var t1 = match == null ? null : match.method;
          return new H.NullError(_message, t1, []);
        }
      }
    },
    JsNoSuchMethodError: {
      "^": "Error;_message,_method,_receiver,$ti",
      toString$0: function(_) {
        var t1, t2;
        t1 = this._method;
        if (t1 == null)
          return "NoSuchMethodError: " + H.S(this._message);
        t2 = this._receiver;
        if (t2 == null)
          return "NoSuchMethodError: method not found: '" + H.S(t1) + "' (" + H.S(this._message) + ")";
        return "NoSuchMethodError: method not found: '" + H.S(t1) + "' on '" + H.S(t2) + "' (" + H.S(this._message) + ")";
      },
      $isNoSuchMethodError: 1,
      static: {
        JsNoSuchMethodError$: function(_message, match) {
          var t1, t2;
          t1 = match == null;
          t2 = t1 ? null : match.method;
          t1 = t1 ? null : match.receiver;
          return new H.JsNoSuchMethodError(_message, t2, t1, []);
        }
      }
    },
    UnknownJsTypeError: {
      "^": "Error;_message,$ti",
      toString$0: function(_) {
        var t1 = this._message;
        return J.get$isEmpty$s(t1) ? "Error" : "Error: " + t1;
      },
      static: {
        UnknownJsTypeError$: function(_message) {
          return new H.UnknownJsTypeError(_message, []);
        }
      }
    },
    ExceptionAndStackTrace: {
      "^": "Object;dartException,stackTrace,$ti",
      static: {
        ExceptionAndStackTrace$: function(dartException, stackTrace) {
          return new H.ExceptionAndStackTrace(dartException, stackTrace, []);
        }
      }
    },
    unwrapException_saveStackTrace: {
      "^": "Closure:4;ex,$ti",
      call$1: function(error) {
        if (!!J.getInterceptor$(error).$isError)
          if (error.$thrownJsError == null)
            error.$thrownJsError = this.ex;
        return error;
      }
    },
    _StackTrace: {
      "^": "Object;_exception,0_trace,$ti",
      toString$0: function(_) {
        var t1, trace;
        t1 = this._trace;
        if (t1 != null)
          return t1;
        t1 = this._exception;
        trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
        t1 = trace == null ? "" : trace;
        this._trace = t1;
        return t1;
      },
      $isStackTrace: 1,
      static: {
        _StackTrace$: function(_exception) {
          return new H._StackTrace(_exception, []);
        }
      }
    },
    Closure: {
      "^": "Object;$ti",
      toString$0: function(_) {
        return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
      },
      get$$call: function() {
        return this;
      },
      $isFunction: 1,
      get$$call: function() {
        return this;
      }
    },
    Closure_fromTearOff_closure: {
      "^": "Closure:0;$ti"
    },
    TearOffClosure: {
      "^": "Closure;$ti"
    },
    StaticClosure: {
      "^": "TearOffClosure;$ti",
      toString$0: function(_) {
        var $name = this.$static_name;
        if ($name == null)
          return "Closure of unknown static method";
        return "Closure '" + H.S(H.unminifyOrTag($name)) + "'";
      },
      static: {
        StaticClosure$: function() {
          return new H.StaticClosure([]);
        }
      }
    },
    BoundClosure: {
      "^": "TearOffClosure;_self,_target,_receiver,_name,$ti",
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (this === other)
          return true;
        if (!(other instanceof H.BoundClosure))
          return false;
        return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
      },
      toString$0: function(_) {
        var receiver = this._receiver;
        if (receiver == null)
          receiver = this._self;
        return "Closure '" + H.S(this._name) + "' of " + H.S(H.Primitives_objectToHumanReadableString(receiver));
      },
      static: {
        BoundClosure$: function(_self, _target, _receiver, _name) {
          return new H.BoundClosure(_self, _target, _receiver, _name, []);
        },
        BoundClosure_selfOf: function(closure) {
          return H.interceptedTypeCheck(closure, "$isBoundClosure")._self;
        },
        BoundClosure_receiverOf: function(closure) {
          return H.interceptedTypeCheck(closure, "$isBoundClosure")._receiver;
        },
        BoundClosure_selfFieldName: function() {
          var t1 = $.BoundClosure_selfFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("self");
            $.BoundClosure_selfFieldNameCache = t1;
          }
          return t1;
        },
        BoundClosure_receiverFieldName: function() {
          var t1 = $.BoundClosure_receiverFieldNameCache;
          if (t1 == null) {
            t1 = H.BoundClosure_computeFieldNamed("receiver");
            $.BoundClosure_receiverFieldNameCache = t1;
          }
          return t1;
        },
        BoundClosure_computeFieldNamed: function(fieldName) {
          var template, names, t1, i, $name;
          H.stringTypeCheck(fieldName);
          template = H.BoundClosure$("self", "target", "receiver", "name");
          names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
          for (t1 = names.length, i = 0; i < t1; ++i) {
            $name = names[i];
            if (template[$name] === fieldName)
              return $name;
          }
        }
      }
    },
    Instantiation: {
      "^": "Closure;$ti"
    },
    Instantiation1: {
      "^": "Instantiation;$ti"
    },
    Instantiation2: {
      "^": "Instantiation;$ti"
    },
    Instantiation3: {
      "^": "Instantiation;$ti"
    },
    Instantiation4: {
      "^": "Instantiation;$ti"
    },
    Instantiation5: {
      "^": "Instantiation;$ti"
    },
    Instantiation6: {
      "^": "Instantiation;$ti"
    },
    Instantiation7: {
      "^": "Instantiation;$ti"
    },
    Instantiation8: {
      "^": "Instantiation;$ti"
    },
    Instantiation9: {
      "^": "Instantiation;$ti"
    },
    Instantiation10: {
      "^": "Instantiation;$ti"
    },
    Instantiation11: {
      "^": "Instantiation;$ti"
    },
    Instantiation12: {
      "^": "Instantiation;$ti"
    },
    Instantiation13: {
      "^": "Instantiation;$ti"
    },
    Instantiation14: {
      "^": "Instantiation;$ti"
    },
    Instantiation15: {
      "^": "Instantiation;$ti"
    },
    Instantiation16: {
      "^": "Instantiation;$ti"
    },
    Instantiation17: {
      "^": "Instantiation;$ti"
    },
    Instantiation18: {
      "^": "Instantiation;$ti"
    },
    Instantiation19: {
      "^": "Instantiation;$ti"
    },
    Instantiation20: {
      "^": "Instantiation;$ti"
    },
    Creates: {
      "^": "Object;$ti"
    },
    Returns: {
      "^": "Object;$ti"
    },
    JSName: {
      "^": "Object;$ti"
    },
    JavaScriptIndexingBehavior: {
      "^": "JSMutableIndexable;$ti"
    },
    TypeErrorImplementation: {
      "^": "Error;message,$ti",
      toString$0: function(_) {
        return this.message;
      },
      $isAssertionError: 1,
      $isTypeError: 1,
      static: {
        TypeErrorImplementation$: function(value, type) {
          return new H.TypeErrorImplementation("TypeError: " + H.S(P.Error_safeToString(value)) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + H.S(type) + "'", []);
        }
      }
    },
    CastErrorImplementation: {
      "^": "Error;$ti",
      $isCastError: 1
    },
    FallThroughErrorImplementation: {
      "^": "FallThroughError;$ti"
    },
    RuntimeError: {
      "^": "Error;message,$ti",
      toString$0: function(_) {
        return "RuntimeError: " + H.S(this.message);
      },
      static: {
        RuntimeError$: function(message) {
          return new H.RuntimeError(message, []);
        }
      }
    },
    DeferredNotLoadedError: {
      "^": "Error;$ti",
      $isNoSuchMethodError: 1
    },
    UnimplementedNoSuchMethodError: {
      "^": "Error;$ti",
      $isNoSuchMethodError: 1
    },
    MainError: {
      "^": "Error;$ti",
      $isNoSuchMethodError: 1
    },
    _AssertionError: {
      "^": "AssertionError;$ti"
    },
    _UnreachableError: {
      "^": "AssertionError;$ti"
    },
    TypeImpl: {
      "^": "Object;$ti",
      $isType: 1
    },
    TypeVariable: {
      "^": "Object;$ti"
    },
    JsLinkedHashMap: {
      "^": "MapBase;$ti",
      $isInternalMap: 1,
      $isLinkedHashMap: 1
    },
    Es6LinkedHashMap: {
      "^": "JsLinkedHashMap;$ti"
    },
    LinkedHashMapCell: {
      "^": "Object;$ti"
    },
    LinkedHashMapKeyIterable: {
      "^": "EfficientLengthIterable;$ti"
    },
    LinkedHashMapKeyIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    initHooks_closure: {
      "^": "Closure:4;getTag,$ti",
      call$1: function(o) {
        return this.getTag(o);
      }
    },
    initHooks_closure0: {
      "^": "Closure:8;getUnknownTag,$ti",
      call$2: function(o, tag) {
        return this.getUnknownTag(o, H.stringTypeCheck(tag));
      }
    },
    initHooks_closure1: {
      "^": "Closure:9;prototypeForTag,$ti",
      call$1: function(tag) {
        return this.prototypeForTag(H.stringTypeCheck(tag));
      }
    },
    JSSyntaxRegExp: {
      "^": "Object;$ti",
      $isPattern: 1,
      $isRegExp: 1
    },
    _MatchImplementation: {
      "^": "Object;$ti",
      $isMatch: 1
    },
    _AllMatchesIterable: {
      "^": "IterableBase;$ti",
      $asIterableBase: function() {
        return [P.Match];
      },
      $asIterable: function() {
        return [P.Match];
      }
    },
    _AllMatchesIterator: {
      "^": "Object;$ti",
      $isIterator: 1,
      $asIterator: function() {
        return [P.Match];
      }
    },
    StringMatch: {
      "^": "Object;$ti",
      $isMatch: 1
    },
    _StringAllMatchesIterable: {
      "^": "Iterable;$ti",
      $asIterable: function() {
        return [P.Match];
      }
    },
    _StringAllMatchesIterator: {
      "^": "Object;$ti",
      $isIterator: 1,
      $asIterator: function() {
        return [P.Match];
      }
    }
  }], ["dart._js_names", "dart:_js_names",, H, {
    "^": "",
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return H.stringTypeCheck(H.JsCache_fetch(init.mangledGlobalNames, H.stringTypeCheck($name)));
    },
    unmangleAllIdentifiersIfPreservedAnyways: function(str) {
      return function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.stringTypeCheck(str), init.mangledGlobalNames);
    },
    _LazyMangledNamesMap: {
      "^": "Object;$ti"
    },
    _LazyMangledInstanceNamesMap: {
      "^": "_LazyMangledNamesMap;$ti"
    },
    _LazyReflectiveNamesMap: {
      "^": "Object;$ti"
    }
  }], ["dart2js._js_primitives", "dart:_js_primitives",, H, {
    "^": "",
    printString: function(string) {
      H.stringTypeCheck(string);
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  }], ["metadata", "dart:_metadata",, H, {
    "^": "",
    SupportedBrowser: {
      "^": "Object;$ti"
    },
    Experimental: {
      "^": "Object;$ti"
    },
    DomName: {
      "^": "Object;$ti"
    },
    DocsEditable: {
      "^": "Object;$ti"
    },
    Unstable: {
      "^": "Object;$ti"
    }
  }], ["dart.typed_data.implementation", "dart:_native_typed_data",, H, {
    "^": "",
    NativeByteBuffer: {
      "^": "Interceptor;$ti",
      $isNativeByteBuffer: 1,
      $isByteBuffer: 1,
      "%": ""
    },
    NativeFloat32x4List: {
      "^": "_NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Float32x4];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.Float32x4];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Float32x4];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Float32x4];
      },
      $isList: 1,
      $asList: function() {
        return [P.Float32x4];
      },
      $isTypedData: 1,
      $isFloat32x4List: 1
    },
    NativeInt32x4List: {
      "^": "_NativeInt32x4List_Object_ListMixin_FixedLengthListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Int32x4];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.Int32x4];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Int32x4];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Int32x4];
      },
      $isList: 1,
      $asList: function() {
        return [P.Int32x4];
      },
      $isTypedData: 1,
      $isInt32x4List: 1
    },
    NativeFloat64x2List: {
      "^": "_NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Float64x2];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.Float64x2];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Float64x2];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Float64x2];
      },
      $isList: 1,
      $asList: function() {
        return [P.Float64x2];
      },
      $isTypedData: 1,
      $isFloat64x2List: 1
    },
    NativeTypedData: {
      "^": "Interceptor;$ti",
      $isNativeTypedData: 1,
      $isTypedData: 1,
      "%": ""
    },
    NativeByteData: {
      "^": "NativeTypedData;$ti",
      $isNativeByteData: 1,
      $isByteData: 1,
      "%": ""
    },
    NativeTypedArray: {
      "^": "NativeTypedData;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: Isolate.functionThatReturnsNull,
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: Isolate.functionThatReturnsNull,
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: Isolate.functionThatReturnsNull
    },
    NativeTypedArrayOfDouble: {
      "^": "_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.double];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $asList: function() {
        return [P.double];
      }
    },
    NativeTypedArrayOfInt: {
      "^": "_NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.int];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      }
    },
    NativeFloat32List: {
      "^": "NativeTypedArrayOfDouble;$ti",
      $isNativeFloat32List: 1,
      $is_TypedFloatList: 1,
      $isFloat32List: 1,
      "%": ""
    },
    NativeFloat64List: {
      "^": "NativeTypedArrayOfDouble;$ti",
      $isNativeFloat64List: 1,
      $is_TypedFloatList: 1,
      $isFloat64List: 1,
      "%": ""
    },
    NativeInt16List: {
      "^": "NativeTypedArrayOfInt;$ti",
      $isNativeInt16List: 1,
      $is_TypedIntList: 1,
      $isInt16List: 1,
      "%": ""
    },
    NativeInt32List: {
      "^": "NativeTypedArrayOfInt;$ti",
      $isNativeInt32List: 1,
      $is_TypedIntList: 1,
      $isInt32List: 1,
      "%": ""
    },
    NativeInt8List: {
      "^": "NativeTypedArrayOfInt;$ti",
      $isNativeInt8List: 1,
      $is_TypedIntList: 1,
      $isInt8List: 1,
      "%": ""
    },
    NativeUint16List: {
      "^": "NativeTypedArrayOfInt;$ti",
      $isNativeUint16List: 1,
      $is_TypedIntList: 1,
      $isUint16List: 1,
      "%": ""
    },
    NativeUint32List: {
      "^": "NativeTypedArrayOfInt;$ti",
      $isNativeUint32List: 1,
      $is_TypedIntList: 1,
      $isUint32List: 1,
      "%": ""
    },
    NativeUint8ClampedList: {
      "^": "NativeTypedArrayOfInt;$ti",
      $isNativeUint8ClampedList: 1,
      $is_TypedIntList: 1,
      $isUint8ClampedList: 1,
      "%": ""
    },
    NativeUint8List: {
      "^": "NativeTypedArrayOfInt;$ti",
      $isNativeUint8List: 1,
      $is_TypedIntList: 1,
      $isUint8List: 1,
      "%": ""
    },
    NativeFloat32x4: {
      "^": "Object;$ti",
      $isFloat32x4: 1
    },
    NativeInt32x4: {
      "^": "Object;$ti",
      $isInt32x4: 1
    },
    NativeFloat64x2: {
      "^": "Object;$ti",
      $isFloat64x2: 1
    },
    _NativeFloat32x4List_Object_ListMixin: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Float32x4];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Float32x4];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Float32x4];
      },
      $isList: 1,
      $asList: function() {
        return [P.Float32x4];
      }
    },
    _NativeFloat32x4List_Object_ListMixin_FixedLengthListMixin: {
      "^": "_NativeFloat32x4List_Object_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Float32x4];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.Float32x4];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Float32x4];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Float32x4];
      },
      $isList: 1,
      $asList: function() {
        return [P.Float32x4];
      }
    },
    _NativeFloat64x2List_Object_ListMixin: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Float64x2];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Float64x2];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Float64x2];
      },
      $isList: 1,
      $asList: function() {
        return [P.Float64x2];
      }
    },
    _NativeFloat64x2List_Object_ListMixin_FixedLengthListMixin: {
      "^": "_NativeFloat64x2List_Object_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Float64x2];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.Float64x2];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Float64x2];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Float64x2];
      },
      $isList: 1,
      $asList: function() {
        return [P.Float64x2];
      }
    },
    _NativeInt32x4List_Object_ListMixin: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Int32x4];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Int32x4];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Int32x4];
      },
      $isList: 1,
      $asList: function() {
        return [P.Int32x4];
      }
    },
    _NativeInt32x4List_Object_ListMixin_FixedLengthListMixin: {
      "^": "_NativeInt32x4List_Object_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Int32x4];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.Int32x4];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Int32x4];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Int32x4];
      },
      $isList: 1,
      $asList: function() {
        return [P.Int32x4];
      }
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $asList: function() {
        return [P.double];
      }
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "_NativeTypedArrayOfDouble_NativeTypedArray_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.double];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $asList: function() {
        return [P.double];
      }
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: {
      "^": "NativeTypedArray;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      }
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: {
      "^": "_NativeTypedArrayOfInt_NativeTypedArray_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isFixedLengthListMixin: 1,
      $asFixedLengthListMixin: function() {
        return [P.int];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      }
    }
  }], ["dart.async", "dart:async",, P, {
    "^": "",
    _AsyncRun__scheduleImmediate: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      $.$get$_AsyncRun__scheduleImmediateClosure().call$1(callback);
    },
    _AsyncRun__initializeScheduleImmediate: function() {
      var t1, div, span;
      t1 = {};
      H.requiresPreamble();
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateJsOverride$closure", 4, 0, 3],
    _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", 4, 0, 3],
    _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
      P.Timer__createTimer(C.Duration_0, H.functionTypeCheck(callback, {func: 1, ret: -1}));
    }, "call$1", "async__AsyncRun__scheduleImmediateWithTimer$closure", 4, 0, 3],
    Timer__createTimer: function(duration, callback) {
      var milliseconds;
      H.interceptedTypeCheck(duration, "$isDuration");
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      milliseconds = duration.get$inMilliseconds();
      if (typeof milliseconds !== "number")
        return milliseconds.$lt();
      if (milliseconds < 0)
        milliseconds = 0;
      return P._TimerImpl$(milliseconds, callback);
    },
    _hasTimer: function() {
      H.requiresPreamble();
      return self.setTimeout != null;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return P._AsyncAwaitCompleter$($T);
    },
    _asyncStartSync: function(bodyFunction, completer) {
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      H.interceptedTypeCheck(completer, "$is_AsyncAwaitCompleter");
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer.get$future();
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]}));
    },
    _asyncReturn: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").complete$1(object);
    },
    _asyncRethrow: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var thenCallback, errorCallback, t1, t2, future;
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      thenCallback = new P._awaitOnObject_closure(bodyFunction);
      errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      t1 = J.getInterceptor$(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$1$2(H.functionTypeCheck(thenCallback, {func: 1, ret: {futureOr: 1}, args: [,]}), errorCallback, null);
      else {
        t2 = {func: 1, ret: {futureOr: 1}, args: [,]};
        if (!!t1.$isFuture)
          object.then$1$2$onError(H.functionTypeCheck(thenCallback, t2), errorCallback, null);
        else {
          future = P._Future$(null);
          future._setValue$1(object);
          future._thenNoZoneRegistration$1$2(H.functionTypeCheck(thenCallback, t2), null, null);
        }
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return P.Zone_current().registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), P.Null, P.int, null);
    },
    _rethrow: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      error = H.wrapException(error);
      error.stack = J.toString$0$(stackTrace);
      throw error;
    },
    Completer_Completer$sync: function($T) {
      return P._SyncCompleter$($T);
    },
    _nonNullError: function(error) {
      return error == null ? P.NullThrownError$() : error;
    },
    _registerErrorHandler: function(errorHandler, zone) {
      H.interceptedTypeCheck(errorHandler, "$isFunction");
      H.interceptedTypeCheck(zone, "$isZone");
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return zone.registerUnaryCallback$2$1(errorHandler, null, P.Object);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: [function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      }
    }, "call$0", "async___startMicrotaskLoop$closure", 0, 0, 1],
    _scheduleAsyncCallback: function(callback) {
      var newEntry = P._AsyncCallbackEntry$(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._lastCallback = newEntry;
        $._nextCallback = newEntry;
        if (!$._isInCallbackLoop)
          P._AsyncRun__scheduleImmediate(P.async___startMicrotaskLoop$closure());
      } else {
        $._lastCallback.set$next(newEntry);
        $._lastCallback = newEntry;
      }
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      if ($._nextCallback == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = P._AsyncCallbackEntry$(callback);
      t1 = $._lastPriorityCallback;
      if (t1 == null) {
        entry.next = H.interceptedTypeCheck($._nextCallback, "$is_AsyncCallbackEntry");
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = H.interceptedTypeCheck(t1.get$next(), "$is_AsyncCallbackEntry");
        $._lastPriorityCallback.set$next(entry);
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      currentZone = H.interceptedTypeCheck(P.Zone_current(), "$is_Zone");
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
        return;
      }
      if (C.C__RootZone === currentZone.get$_scheduleMicrotask().zone && C.C__RootZone.inSameErrorZone$1(currentZone)) {
        P._rootScheduleMicrotask(null, null, currentZone, currentZone.registerCallback$1$1(callback, -1));
        return;
      }
      P.Zone_current().scheduleMicrotask$1(P.Zone_current().bindCallbackGuarded$1(callback));
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      return P._StreamIterator$(H.assertSubtype(stream, "$isStream", [$T], "$asStream"), $T);
    },
    Zone_current: function() {
      return $.Zone__current;
    },
    Zone__enter: function(zone) {
      var previous;
      H.interceptedTypeCheck(zone, "$isZone");
      previous = $.Zone__current;
      $.Zone__current = zone;
      return previous;
    },
    Zone__leave: function(previous) {
      $.Zone__current = H.interceptedTypeCheck(previous, "$isZone");
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if (J.$eq$($.Zone__current, zone))
        return f.call$0();
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if (J.$eq$($.Zone__current, zone))
        return f.call$1(arg);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if (J.$eq$($.Zone__current, zone))
        return f.call$2(arg1, arg2);
      old = P.Zone__enter(zone);
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        P.Zone__leave(old);
      }
    },
    _rootScheduleMicrotask: [function($self, $parent, zone, f) {
      H.interceptedTypeCheck($self, "$isZone");
      H.interceptedTypeCheck($parent, "$isZoneDelegate");
      H.interceptedTypeCheck(zone, "$isZone");
      H.functionTypeCheck(f, {func: 1, ret: -1});
      if (C.C__RootZone !== zone)
        f = !C.C__RootZone.inSameErrorZone$1(zone) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    }, "call$4", "async___rootScheduleMicrotask$closure", 16, 0, 19],
    _AsyncRun__initializeScheduleImmediate_internalCallback: {
      "^": "Closure:5;_box_0,$ti",
      call$1: function(_) {
        var t1, f;
        t1 = this._box_0;
        f = t1.storedCallback;
        t1.storedCallback = null;
        f.call$0();
      }
    },
    _AsyncRun__initializeScheduleImmediate_closure: {
      "^": "Closure:10;_box_0,div,span,$ti",
      call$1: function(callback) {
        var t1, t2;
        this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
        t1 = this.div;
        t2 = this.span;
        t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
      }
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
      "^": "Closure:0;callback,$ti",
      call$0: function() {
        this.callback.call$0();
      }
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
      "^": "Closure:0;callback,$ti",
      call$0: function() {
        this.callback.call$0();
      }
    },
    _TimerImpl: {
      "^": "Object;_once,0_handle,_tick,$ti",
      set$_handle: function(_handle) {
        this._handle = H.intTypeCheck(_handle);
      },
      _TimerImpl$2: function(milliseconds, callback) {
        if (P._hasTimer())
          this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
        else
          throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
      },
      $isTimer: 1,
      static: {
        _TimerImpl$: function(milliseconds, callback) {
          var t1 = new P._TimerImpl(true, 0, []);
          t1._TimerImpl$2(milliseconds, callback);
          return t1;
        }
      }
    },
    _TimerImpl_internalCallback: {
      "^": "Closure:1;$this,callback,$ti",
      call$0: function() {
        var t1 = this.$this;
        t1.set$_handle(null);
        t1._tick = 1;
        this.callback.call$0();
      }
    },
    _AsyncAwaitCompleter: {
      "^": "Object;_completer<,isSync,$ti",
      complete$1: [function(value) {
        var t1;
        H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
        if (this.isSync)
          this._completer.complete$1(value);
        else if (H.checkSubtype(value, "$isFuture", this.$ti, "$asFuture")) {
          t1 = this._completer;
          value.then$1$2$onError(t1.get$complete(), t1.get$completeError(), -1);
        } else
          P.scheduleMicrotask(new P._AsyncAwaitCompleter_complete_closure(this, value));
      }, function() {
        return this.complete$1(null);
      }, "complete$0", "call$1", "call$0", "get$complete", 0, 2, 6],
      completeError$2: [function(e, st) {
        H.interceptedTypeCheck(st, "$isStackTrace");
        if (this.isSync)
          this._completer.completeError$2(e, st);
        else
          P.scheduleMicrotask(new P._AsyncAwaitCompleter_completeError_closure(this, e, st));
      }, function(e) {
        return this.completeError$2(e, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 4, 2, 2],
      get$future: function() {
        return this._completer.get$future();
      },
      $isCompleter: 1,
      static: {
        _AsyncAwaitCompleter$: function($T) {
          return new P._AsyncAwaitCompleter(P.Completer_Completer$sync($T), false, [$T]);
        }
      }
    },
    _AsyncAwaitCompleter_complete_closure: {
      "^": "Closure:0;$this,value,$ti",
      call$0: function() {
        this.$this.get$_completer().complete$1(this.value);
      }
    },
    _AsyncAwaitCompleter_completeError_closure: {
      "^": "Closure:0;$this,e,st,$ti",
      call$0: function() {
        this.$this.get$_completer().completeError$2(this.e, this.st);
      }
    },
    _awaitOnObject_closure: {
      "^": "Closure:11;bodyFunction,$ti",
      call$1: function(result) {
        return this.bodyFunction.call$2(0, result);
      }
    },
    _awaitOnObject_closure0: {
      "^": "Closure:12;bodyFunction,$ti",
      call$2: function(error, stackTrace) {
        this.bodyFunction.call$2(1, H.ExceptionAndStackTrace$(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
      }
    },
    _wrapJsFunctionForAsync_closure: {
      "^": "Closure:13;$protected,$ti",
      call$2: function(errorCode, result) {
        this.$protected(H.intTypeCheck(errorCode), result);
      }
    },
    _AsyncStarStreamController: {
      "^": "Object;$ti"
    },
    _IterationMarker: {
      "^": "Object;$ti"
    },
    _SyncStarIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    _SyncStarIterable: {
      "^": "IterableBase;$ti"
    },
    _BroadcastStream: {
      "^": "_ControllerStream;$ti"
    },
    _BroadcastSubscription: {
      "^": "_ControllerSubscription;$ti"
    },
    _BroadcastStreamController: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isStreamController: 1,
      $is_StreamControllerLifecycle: 1,
      $is_EventSink: 1,
      $is_EventDispatch: 1,
      $isSink: 1
    },
    _SyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;$ti",
      $isSynchronousStreamController: 1
    },
    _AsyncBroadcastStreamController: {
      "^": "_BroadcastStreamController;$ti"
    },
    _AsBroadcastStreamController: {
      "^": "_SyncBroadcastStreamController;$ti"
    },
    DeferredLibrary: {
      "^": "Object;$ti"
    },
    DeferredLoadException: {
      "^": "Object;$ti",
      $isException: 1
    },
    FutureOr: {
      "^": "Object;$ti"
    },
    Future: {
      "^": "Object;$ti"
    },
    TimeoutException: {
      "^": "Object;$ti",
      $isException: 1
    },
    Completer: {
      "^": "Object;$ti"
    },
    _Completer: {
      "^": "Object;future<,$ti",
      completeError$2: [function(error, stackTrace) {
        var replacement;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        error = P._nonNullError(error);
        if (!this.future.get$_mayComplete())
          throw H.wrapException(P.StateError$("Future already completed"));
        replacement = P.Zone_current().errorCallback$2(error, stackTrace);
        if (replacement != null) {
          error = P._nonNullError(replacement.error);
          stackTrace = replacement.stackTrace;
        }
        this._completeError$2(error, stackTrace);
      }, function(error) {
        return this.completeError$2(error, null);
      }, "completeError$1", "call$2", "call$1", "get$completeError", 4, 2, 2],
      $isCompleter: 1
    },
    _AsyncCompleter: {
      "^": "_Completer;$ti"
    },
    _SyncCompleter: {
      "^": "_Completer;future,$ti",
      complete$1: [function(value) {
        var t1;
        H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
        t1 = this.future;
        if (!t1.get$_mayComplete())
          throw H.wrapException(P.StateError$("Future already completed"));
        t1._complete$1(value);
      }, function() {
        return this.complete$1(null);
      }, "complete$0", "call$1", "call$0", "get$complete", 0, 2, 6],
      _completeError$2: function(error, stackTrace) {
        this.future._completeError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      },
      static: {
        _SyncCompleter$: function($T) {
          return new P._SyncCompleter(P._Future$($T), [$T]);
        }
      }
    },
    _FutureListener: {
      "^": "Object;0_nextListener,result,state,callback,errorCallback,$ti",
      get$_zone: function() {
        return this.result.get$_zone();
      },
      get$handlesValue: function() {
        var t1 = this.state;
        if (typeof t1 !== "number")
          return t1.$and();
        return (t1 & 1) !== 0;
      },
      get$handlesError: function() {
        var t1 = this.state;
        if (typeof t1 !== "number")
          return t1.$and();
        return (t1 & 2) !== 0;
      },
      get$hasErrorTest: function() {
        return J.$eq$(this.state, 6);
      },
      get$handlesComplete: function() {
        return J.$eq$(this.state, 8);
      },
      get$_onValue: function() {
        return H.functionTypeCheck(this.callback, {func: 1, ret: {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)}, args: [H.getTypeArgumentByIndex(this, 0)]});
      },
      get$_onError: function() {
        return this.errorCallback;
      },
      get$_errorTest: function() {
        return H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]});
      },
      get$_whenCompleteAction: function() {
        return H.functionTypeCheck(this.callback, {func: 1});
      },
      get$hasErrorCallback: function() {
        return this.get$_onError() != null;
      },
      handleValue$1: function(sourceResult) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        H.assertSubtypeOfRuntimeType(sourceResult, t1);
        return this.get$_zone().runUnary$2$2(this.get$_onValue(), sourceResult, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)}, t1);
      },
      matchesErrorTest$1: function(asyncError) {
        H.interceptedTypeCheck(asyncError, "$isAsyncError");
        if (!this.get$hasErrorTest())
          return true;
        return this.get$_zone().runUnary$2$2(this.get$_errorTest(), asyncError.error, P.bool, P.Object);
      },
      handleError$1: function(asyncError) {
        var errorCallback, t1, t2;
        H.interceptedTypeCheck(asyncError, "$isAsyncError");
        errorCallback = this.errorCallback;
        t1 = P.Object;
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)};
        if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
          return H.futureOrCheck(this.get$_zone().runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
        else
          return H.futureOrCheck(this.get$_zone().runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
      },
      handleWhenComplete$0: function() {
        return this.get$_zone().run$1$1(this.get$_whenCompleteAction(), null);
      },
      errorCallback$2: function(arg0, arg1) {
        return this.errorCallback.call$2(arg0, arg1);
      },
      static: {
        _FutureListener$then: function(result, onValue, errorCallback, $S, $T) {
          var t1 = errorCallback == null ? 1 : 3;
          return new P._FutureListener(result, t1, onValue, errorCallback, [$S, $T]);
        },
        _FutureListener$whenComplete: function(result, onComplete, $S, $T) {
          return new P._FutureListener(result, 8, onComplete, null, [$S, $T]);
        }
      }
    },
    _Future: {
      "^": "Object;_state,_zone<,0_resultOrListeners<,$ti",
      _Future$zoneValue$2: function(value, _zone, $T) {
        this._setValue$1(value);
      },
      get$_mayComplete: function() {
        return J.$eq$(this._state, 0);
      },
      get$_mayAddListener: function() {
        return J.$le$n(this._state, 1);
      },
      get$_isChained: function() {
        return J.$eq$(this._state, 2);
      },
      get$_isComplete: function() {
        return J.$ge$n(this._state, 4);
      },
      get$_hasError: function() {
        return J.$eq$(this._state, 8);
      },
      _setChained$1: function(source) {
        H.interceptedTypeCheck(source, "$is_Future");
        this._state = 2;
        this._resultOrListeners = source;
      },
      then$1$2$onError: function(f, onError, $R) {
        var t1, currentZone;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        H.interceptedTypeCheck(onError, "$isFunction");
        currentZone = P.Zone_current();
        if (currentZone !== C.C__RootZone) {
          f = currentZone.registerUnaryCallback$2$1(f, {futureOr: 1, type: $R}, t1);
          if (onError != null)
            onError = P._registerErrorHandler(onError, currentZone);
        }
        return this._thenNoZoneRegistration$1$2(f, onError, $R);
      },
      then$1$1: function(f, $R) {
        return this.then$1$2$onError(f, null, $R);
      },
      _thenNoZoneRegistration$1$2: function(f, onError, $E) {
        var t1, result;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
        H.interceptedTypeCheck(onError, "$isFunction");
        result = P._Future$($E);
        this._addListener$1(P._FutureListener$then(result, f, onError, t1, $E));
        return result;
      },
      whenComplete$1: function(action) {
        var t1, result, t2;
        H.functionTypeCheck(action, {func: 1});
        t1 = H.getTypeArgumentByIndex(this, 0);
        result = P._Future$(t1);
        t2 = result._zone;
        this._addListener$1(P._FutureListener$whenComplete(result, t2 !== C.C__RootZone ? t2.registerCallback$1$1(action, null) : action, t1, t1));
        return result;
      },
      _setPendingComplete$0: function() {
        this._state = 1;
      },
      _clearPendingComplete$0: function() {
        this._state = 0;
      },
      get$_error: function() {
        return H.interceptedTypeCheck(this._resultOrListeners, "$isAsyncError");
      },
      get$_chainSource: function() {
        return H.interceptedTypeCheck(this._resultOrListeners, "$is_Future");
      },
      _setValue$1: function(value) {
        H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
        this._state = 4;
        this._resultOrListeners = value;
      },
      _setErrorObject$1: function(error) {
        H.interceptedTypeCheck(error, "$isAsyncError");
        this._state = 8;
        this._resultOrListeners = error;
      },
      _setError$2: function(error, stackTrace) {
        this._setErrorObject$1(P.AsyncError$(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
      },
      _cloneResult$1: function(source) {
        H.interceptedTypeCheck(source, "$is_Future");
        this._state = H.intTypeCheck(source._state);
        this._resultOrListeners = source._resultOrListeners;
      },
      _addListener$1: function(listener) {
        var source;
        H.interceptedTypeCheck(listener, "$is_FutureListener");
        if (this.get$_mayAddListener()) {
          listener._nextListener = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listener;
        } else {
          if (this.get$_isChained()) {
            source = this.get$_chainSource();
            if (!source.get$_isComplete()) {
              source._addListener$1(listener);
              return;
            }
            this._cloneResult$1(source);
          }
          this._zone.scheduleMicrotask$1(new P._Future__addListener_closure(this, listener));
        }
      },
      _prependListeners$1: function(listeners) {
        var _box_0, existingListeners, cursor, cursor0, source;
        _box_0 = {};
        _box_0.listeners = listeners;
        H.interceptedTypeCheck(listeners, "$is_FutureListener");
        if (listeners == null)
          return;
        if (this.get$_mayAddListener()) {
          existingListeners = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
          this._resultOrListeners = listeners;
          if (existingListeners != null) {
            for (cursor = listeners; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
              ;
            cursor._nextListener = existingListeners;
          }
        } else {
          if (this.get$_isChained()) {
            source = this.get$_chainSource();
            if (!source.get$_isComplete()) {
              source._prependListeners$1(listeners);
              return;
            }
            this._cloneResult$1(source);
          }
          _box_0.listeners = this._reverseListeners$1(listeners);
          this._zone.scheduleMicrotask$1(new P._Future__prependListeners_closure(_box_0, this));
        }
      },
      _removeListeners$0: function() {
        var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
        this._resultOrListeners = null;
        return this._reverseListeners$1(current);
      },
      _reverseListeners$1: function(listeners) {
        var current, prev, next;
        H.interceptedTypeCheck(listeners, "$is_FutureListener");
        for (current = listeners, prev = null; current != null; prev = current, current = next) {
          next = current._nextListener;
          current._nextListener = prev;
        }
        return prev;
      },
      _complete$1: function(value) {
        var t1, t2, listeners;
        t1 = H.getTypeArgumentByIndex(this, 0);
        H.futureOrCheck(value, {futureOr: 1, type: t1});
        t2 = this.$ti;
        if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
          if (H.checkSubtype(value, "$is_Future", t2, null))
            P._Future__chainCoreFuture(value, this);
          else
            P._Future__chainForeignFuture(value, this);
        else {
          listeners = this._removeListeners$0();
          this._setValue$1(H.assertSubtypeOfRuntimeType(value, t1));
          P._Future__propagateToListeners(this, listeners);
        }
      },
      _completeError$2: [function(error, stackTrace) {
        var listeners;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        listeners = this._removeListeners$0();
        this._setError$2(error, stackTrace);
        P._Future__propagateToListeners(this, listeners);
      }, function(error) {
        return this._completeError$2(error, null);
      }, "_completeError$1", "call$2", "call$1", "get$_completeError", 4, 2, 2],
      $isFuture: 1,
      static: {
        _Future$: function($T) {
          return new P._Future(0, P.Zone_current(), [$T]);
        },
        _Future$zoneValue: function(value, _zone, $T) {
          var t1 = new P._Future(0, _zone, [$T]);
          t1._Future$zoneValue$2(value, _zone, $T);
          return t1;
        },
        _Future__chainForeignFuture: function(source, target) {
          var e, s, exception;
          H.interceptedTypeCheck(source, "$isFuture");
          H.interceptedTypeCheck(target, "$is_Future");
          target._setPendingComplete$0();
          try {
            source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
          } catch (exception) {
            e = H.unwrapException(exception);
            s = H.getTraceFromException(exception);
            P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
          }
        },
        _Future__chainCoreFuture: function(source, target) {
          var listeners;
          H.interceptedTypeCheck(source, "$is_Future");
          H.interceptedTypeCheck(target, "$is_Future");
          for (; source.get$_isChained();)
            source = source.get$_chainSource();
          if (source.get$_isComplete()) {
            listeners = target._removeListeners$0();
            target._cloneResult$1(source);
            P._Future__propagateToListeners(target, listeners);
          } else {
            listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
            target._setChained$1(source);
            source._prependListeners$1(listeners);
          }
        },
        _Future__propagateToListeners: function(source, listeners) {
          var _box_1, t1, _box_0, hasError, asyncError, listeners0, sourceResult, zone, t2, oldZone, result;
          _box_1 = {};
          _box_1.source = source;
          H.interceptedTypeCheck(source, "$is_Future");
          H.interceptedTypeCheck(listeners, "$is_FutureListener");
          for (t1 = source; true;) {
            _box_0 = {};
            hasError = t1.get$_hasError();
            if (listeners == null) {
              if (hasError) {
                asyncError = _box_1.source.get$_error();
                _box_1.source.get$_zone().handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
              }
              return;
            }
            for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
              listeners._nextListener = null;
              P._Future__propagateToListeners(_box_1.source, listeners);
            }
            sourceResult = _box_1.source.get$_resultOrListeners();
            _box_0.listenerHasError = hasError;
            _box_0.listenerValueOrError = sourceResult;
            t1 = !hasError;
            if (!t1 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
              zone = listeners.get$_zone();
              if (hasError && !_box_1.source.get$_zone().inSameErrorZone$1(zone)) {
                asyncError = _box_1.source.get$_error();
                _box_1.source.get$_zone().handleUncaughtError$2(asyncError.error, asyncError.stackTrace);
                return;
              }
              t2 = P.Zone_current();
              oldZone = (t2 == null ? zone != null : t2 !== zone) ? P.Zone__enter(zone) : null;
              if (listeners.get$handlesComplete())
                new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
              else if (t1) {
                if (listeners.get$handlesValue())
                  new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
              } else if (listeners.get$handlesError())
                new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
              if (oldZone != null)
                P.Zone__leave(oldZone);
              t1 = _box_0.listenerValueOrError;
              if (!!J.getInterceptor$(t1).$isFuture) {
                result = listeners.result;
                if (t1.get$_isComplete()) {
                  listeners = result._removeListeners$0();
                  result._cloneResult$1(t1);
                  _box_1.source = t1;
                  continue;
                } else
                  P._Future__chainCoreFuture(t1, result);
                return;
              }
            }
            result = listeners.result;
            listeners = result._removeListeners$0();
            t1 = _box_0.listenerHasError;
            t2 = _box_0.listenerValueOrError;
            if (!t1)
              result._setValue$1(t2);
            else
              result._setErrorObject$1(H.interceptedTypeCheck(t2, "$isAsyncError"));
            _box_1.source = result;
            t1 = result;
          }
        }
      }
    },
    _Future__addListener_closure: {
      "^": "Closure:0;$this,listener,$ti",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this.listener);
      }
    },
    _Future__prependListeners_closure: {
      "^": "Closure:0;_box_0,$this,$ti",
      call$0: function() {
        P._Future__propagateToListeners(this.$this, this._box_0.listeners);
      }
    },
    _Future__chainForeignFuture_closure: {
      "^": "Closure:5;target,$ti",
      call$1: function(value) {
        var t1 = this.target;
        t1._clearPendingComplete$0();
        t1._complete$1(value);
      }
    },
    _Future__chainForeignFuture_closure0: {
      "^": "Closure:14;target,$ti",
      call$2: function(error, stackTrace) {
        this.target._completeError$2(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      },
      call$1: function(error) {
        return this.call$2(error, null);
      }
    },
    _Future__chainForeignFuture_closure1: {
      "^": "Closure:0;target,e,s,$ti",
      call$0: function() {
        this.target._completeError$2(this.e, this.s);
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: {
      "^": "Closure:1;_box_1,_box_0,listener,hasError,$ti",
      call$0: function() {
        var completeResult, e, s, exception, t1, t2, originalSource;
        completeResult = null;
        try {
          completeResult = this.listener.handleWhenComplete$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          if (this.hasError) {
            t1 = J.get$error$z(this._box_1.source.get$_error());
            t2 = e;
            t2 = t1 == null ? t2 == null : t1 === t2;
            t1 = t2;
          } else
            t1 = false;
          t2 = this._box_0;
          if (t1)
            t2.listenerValueOrError = this._box_1.source.get$_error();
          else
            t2.listenerValueOrError = P.AsyncError$(e, s);
          t2.listenerHasError = true;
          return;
        }
        if (!!J.getInterceptor$(completeResult).$isFuture) {
          if (completeResult instanceof P._Future && completeResult.get$_isComplete()) {
            if (completeResult.get$_hasError()) {
              t1 = this._box_0;
              t1.listenerValueOrError = completeResult.get$_error();
              t1.listenerHasError = true;
            }
            return;
          }
          originalSource = this._box_1.source;
          t1 = this._box_0;
          t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
          t1.listenerHasError = false;
        }
      }
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
      "^": "Closure:15;originalSource,$ti",
      call$1: function(_) {
        return this.originalSource;
      }
    },
    _Future__propagateToListeners_handleValueCallback: {
      "^": "Closure:1;_box_0,listener,sourceResult,$ti",
      call$0: function() {
        var e, s, exception, t1;
        try {
          this._box_0.listenerValueOrError = this.listener.handleValue$1(this.sourceResult);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = this._box_0;
          t1.listenerValueOrError = P.AsyncError$(e, s);
          t1.listenerHasError = true;
        }
      }
    },
    _Future__propagateToListeners_handleError: {
      "^": "Closure:1;_box_1,_box_0,listener,$ti",
      call$0: function() {
        var asyncError, e, s, t1, t2, exception, t3, t4;
        try {
          asyncError = this._box_1.source.get$_error();
          t1 = this.listener;
          if (t1.matchesErrorTest$1(asyncError) && t1.get$hasErrorCallback()) {
            t2 = this._box_0;
            t2.listenerValueOrError = t1.handleError$1(asyncError);
            t2.listenerHasError = false;
          }
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          t1 = this._box_1;
          t2 = J.get$error$z(t1.source.get$_error());
          t3 = e;
          t4 = this._box_0;
          if (t2 == null ? t3 == null : t2 === t3)
            t4.listenerValueOrError = t1.source.get$_error();
          else
            t4.listenerValueOrError = P.AsyncError$(e, s);
          t4.listenerHasError = true;
        }
      }
    },
    _AsyncCallbackEntry: {
      "^": "Object;callback,0next<,$ti",
      set$next: function(next) {
        this.next = H.interceptedTypeCheck(next, "$is_AsyncCallbackEntry");
      },
      static: {
        _AsyncCallbackEntry$: function(callback) {
          return new P._AsyncCallbackEntry(callback, []);
        }
      }
    },
    _AsyncRun: {
      "^": "Object;$ti"
    },
    Stream: {
      "^": "Object;$ti",
      get$length: function(_) {
        var t1, future;
        t1 = {};
        future = P._Future$(P.int);
        t1.count = 0;
        this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
        return future;
      }
    },
    Stream_length_closure: {
      "^": "Closure;_box_0,$this,$ti",
      call$1: function(_) {
        var t1;
        H.assertSubtypeOfRuntimeType(_, H.getTypeArgumentByIndex(this.$this, 0));
        t1 = this._box_0;
        t1.count = J.$add$ns(t1.count, 1);
      },
      $signature: function() {
        return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
      }
    },
    Stream_length_closure0: {
      "^": "Closure:0;_box_0,future,$ti",
      call$0: function() {
        this.future._complete$1(this._box_0.count);
      }
    },
    StreamSubscription: {
      "^": "Object;$ti"
    },
    EventSink: {
      "^": "Object;$ti",
      $isSink: 1
    },
    StreamView: {
      "^": "Stream;$ti"
    },
    StreamConsumer: {
      "^": "Object;$ti"
    },
    StreamSink: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isSink: 1
    },
    StreamTransformer: {
      "^": "Object;$ti"
    },
    StreamTransformerBase: {
      "^": "Object;$ti",
      $isStreamTransformer: 1
    },
    StreamIterator: {
      "^": "Object;$ti"
    },
    _ControllerEventSinkWrapper: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isSink: 1
    },
    StreamController: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isSink: 1
    },
    SynchronousStreamController: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isStreamController: 1,
      $isSink: 1
    },
    _StreamControllerLifecycle: {
      "^": "Object;$ti"
    },
    _StreamController: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isStreamController: 1,
      $is_StreamControllerLifecycle: 1,
      $is_EventSink: 1,
      $is_EventDispatch: 1,
      $isSink: 1
    },
    _SyncStreamControllerDispatch: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isStreamController: 1,
      $isSynchronousStreamController: 1,
      $is_StreamControllerLifecycle: 1,
      $is_StreamController: 1,
      $is_EventSink: 1,
      $is_EventDispatch: 1,
      $isSink: 1
    },
    _AsyncStreamControllerDispatch: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isStreamController: 1,
      $is_StreamControllerLifecycle: 1,
      $is_StreamController: 1,
      $is_EventSink: 1,
      $is_EventDispatch: 1,
      $isSink: 1
    },
    _AsyncStreamController: {
      "^": "_StreamController;$ti",
      $is_AsyncStreamControllerDispatch: 1
    },
    _SyncStreamController: {
      "^": "_StreamController;$ti",
      $isSynchronousStreamController: 1,
      $is_SyncStreamControllerDispatch: 1
    },
    _ControllerStream: {
      "^": "_StreamImpl;$ti"
    },
    _ControllerSubscription: {
      "^": "_BufferingStreamSubscription;$ti"
    },
    _StreamSinkWrapper: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isSink: 1
    },
    _AddStreamState: {
      "^": "Object;$ti"
    },
    _StreamControllerAddStreamState: {
      "^": "_AddStreamState;$ti"
    },
    _EventSink: {
      "^": "Object;$ti"
    },
    _EventDispatch: {
      "^": "Object;$ti"
    },
    _BufferingStreamSubscription: {
      "^": "Object;$ti",
      $isStreamSubscription: 1,
      $is_EventSink: 1,
      $is_EventDispatch: 1
    },
    _StreamImpl: {
      "^": "Stream;$ti"
    },
    _GeneratedStreamImpl: {
      "^": "_StreamImpl;$ti"
    },
    _IterablePendingEvents: {
      "^": "_PendingEvents;$ti"
    },
    _DelayedEvent: {
      "^": "Object;$ti"
    },
    _DelayedData: {
      "^": "_DelayedEvent;$ti"
    },
    _DelayedError: {
      "^": "_DelayedEvent;$ti",
      $as_DelayedEvent: Isolate.functionThatReturnsNull
    },
    _DelayedDone: {
      "^": "Object;$ti",
      $is_DelayedEvent: 1,
      $as_DelayedEvent: Isolate.functionThatReturnsNull
    },
    _PendingEvents: {
      "^": "Object;$ti"
    },
    _StreamImplEvents: {
      "^": "_PendingEvents;$ti"
    },
    _DoneStreamSubscription: {
      "^": "Object;$ti",
      $isStreamSubscription: 1
    },
    _AsBroadcastStream: {
      "^": "Stream;$ti"
    },
    _BroadcastSubscriptionWrapper: {
      "^": "Object;$ti",
      $isStreamSubscription: 1
    },
    _StreamIterator: {
      "^": "Object;0_subscription,_stateData,_isPaused,$ti",
      get$current: function() {
        if (this._subscription != null && this._isPaused)
          return H.assertSubtypeOfRuntimeType(this._stateData, H.getTypeArgumentByIndex(this, 0));
        return;
      },
      moveNext$0: function() {
        if (this._subscription != null) {
          if (this._isPaused) {
            var future = P._Future$(P.bool);
            this._stateData = future;
            this._isPaused = false;
            this._subscription.resume$0();
            return future;
          }
          throw H.wrapException(P.StateError$("Already waiting for next."));
        }
        return this._initializeOrDone$0();
      },
      _initializeOrDone$0: function() {
        var stateData, future;
        stateData = this._stateData;
        if (stateData != null) {
          this._subscription = H.interceptedTypeCheck(H.assertSubtype(stateData, "$isStream", this.$ti, "$asStream").listen$4$cancelOnError$onDone$onError(this.get$_async$_onData(), true, this.get$_onDone(), this.get$_onError()), "$isStreamSubscription");
          future = P._Future$(P.bool);
          this._stateData = future;
          return future;
        }
        return $.$get$Future__falseFuture();
      },
      _async$_onData$1: [function(data) {
        var moveNextFuture, t1;
        H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0));
        moveNextFuture = H.assertSubtype(this._stateData, "$is_Future", [P.bool], "$as_Future");
        this._stateData = data;
        this._isPaused = true;
        moveNextFuture._complete$1(true);
        t1 = this._subscription;
        if (t1 != null && this._isPaused)
          t1.pause$0();
      }, "call$1", "get$_async$_onData", 4, 0, 16],
      _onError$2: [function(error, stackTrace) {
        var moveNextFuture;
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        moveNextFuture = H.assertSubtype(this._stateData, "$is_Future", [P.bool], "$as_Future");
        this._subscription = null;
        this._stateData = null;
        moveNextFuture._completeError$2(error, stackTrace);
      }, function(error) {
        return this._onError$2(error, null);
      }, "_onError$1", "call$2", "call$1", "get$_onError", 4, 2, 2],
      _onDone$0: [function() {
        var moveNextFuture = H.assertSubtype(this._stateData, "$is_Future", [P.bool], "$as_Future");
        this._subscription = null;
        this._stateData = null;
        moveNextFuture._complete$1(false);
      }, "call$0", "get$_onDone", 0, 0, 1],
      $isStreamIterator: 1,
      static: {
        _StreamIterator$: function(stream, $T) {
          return new P._StreamIterator(stream, false, [$T]);
        }
      }
    },
    _EmptyStream: {
      "^": "Stream;$ti"
    },
    _ForwardingStream: {
      "^": "Stream;$ti",
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _ForwardingStreamSubscription: {
      "^": "_BufferingStreamSubscription;$ti",
      $asStreamSubscription: function($S, $T) {
        return [$T];
      },
      $as_EventSink: function($S, $T) {
        return [$T];
      },
      $as_EventDispatch: function($S, $T) {
        return [$T];
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      }
    },
    _WhereStream: {
      "^": "_ForwardingStream;$ti",
      $asStream: null,
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      }
    },
    _MapStream: {
      "^": "_ForwardingStream;$ti"
    },
    _ExpandStream: {
      "^": "_ForwardingStream;$ti"
    },
    _HandleErrorStream: {
      "^": "_ForwardingStream;$ti",
      $asStream: null,
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      }
    },
    _TakeStream: {
      "^": "_ForwardingStream;$ti",
      $asStream: null,
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      }
    },
    _StateStreamSubscription: {
      "^": "_ForwardingStreamSubscription;$ti",
      $asStreamSubscription: null,
      $as_EventSink: null,
      $as_EventDispatch: null,
      $as_BufferingStreamSubscription: null,
      $as_ForwardingStreamSubscription: function($T) {
        return [$T, $T];
      }
    },
    _TakeWhileStream: {
      "^": "_ForwardingStream;$ti",
      $asStream: null,
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      }
    },
    _SkipStream: {
      "^": "_ForwardingStream;$ti",
      $asStream: null,
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      }
    },
    _SkipWhileStream: {
      "^": "_ForwardingStream;$ti",
      $asStream: null,
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      }
    },
    _DistinctStream: {
      "^": "_ForwardingStream;$ti",
      $asStream: null,
      $as_ForwardingStream: function($T) {
        return [$T, $T];
      }
    },
    _EventSinkWrapper: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isSink: 1
    },
    _SinkTransformerStreamSubscription: {
      "^": "_BufferingStreamSubscription;$ti",
      $asStreamSubscription: function($S, $T) {
        return [$T];
      },
      $as_EventSink: function($S, $T) {
        return [$T];
      },
      $as_EventDispatch: function($S, $T) {
        return [$T];
      },
      $as_BufferingStreamSubscription: function($S, $T) {
        return [$T];
      }
    },
    _StreamSinkTransformer: {
      "^": "StreamTransformerBase;$ti"
    },
    _BoundSinkStream: {
      "^": "Stream;$ti",
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    _HandlerEventSink: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $asEventSink: function($S, $T) {
        return [$S];
      },
      $isSink: 1,
      $asSink: function($S, $T) {
        return [$S];
      }
    },
    _StreamHandlerTransformer: {
      "^": "_StreamSinkTransformer;$ti"
    },
    _StreamBindTransformer: {
      "^": "StreamTransformerBase;$ti"
    },
    _StreamSubscriptionTransformer: {
      "^": "StreamTransformerBase;$ti"
    },
    _BoundSubscriptionStream: {
      "^": "Stream;$ti",
      $asStream: function($S, $T) {
        return [$T];
      }
    },
    Timer: {
      "^": "Object;$ti"
    },
    AsyncError: {
      "^": "Object;error>,stackTrace,$ti",
      toString$0: function(_) {
        return H.S(this.error);
      },
      $isError: 1,
      static: {
        AsyncError$: function(error, stackTrace) {
          return new P.AsyncError(error, stackTrace, []);
        }
      }
    },
    _ZoneFunction: {
      "^": "Object;zone,$function,$ti"
    },
    ZoneSpecification: {
      "^": "Object;$ti"
    },
    _ZoneSpecification: {
      "^": "Object;$ti",
      $isZoneSpecification: 1
    },
    ZoneDelegate: {
      "^": "Object;$ti"
    },
    Zone: {
      "^": "Object;$ti"
    },
    _ZoneDelegate: {
      "^": "Object;$ti",
      $isZoneDelegate: 1
    },
    _Zone: {
      "^": "Object;$ti",
      inSameErrorZone$1: function(otherZone) {
        var t1, t2;
        H.interceptedTypeCheck(otherZone, "$isZone");
        if (this !== otherZone) {
          t1 = this.get$errorZone();
          t2 = otherZone.get$errorZone();
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = true;
        return t1;
      },
      $isZone: 1
    },
    _CustomZone: {
      "^": "_Zone;$ti"
    },
    _rootHandleUncaughtError_closure: {
      "^": "Closure:0;_box_0,stackTrace,$ti",
      call$0: function() {
        var t1, t2, error;
        t1 = this._box_0;
        t2 = t1.error;
        if (t2 == null) {
          error = P.NullThrownError$();
          t1.error = error;
          t1 = error;
        } else
          t1 = t2;
        t2 = this.stackTrace;
        if (t2 == null)
          throw H.wrapException(t1);
        P._rethrow(t1, t2);
      }
    },
    _RootZone: {
      "^": "_Zone;$ti",
      get$_scheduleMicrotask: function() {
        return C._ZoneFunction__RootZone__rootScheduleMicrotask;
      },
      get$errorZone: function() {
        return this;
      },
      runGuarded$1: function(f) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1});
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$0();
            return;
          }
          P._rootRun(null, null, this, f, -1);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
        }
      },
      runUnaryGuarded$1$2: function(f, arg, $T) {
        var e, s, exception;
        H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        try {
          if (C.C__RootZone === $.Zone__current) {
            f.call$1(arg);
            return;
          }
          P._rootRunUnary(null, null, this, f, arg, -1, $T);
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          this.handleUncaughtError$2(e, s);
        }
      },
      bindCallback$1$1: function(f, $R) {
        return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
      },
      bindCallbackGuarded$1: function(f) {
        return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
      },
      bindUnaryCallbackGuarded$1$1: function(f, $T) {
        return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
      },
      $index: function(_, key) {
        return;
      },
      handleUncaughtError$2: function(error, stackTrace) {
        P._rootHandleUncaughtError(null, null, this, error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
      },
      run$1$1: function(f, $R) {
        H.functionTypeCheck(f, {func: 1, ret: $R});
        if ($.Zone__current === C.C__RootZone)
          return f.call$0();
        return P._rootRun(null, null, this, f, $R);
      },
      runUnary$2$2: function(f, arg, $R, $T) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
        H.assertSubtypeOfRuntimeType(arg, $T);
        if ($.Zone__current === C.C__RootZone)
          return f.call$1(arg);
        return P._rootRunUnary(null, null, this, f, arg, $R, $T);
      },
      runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
        H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
        H.assertSubtypeOfRuntimeType(arg1, T1);
        H.assertSubtypeOfRuntimeType(arg2, T2);
        if ($.Zone__current === C.C__RootZone)
          return f.call$2(arg1, arg2);
        return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
      },
      registerCallback$1$1: function(f, $R) {
        return H.functionTypeCheck(f, {func: 1, ret: $R});
      },
      registerUnaryCallback$2$1: function(f, $R, $T) {
        return H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      },
      registerBinaryCallback$3$1: function(f, $R, T1, T2) {
        return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      },
      errorCallback$2: function(error, stackTrace) {
        H.interceptedTypeCheck(stackTrace, "$isStackTrace");
        return;
      },
      scheduleMicrotask$1: function(f) {
        P._rootScheduleMicrotask(null, null, this, H.functionTypeCheck(f, {func: 1, ret: -1}));
      }
    },
    _RootZone_bindCallback_closure: {
      "^": "Closure;$this,f,R,$ti",
      call$0: function() {
        return this.$this.run$1$1(this.f, this.R);
      },
      $signature: function() {
        return {func: 1, ret: this.R};
      }
    },
    _RootZone_bindCallbackGuarded_closure: {
      "^": "Closure:1;$this,f,$ti",
      call$0: function() {
        return this.$this.runGuarded$1(this.f);
      }
    },
    _RootZone_bindUnaryCallbackGuarded_closure: {
      "^": "Closure;$this,f,T,$ti",
      call$1: function(arg) {
        var t1 = this.T;
        return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
      },
      $signature: function() {
        return {func: 1, ret: -1, args: [this.T]};
      }
    }
  }], ["dart.collection", "dart:collection",, P, {
    "^": "",
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      H.listSuperNativeTypeCheck(iterable, "$isIterable");
      H.stringTypeCheck(leftDelimiter);
      H.stringTypeCheck(rightDelimiter);
      if (P._isToStringVisiting(iterable))
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
      buffer = P.StringBuffer$(leftDelimiter);
      t1 = $.$get$_toStringVisiting();
      J.add$1$a(t1, iterable);
      try {
        buffer.writeAll$2(iterable, ", ");
      } finally {
        C.JSArray_methods.removeLast$0(t1);
      }
      buffer.write$1(rightDelimiter);
      return J.toString$0$(buffer);
    },
    _isToStringVisiting: function(o) {
      var i, t1, t2;
      i = 0;
      while (true) {
        t1 = $.$get$_toStringVisiting();
        t2 = J.get$length$as(t1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1 = J.$index$as(t1, i);
        if (o == null ? t1 == null : o === t1)
          return true;
        ++i;
      }
      return false;
    },
    ListBase_listToString: function(list) {
      return P.IterableBase_iterableToFullString(H.listTypeCheck(list), "[", "]");
    },
    _HashMap: {
      "^": "MapBase;$ti",
      $isHashMap: 1
    },
    _IdentityHashMap: {
      "^": "_HashMap;$ti"
    },
    _CustomHashMap: {
      "^": "_HashMap;$ti"
    },
    _HashMapKeyIterable: {
      "^": "EfficientLengthIterable;$ti"
    },
    _HashMapKeyIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    _LinkedIdentityHashMap: {
      "^": "JsLinkedHashMap;$ti"
    },
    _Es6LinkedIdentityHashMap: {
      "^": "_LinkedIdentityHashMap;$ti"
    },
    _Es6MapIterable: {
      "^": "EfficientLengthIterable;$ti"
    },
    _Es6MapIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    _LinkedCustomHashMap: {
      "^": "JsLinkedHashMap;$ti"
    },
    _HashSet: {
      "^": "_HashSetBase;$ti",
      $isHashSet: 1
    },
    _IdentityHashSet: {
      "^": "_HashSet;$ti"
    },
    _CustomHashSet: {
      "^": "_HashSet;$ti"
    },
    _HashSetIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    _LinkedHashSet: {
      "^": "_HashSetBase;$ti",
      $isLinkedHashSet: 1
    },
    _LinkedIdentityHashSet: {
      "^": "_LinkedHashSet;$ti"
    },
    _LinkedCustomHashSet: {
      "^": "_LinkedHashSet;$ti"
    },
    _LinkedHashSetCell: {
      "^": "Object;$ti"
    },
    _LinkedHashSetIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    UnmodifiableListView: {
      "^": "UnmodifiableListBase;$ti"
    },
    HashMap: {
      "^": "Object;$ti",
      $isMap: 1
    },
    _HashSetBase: {
      "^": "SetBase;$ti"
    },
    HashSet: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isSet: 1
    },
    IterableMixin: {
      "^": "Object;$ti",
      $isIterable: 1
    },
    IterableBase: {
      "^": "Iterable;$ti"
    },
    HasNextIterator: {
      "^": "Object;$ti"
    },
    LinkedHashMap: {
      "^": "Object;$ti",
      $isMap: 1
    },
    LinkedHashSet: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isSet: 1
    },
    LinkedList0: {
      "^": "Iterable;$ti"
    },
    _LinkedListIterator0: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    LinkedListEntry: {
      "^": "Object;$ti"
    },
    ListBase: {
      "^": "_ListBase_Object_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $isListMixin: 1,
      $isIterable: 1,
      $isList: 1
    },
    ListMixin: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    MapBase: {
      "^": "MapMixin;$ti"
    },
    MapMixin: {
      "^": "Object;$ti",
      $isMap: 1
    },
    UnmodifiableMapBase: {
      "^": "MapBase;$ti",
      $is_UnmodifiableMapMixin: 1
    },
    _MapBaseValueIterable: {
      "^": "EfficientLengthIterable;$ti",
      $asEfficientLengthIterable: function($K, $V) {
        return [$V];
      },
      $asIterable: function($K, $V) {
        return [$V];
      }
    },
    _MapBaseValueIterator: {
      "^": "Object;$ti",
      $isIterator: 1,
      $asIterator: function($K, $V) {
        return [$V];
      }
    },
    _UnmodifiableMapMixin: {
      "^": "Object;$ti",
      $isMap: 1
    },
    MapView: {
      "^": "Object;$ti",
      $isMap: 1
    },
    UnmodifiableMapView: {
      "^": "_UnmodifiableMapView_MapView__UnmodifiableMapMixin;$ti",
      $is_UnmodifiableMapMixin: 1
    },
    Queue: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1
    },
    _DoubleLink: {
      "^": "Object;$ti"
    },
    DoubleLinkedQueueEntry: {
      "^": "_DoubleLink;$ti",
      $as_DoubleLink: function($E) {
        return [[P.DoubleLinkedQueueEntry, $E]];
      }
    },
    _DoubleLinkedQueueEntry: {
      "^": "DoubleLinkedQueueEntry;$ti"
    },
    _DoubleLinkedQueueElement: {
      "^": "_DoubleLinkedQueueEntry;$ti"
    },
    _DoubleLinkedQueueSentinel: {
      "^": "_DoubleLinkedQueueEntry;$ti"
    },
    DoubleLinkedQueue: {
      "^": "Iterable;$ti",
      $isEfficientLengthIterable: 1,
      $isQueue: 1
    },
    _DoubleLinkedQueueIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    ListQueue: {
      "^": "ListIterable;$ti",
      $isQueue: 1
    },
    _ListQueueIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    SetMixin: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isSet: 1
    },
    SetBase: {
      "^": "SetMixin;$ti"
    },
    _SplayTreeNode: {
      "^": "Object;$ti"
    },
    _SplayTreeMapNode: {
      "^": "_SplayTreeNode;$ti",
      $as_SplayTreeNode: function($K, $V) {
        return [$K];
      }
    },
    _SplayTree: {
      "^": "Object;$ti"
    },
    _TypeTest: {
      "^": "Object;$ti"
    },
    SplayTreeMap: {
      "^": "_SplayTreeMap__SplayTree_MapMixin;$ti",
      $isMapMixin: 1,
      $as_SplayTree: function($K, $V) {
        return [$K, [P._SplayTreeMapNode, $K, $V]];
      },
      $isMap: 1
    },
    _SplayTreeIterator: {
      "^": "Object;$ti",
      $isIterator: 1,
      $asIterator: function($K, $T) {
        return [$T];
      }
    },
    _SplayTreeKeyIterable: {
      "^": "EfficientLengthIterable;$ti"
    },
    _SplayTreeValueIterable: {
      "^": "EfficientLengthIterable;$ti",
      $asEfficientLengthIterable: function($K, $V) {
        return [$V];
      },
      $asIterable: function($K, $V) {
        return [$V];
      }
    },
    _SplayTreeKeyIterator: {
      "^": "_SplayTreeIterator;$ti",
      $as_SplayTreeIterator: function($K) {
        return [$K, $K];
      },
      $asIterator: null
    },
    _SplayTreeValueIterator: {
      "^": "_SplayTreeIterator;$ti"
    },
    _SplayTreeNodeIterator: {
      "^": "_SplayTreeIterator;$ti",
      $as_SplayTreeIterator: function($K) {
        return [$K, [P._SplayTreeNode, $K]];
      },
      $asIterator: function($K) {
        return [[P._SplayTreeNode, $K]];
      }
    },
    SplayTreeSet: {
      "^": "_SplayTreeSet__SplayTree_IterableMixin_SetMixin;$ti",
      $isEfficientLengthIterable: 1,
      $isIterableMixin: 1,
      $isSetMixin: 1,
      $as_SplayTree: function($E) {
        return [$E, [P._SplayTreeNode, $E]];
      },
      $isIterable: 1,
      $isSet: 1
    },
    _ListBase_Object_ListMixin: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isListMixin: 1,
      $isIterable: 1,
      $isList: 1
    },
    _SplayTreeMap__SplayTree_MapMixin: {
      "^": "_SplayTree;$ti",
      $isMapMixin: 1,
      $as_SplayTree: function($K, $V) {
        return [$K, [P._SplayTreeMapNode, $K, $V]];
      },
      $isMap: 1
    },
    _SplayTreeSet__SplayTree_IterableMixin: {
      "^": "_SplayTree;$ti",
      $isIterableMixin: 1,
      $as_SplayTree: function($E) {
        return [$E, [P._SplayTreeNode, $E]];
      },
      $isIterable: 1
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: {
      "^": "_SplayTreeSet__SplayTree_IterableMixin;$ti",
      $isEfficientLengthIterable: 1,
      $isIterableMixin: 1,
      $isSetMixin: 1,
      $as_SplayTree: function($E) {
        return [$E, [P._SplayTreeNode, $E]];
      },
      $isIterable: 1,
      $isSet: 1
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: {
      "^": "MapView;$ti",
      $is_UnmodifiableMapMixin: 1
    }
  }], ["dart.convert", "dart:convert",, P, {
    "^": "",
    _JsonMap: {
      "^": "MapBase;$ti",
      $asMapBase: function() {
        return [P.String, null];
      },
      $asMapMixin: function() {
        return [P.String, null];
      },
      $asMap: function() {
        return [P.String, null];
      }
    },
    _JsonMapKeyIterable: {
      "^": "ListIterable;$ti",
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $asListIterable: function() {
        return [P.String];
      },
      $asIterable: function() {
        return [P.String];
      }
    },
    _JsonDecoderSink: {
      "^": "_StringSinkConversionSink;$ti"
    },
    AsciiCodec: {
      "^": "Encoding;$ti"
    },
    _UnicodeSubsetEncoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [P.String, [P.List, P.int]];
      },
      $asStreamTransformerBase: function() {
        return [P.String, [P.List, P.int]];
      },
      $asConverter: function() {
        return [P.String, [P.List, P.int]];
      }
    },
    AsciiEncoder: {
      "^": "_UnicodeSubsetEncoder;$ti"
    },
    _UnicodeSubsetEncoderSink: {
      "^": "StringConversionSinkBase;$ti"
    },
    _UnicodeSubsetDecoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [[P.List, P.int], P.String];
      },
      $asStreamTransformerBase: function() {
        return [[P.List, P.int], P.String];
      },
      $asConverter: function() {
        return [[P.List, P.int], P.String];
      }
    },
    AsciiDecoder: {
      "^": "_UnicodeSubsetDecoder;$ti"
    },
    _ErrorHandlingAsciiDecoderSink: {
      "^": "ByteConversionSinkBase;$ti"
    },
    _SimpleAsciiDecoderSink: {
      "^": "ByteConversionSinkBase;$ti"
    },
    Base64Codec: {
      "^": "Codec;$ti",
      $asCodec: function() {
        return [[P.List, P.int], P.String];
      }
    },
    Base64Encoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [[P.List, P.int], P.String];
      },
      $asStreamTransformerBase: function() {
        return [[P.List, P.int], P.String];
      },
      $asConverter: function() {
        return [[P.List, P.int], P.String];
      }
    },
    _Base64Encoder: {
      "^": "Object;$ti"
    },
    _BufferCachingBase64Encoder: {
      "^": "_Base64Encoder;$ti"
    },
    _Base64EncoderSink: {
      "^": "ByteConversionSinkBase;$ti"
    },
    _AsciiBase64EncoderSink: {
      "^": "_Base64EncoderSink;$ti"
    },
    _Utf8Base64EncoderSink: {
      "^": "_Base64EncoderSink;$ti"
    },
    Base64Decoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [P.String, [P.List, P.int]];
      },
      $asStreamTransformerBase: function() {
        return [P.String, [P.List, P.int]];
      },
      $asConverter: function() {
        return [P.String, [P.List, P.int]];
      }
    },
    _Base64Decoder: {
      "^": "Object;$ti"
    },
    _Base64DecoderSink: {
      "^": "StringConversionSinkBase;$ti"
    },
    ByteConversionSink: {
      "^": "ChunkedConversionSink;$ti",
      $asChunkedConversionSink: function() {
        return [[P.List, P.int]];
      },
      $asSink: function() {
        return [[P.List, P.int]];
      }
    },
    ByteConversionSinkBase: {
      "^": "ByteConversionSink;$ti"
    },
    _ByteAdapterSink: {
      "^": "ByteConversionSinkBase;$ti"
    },
    _ByteCallbackSink: {
      "^": "ByteConversionSinkBase;$ti"
    },
    ChunkedConversionSink: {
      "^": "Object;$ti",
      $isSink: 1
    },
    _SimpleCallbackSink: {
      "^": "ChunkedConversionSink;$ti"
    },
    _ConverterStreamEventSink: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $asEventSink: function($S, $T) {
        return [$S];
      },
      $isSink: 1,
      $asSink: function($S, $T) {
        return [$S];
      }
    },
    Codec: {
      "^": "Object;$ti"
    },
    _FusedCodec: {
      "^": "Codec;$ti",
      $asCodec: function($S, $M, $T) {
        return [$S, $T];
      }
    },
    _InvertedCodec: {
      "^": "Codec;$ti"
    },
    Converter: {
      "^": "StreamTransformerBase;$ti"
    },
    _FusedConverter: {
      "^": "Converter;$ti",
      $asStreamTransformer: function($S, $M, $T) {
        return [$S, $T];
      },
      $asStreamTransformerBase: function($S, $M, $T) {
        return [$S, $T];
      },
      $asConverter: function($S, $M, $T) {
        return [$S, $T];
      }
    },
    Encoding: {
      "^": "Codec;$ti",
      $asCodec: function() {
        return [P.String, [P.List, P.int]];
      }
    },
    HtmlEscapeMode: {
      "^": "Object;$ti"
    },
    HtmlEscape: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [P.String, P.String];
      },
      $asStreamTransformerBase: function() {
        return [P.String, P.String];
      },
      $asConverter: function() {
        return [P.String, P.String];
      }
    },
    _HtmlEscapeSink: {
      "^": "StringConversionSinkBase;$ti"
    },
    JsonUnsupportedObjectError: {
      "^": "Error;$ti"
    },
    JsonCyclicError: {
      "^": "JsonUnsupportedObjectError;$ti"
    },
    JsonCodec: {
      "^": "Codec;$ti",
      $asCodec: function() {
        return [P.Object, P.String];
      }
    },
    JsonEncoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [P.Object, P.String];
      },
      $asStreamTransformerBase: function() {
        return [P.Object, P.String];
      },
      $asConverter: function() {
        return [P.Object, P.String];
      }
    },
    JsonUtf8Encoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [P.Object, [P.List, P.int]];
      },
      $asStreamTransformerBase: function() {
        return [P.Object, [P.List, P.int]];
      },
      $asConverter: function() {
        return [P.Object, [P.List, P.int]];
      }
    },
    _JsonEncoderSink: {
      "^": "ChunkedConversionSink;$ti",
      $asChunkedConversionSink: function() {
        return [P.Object];
      },
      $asSink: function() {
        return [P.Object];
      }
    },
    _JsonUtf8EncoderSink: {
      "^": "ChunkedConversionSink;$ti",
      $asChunkedConversionSink: function() {
        return [P.Object];
      },
      $asSink: function() {
        return [P.Object];
      }
    },
    JsonDecoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [P.String, P.Object];
      },
      $asStreamTransformerBase: function() {
        return [P.String, P.Object];
      },
      $asConverter: function() {
        return [P.String, P.Object];
      }
    },
    _JsonStringifier: {
      "^": "Object;$ti"
    },
    _JsonPrettyPrintMixin: {
      "^": "Object;$ti",
      $is_JsonStringifier: 1
    },
    _JsonStringStringifier: {
      "^": "_JsonStringifier;$ti"
    },
    _JsonStringStringifierPretty: {
      "^": "__JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin;$ti",
      $is_JsonPrettyPrintMixin: 1
    },
    _JsonUtf8Stringifier: {
      "^": "_JsonStringifier;$ti"
    },
    _JsonUtf8StringifierPretty: {
      "^": "__JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin;$ti",
      $is_JsonPrettyPrintMixin: 1
    },
    Latin1Codec: {
      "^": "Encoding;$ti"
    },
    Latin1Encoder: {
      "^": "_UnicodeSubsetEncoder;$ti"
    },
    Latin1Decoder: {
      "^": "_UnicodeSubsetDecoder;$ti"
    },
    _Latin1DecoderSink: {
      "^": "ByteConversionSinkBase;$ti"
    },
    _Latin1AllowInvalidDecoderSink: {
      "^": "_Latin1DecoderSink;$ti"
    },
    LineSplitter: {
      "^": "StreamTransformerBase;$ti",
      $asStreamTransformer: function() {
        return [P.String, P.String];
      },
      $asStreamTransformerBase: function() {
        return [P.String, P.String];
      }
    },
    _LineSplitterSink: {
      "^": "StringConversionSinkBase;$ti"
    },
    _LineSplitterEventSink: {
      "^": "_LineSplitterSink;$ti",
      $isEventSink: 1,
      $asEventSink: function() {
        return [P.String];
      }
    },
    StringConversionSink: {
      "^": "ChunkedConversionSink;$ti",
      $asChunkedConversionSink: function() {
        return [P.String];
      },
      $asSink: function() {
        return [P.String];
      }
    },
    ClosableStringSink: {
      "^": "StringSink;$ti"
    },
    _ClosableStringSink: {
      "^": "Object;$ti",
      $isClosableStringSink: 1,
      $isStringSink: 1
    },
    _StringConversionSinkAsStringSinkAdapter: {
      "^": "Object;$ti",
      $isClosableStringSink: 1,
      $isStringSink: 1
    },
    StringConversionSinkBase: {
      "^": "StringConversionSinkMixin;$ti"
    },
    StringConversionSinkMixin: {
      "^": "Object;$ti",
      $isChunkedConversionSink: 1,
      $asChunkedConversionSink: function() {
        return [P.String];
      },
      $isStringConversionSink: 1,
      $isSink: 1,
      $asSink: function() {
        return [P.String];
      }
    },
    _StringSinkConversionSink: {
      "^": "StringConversionSinkBase;$ti"
    },
    _StringCallbackSink: {
      "^": "_StringSinkConversionSink;$ti"
    },
    _StringAdapterSink: {
      "^": "StringConversionSinkBase;$ti"
    },
    _Utf8StringSinkAdapter: {
      "^": "ByteConversionSink;$ti"
    },
    _Utf8ConversionSink: {
      "^": "ByteConversionSink;$ti"
    },
    Utf8Codec: {
      "^": "Encoding;$ti"
    },
    Utf8Encoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [P.String, [P.List, P.int]];
      },
      $asStreamTransformerBase: function() {
        return [P.String, [P.List, P.int]];
      },
      $asConverter: function() {
        return [P.String, [P.List, P.int]];
      }
    },
    _Utf8Encoder: {
      "^": "Object;$ti"
    },
    _Utf8EncoderSink: {
      "^": "__Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin;$ti",
      $isChunkedConversionSink: 1,
      $asChunkedConversionSink: function() {
        return [P.String];
      },
      $isStringConversionSink: 1,
      $isStringConversionSinkMixin: 1,
      $isSink: 1,
      $asSink: function() {
        return [P.String];
      }
    },
    Utf8Decoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [[P.List, P.int], P.String];
      },
      $asStreamTransformerBase: function() {
        return [[P.List, P.int], P.String];
      },
      $asConverter: function() {
        return [[P.List, P.int], P.String];
      }
    },
    _Utf8Decoder: {
      "^": "Object;$ti"
    },
    __JsonStringStringifierPretty__JsonStringStringifier__JsonPrettyPrintMixin: {
      "^": "_JsonStringStringifier;$ti",
      $is_JsonPrettyPrintMixin: 1
    },
    __JsonUtf8StringifierPretty__JsonUtf8Stringifier__JsonPrettyPrintMixin: {
      "^": "_JsonUtf8Stringifier;$ti",
      $is_JsonPrettyPrintMixin: 1
    },
    __Utf8EncoderSink__Utf8Encoder_StringConversionSinkMixin: {
      "^": "_Utf8Encoder;$ti",
      $isChunkedConversionSink: 1,
      $asChunkedConversionSink: function() {
        return [P.String];
      },
      $isStringConversionSink: 1,
      $isStringConversionSinkMixin: 1,
      $isSink: 1,
      $asSink: function() {
        return [P.String];
      }
    }
  }], ["dart.core", "dart:core",, P, {
    "^": "",
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return H.Primitives_objectToHumanReadableString(object);
    },
    Error__stringToSafeString: function(string) {
      return H.jsonEncodeNative(H.stringTypeCheck(string));
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return P.Error__stringToSafeString(object);
      return P.Error__objectToString(object);
    },
    Exception_Exception: function(message) {
      return P._Exception$(message);
    },
    print: function(object) {
      var line, t1;
      line = H.S(object);
      t1 = $.printToZone;
      if (t1 == null)
        H.printToConsole(line);
      else
        t1.call$1(line);
    },
    _CompileTimeError: {
      "^": "Error;$ti"
    },
    _DuplicatedFieldInitializerError: {
      "^": "Error;$ti"
    },
    _BigIntImpl: {
      "^": "Object;$ti",
      $isBigInt: 1,
      $isComparable: 1,
      $asComparable: function() {
        return [P.BigInt];
      }
    },
    _BigIntReduction: {
      "^": "Object;$ti"
    },
    _BigIntClassic: {
      "^": "Object;$ti",
      $is_BigIntReduction: 1
    },
    Deprecated: {
      "^": "Object;$ti"
    },
    _Override: {
      "^": "Object;$ti"
    },
    Provisional: {
      "^": "Object;$ti"
    },
    _Proxy0: {
      "^": "Object;$ti"
    },
    pragma: {
      "^": "Object;$ti"
    },
    BigInt: {
      "^": "Object;$ti",
      $isComparable: 1,
      $asComparable: function() {
        return [P.BigInt];
      }
    },
    bool: {
      "^": "Object;$ti"
    },
    "+bool": 0,
    Comparable: {
      "^": "Object;$ti"
    },
    DateTime: {
      "^": "Object;$ti",
      $isComparable: 1,
      $asComparable: function() {
        return [P.DateTime];
      }
    },
    double: {
      "^": "num;$ti"
    },
    "+double": 0,
    Duration: {
      "^": "Object;_duration,$ti",
      $lt: function(_, other) {
        return J.$lt$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
      },
      $gt: function(_, other) {
        return J.$gt$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
      },
      $le: function(_, other) {
        return J.$le$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
      },
      $ge: function(_, other) {
        return J.$ge$n(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
      },
      get$inHours: function() {
        var t1 = this._duration;
        if (typeof t1 !== "number")
          return t1.$tdiv();
        return C.JSNumber_methods._tdivFast$1(t1, 3600000000);
      },
      get$inMinutes: function() {
        var t1 = this._duration;
        if (typeof t1 !== "number")
          return t1.$tdiv();
        return C.JSNumber_methods._tdivFast$1(t1, 60000000);
      },
      get$inSeconds: function() {
        var t1 = this._duration;
        if (typeof t1 !== "number")
          return t1.$tdiv();
        return C.JSNumber_methods._tdivFast$1(t1, 1000000);
      },
      get$inMilliseconds: function() {
        var t1 = this._duration;
        if (typeof t1 !== "number")
          return t1.$tdiv();
        return C.JSNumber_methods._tdivFast$1(t1, 1000);
      },
      get$inMicroseconds: function() {
        return this._duration;
      },
      $eq: function(_, other) {
        if (other == null)
          return false;
        if (!(other instanceof P.Duration))
          return false;
        return J.$eq$(this._duration, other._duration);
      },
      toString$0: function(_) {
        var t1, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
        t1 = new P.Duration_toString_twoDigits();
        if (J.$lt$n(this.get$inMicroseconds(), 0))
          return "-" + H.S(this.$negate(0));
        twoDigitMinutes = t1.call$1(H.intTypeCheck(J.remainder$1$n(this.get$inMinutes(), 60)));
        twoDigitSeconds = t1.call$1(H.intTypeCheck(J.remainder$1$n(this.get$inSeconds(), 60)));
        sixDigitUs = new P.Duration_toString_sixDigits().call$1(H.intTypeCheck(J.remainder$1$n(this.get$inMicroseconds(), 1000000)));
        return H.S(this.get$inHours()) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
      },
      $negate: function(_) {
        var t1 = this._duration;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return P.Duration$_microseconds(0 - t1);
      },
      $isComparable: 1,
      $asComparable: function() {
        return [P.Duration];
      },
      static: {
        Duration$_microseconds: function(_duration) {
          return new P.Duration(_duration, []);
        }
      }
    },
    Duration_toString_sixDigits: {
      "^": "Closure:7;$ti",
      call$1: function(n) {
        H.intTypeCheck(n);
        if (typeof n !== "number")
          return n.$ge();
        if (n >= 100000)
          return "" + n;
        if (n >= 10000)
          return "0" + n;
        if (n >= 1000)
          return "00" + n;
        if (n >= 100)
          return "000" + n;
        if (n >= 10)
          return "0000" + n;
        return "00000" + n;
      }
    },
    Duration_toString_twoDigits: {
      "^": "Closure:7;$ti",
      call$1: function(n) {
        H.intTypeCheck(n);
        if (typeof n !== "number")
          return n.$ge();
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }
    },
    Error: {
      "^": "Object;$ti"
    },
    AssertionError: {
      "^": "Error;$ti"
    },
    TypeError: {
      "^": "AssertionError;$ti"
    },
    CastError: {
      "^": "Error;$ti"
    },
    NullThrownError: {
      "^": "Error;$ti",
      toString$0: function(_) {
        return "Throw of null.";
      },
      static: {
        NullThrownError$: function() {
          return new P.NullThrownError([]);
        }
      }
    },
    ArgumentError: {
      "^": "Error;_hasValue,invalidValue,name,message,$ti",
      get$_errorName: function() {
        return "Invalid argument" + (!this._hasValue ? "(s)" : "");
      },
      get$_errorExplanation: function() {
        return "";
      },
      toString$0: function(_) {
        var t1, nameString, message, prefix, explanation, errorValue;
        t1 = this.name;
        nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
        t1 = this.message;
        message = t1 == null ? "" : ": " + H.S(t1);
        prefix = H.S(this.get$_errorName()) + nameString + message;
        if (!this._hasValue)
          return prefix;
        explanation = this.get$_errorExplanation();
        errorValue = P.Error_safeToString(this.invalidValue);
        return prefix + H.S(explanation) + ": " + H.S(errorValue);
      },
      static: {
        ArgumentError$: function(message) {
          return new P.ArgumentError(false, null, null, message, []);
        },
        ArgumentError$value: function(value, $name, message) {
          return new P.ArgumentError(true, value, $name, message, []);
        }
      }
    },
    RangeError: {
      "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message,$ti",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        var t1, explanation, t2, t3;
        t1 = this.start;
        if (t1 == null) {
          t1 = this.end;
          explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
        } else {
          t2 = this.end;
          if (t2 == null)
            explanation = ": Not greater than or equal to " + H.S(t1);
          else {
            t3 = J.getInterceptor$n(t2);
            if (t3.$gt(t2, t1))
              explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
            else
              explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
          }
        }
        return explanation;
      },
      static: {
        RangeError$value: function(value, $name, message) {
          var t1 = message != null ? message : "Value not in range";
          return new P.RangeError(null, null, true, value, $name, t1, []);
        }
      }
    },
    IndexError: {
      "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message,$ti",
      get$_errorName: function() {
        return "RangeError";
      },
      get$_errorExplanation: function() {
        if (H.boolTypeCheck(J.$lt$n(this.invalidValue, 0)))
          return ": index must not be negative";
        var t1 = this.length;
        if (J.$eq$(t1, 0))
          return ": no indices are valid";
        return ": index should be less than " + H.S(t1);
      },
      $isRangeError: 1,
      static: {
        IndexError$: function(invalidValue, indexable, $name, message, $length) {
          var t1, t2;
          t1 = H.intTypeCheck($length != null ? $length : J.get$length$as(indexable));
          t2 = message != null ? message : "Index out of range";
          return new P.IndexError(indexable, t1, true, invalidValue, $name, t2, []);
        }
      }
    },
    FallThroughError: {
      "^": "Error;$ti"
    },
    AbstractClassInstantiationError: {
      "^": "Error;$ti"
    },
    NoSuchMethodError: {
      "^": "Error;$ti"
    },
    UnsupportedError: {
      "^": "Error;message,$ti",
      toString$0: function(_) {
        return "Unsupported operation: " + H.S(this.message);
      },
      static: {
        UnsupportedError$: function(message) {
          return new P.UnsupportedError(message, []);
        }
      }
    },
    UnimplementedError: {
      "^": "Error;message,$ti",
      toString$0: function(_) {
        var t1 = this.message;
        return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
      },
      $isUnsupportedError: 1,
      static: {
        UnimplementedError$: function(message) {
          return new P.UnimplementedError(message, []);
        }
      }
    },
    StateError: {
      "^": "Error;message,$ti",
      toString$0: function(_) {
        return "Bad state: " + H.S(this.message);
      },
      static: {
        StateError$: function(message) {
          return new P.StateError(message, []);
        }
      }
    },
    ConcurrentModificationError: {
      "^": "Error;modifiedObject,$ti",
      toString$0: function(_) {
        var t1 = this.modifiedObject;
        if (t1 == null)
          return "Concurrent modification during iteration.";
        return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
      },
      static: {
        ConcurrentModificationError$: function(modifiedObject) {
          return new P.ConcurrentModificationError(modifiedObject, []);
        }
      }
    },
    OutOfMemoryError: {
      "^": "Object;$ti",
      $isError: 1
    },
    StackOverflowError: {
      "^": "Object;$ti",
      toString$0: function(_) {
        return "Stack Overflow";
      },
      $isError: 1,
      static: {
        StackOverflowError$: function() {
          return new P.StackOverflowError([]);
        }
      }
    },
    CyclicInitializationError: {
      "^": "Error;variableName,$ti",
      toString$0: function(_) {
        var t1 = this.variableName;
        return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + H.S(t1) + "' during its initialization";
      },
      static: {
        CyclicInitializationError$: function(variableName) {
          return new P.CyclicInitializationError(variableName, []);
        }
      }
    },
    _ConstantHelper: {
      "^": "Object;$ti"
    },
    Exception: {
      "^": "Object;$ti"
    },
    _Exception: {
      "^": "Object;message,$ti",
      toString$0: function(_) {
        var t1 = this.message;
        if (t1 == null)
          return "Exception";
        return "Exception: " + H.S(t1);
      },
      $isException: 1,
      static: {
        _Exception$: function(message) {
          return new P._Exception(message, []);
        }
      }
    },
    FormatException: {
      "^": "Object;$ti",
      $isException: 1
    },
    IntegerDivisionByZeroException: {
      "^": "Object;$ti",
      $isException: 1
    },
    Expando: {
      "^": "Object;$ti"
    },
    Function: {
      "^": "Object;$ti"
    },
    int: {
      "^": "num;$ti"
    },
    "+int": 0,
    Invocation: {
      "^": "Object;$ti"
    },
    _Invocation: {
      "^": "Object;$ti",
      $isInvocation: 1
    },
    Iterable: {
      "^": "Object;$ti"
    },
    _GeneratorIterable: {
      "^": "ListIterable;$ti"
    },
    BidirectionalIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    Iterator: {
      "^": "Object;$ti"
    },
    List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1
    },
    "+List": 0,
    Map: {
      "^": "Object;$ti"
    },
    MapEntry: {
      "^": "Object;$ti"
    },
    Null: {
      "^": "Object;$ti",
      toString$0: function(_) {
        return "null";
      }
    },
    "+Null": 0,
    num: {
      "^": "Object;$ti",
      $isComparable: 1,
      $asComparable: function() {
        return [P.num];
      }
    },
    "+num": 0,
    Object: {
      "^": ";$ti",
      $eq: function(_, other) {
        return this === other;
      },
      toString$0: function(_) {
        return H.Primitives_objectToHumanReadableString(this);
      },
      toString: function() {
        return this.toString$0(this);
      }
    },
    Pattern: {
      "^": "Object;$ti"
    },
    Match: {
      "^": "Object;$ti"
    },
    RegExp: {
      "^": "Object;$ti",
      $isPattern: 1
    },
    Set: {
      "^": "EfficientLengthIterable;$ti"
    },
    Sink: {
      "^": "Object;$ti"
    },
    StackTrace: {
      "^": "Object;$ti"
    },
    _StringStackTrace: {
      "^": "Object;$ti",
      $isStackTrace: 1
    },
    Stopwatch: {
      "^": "Object;$ti"
    },
    String: {
      "^": "Object;$ti",
      $isComparable: 1,
      $asComparable: function() {
        return [P.String];
      },
      $isPattern: 1
    },
    "+String": 0,
    Runes: {
      "^": "Iterable;$ti",
      $asIterable: function() {
        return [P.int];
      }
    },
    RuneIterator: {
      "^": "Object;$ti",
      $isBidirectionalIterator: 1,
      $asBidirectionalIterator: function() {
        return [P.int];
      },
      $isIterator: 1,
      $asIterator: function() {
        return [P.int];
      }
    },
    StringBuffer: {
      "^": "Object;_contents,$ti",
      get$length: function(_) {
        return J.get$length$as(this._contents);
      },
      write$1: function(obj) {
        this._writeString$1(H.S(obj));
      },
      writeAll$2: function(objects, separator) {
        H.listSuperNativeTypeCheck(objects, "$isIterable");
        H.stringTypeCheck(separator);
        this._contents = H.stringTypeCheck(P.StringBuffer__writeAll(this._contents, objects, separator));
      },
      toString$0: function(_) {
        return H.Primitives_flattenString(this._contents);
      },
      _writeString$1: function(str) {
        this._contents = H.stringTypeCheck(H.Primitives_stringConcatUnchecked(this._contents, H.stringTypeCheck(str)));
      },
      $isStringSink: 1,
      static: {
        StringBuffer$: function($content) {
          return new P.StringBuffer(H.S($content), []);
        },
        StringBuffer__writeAll: function(string, objects, separator) {
          var iterator;
          H.stringTypeCheck(string);
          H.listSuperNativeTypeCheck(objects, "$isIterable");
          H.stringTypeCheck(separator);
          iterator = (objects && C.JSArray_methods).get$iterator(objects);
          if (!iterator.moveNext$0())
            return string;
          if (J.get$isEmpty$s(separator)) {
            do
              string = P.StringBuffer__writeOne(string, iterator.get$current());
            while (iterator.moveNext$0());
          } else {
            string = P.StringBuffer__writeOne(string, iterator.get$current());
            for (; iterator.moveNext$0();)
              string = P.StringBuffer__writeOne(P.StringBuffer__writeOne(string, separator), iterator.get$current());
          }
          return string;
        },
        StringBuffer__writeOne: function(string, obj) {
          return H.Primitives_stringConcatUnchecked(H.stringTypeCheck(string), H.S(obj));
        }
      }
    },
    StringSink: {
      "^": "Object;$ti"
    },
    Symbol: {
      "^": "Object;$ti"
    },
    Type: {
      "^": "Object;$ti"
    },
    Uri: {
      "^": "Object;$ti"
    },
    _Uri: {
      "^": "Object;$ti",
      $isUri: 1
    },
    UriData: {
      "^": "Object;$ti"
    },
    _SimpleUri: {
      "^": "Object;$ti",
      $isUri: 1
    },
    _DataUri: {
      "^": "_Uri;$ti"
    }
  }], ["dart.developer", "dart:developer",, P, {
    "^": "",
    _FakeUserTag: {
      "^": "Object;$ti",
      $isUserTag: 1
    },
    ServiceExtensionResponse: {
      "^": "Object;$ti"
    },
    UserTag: {
      "^": "Object;$ti"
    },
    Metric: {
      "^": "Object;$ti"
    },
    Gauge: {
      "^": "Metric;$ti"
    },
    Counter: {
      "^": "Metric;$ti"
    },
    Metrics: {
      "^": "Object;$ti"
    },
    ServiceProtocolInfo: {
      "^": "Object;$ti"
    },
    Service: {
      "^": "Object;$ti"
    },
    Flow: {
      "^": "Object;$ti"
    },
    Timeline: {
      "^": "Object;$ti"
    },
    TimelineTask: {
      "^": "Object;$ti"
    },
    _AsyncBlock: {
      "^": "Object;$ti"
    },
    _SyncBlock: {
      "^": "Object;$ti"
    }
  }], ["dart.dom.html", "dart:html",, W, {
    "^": "",
    document: function() {
      return document;
    },
    _wrapZone: function(callback, $T) {
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      if (J.$eq$(P.Zone_current(), C.C__RootZone))
        return callback;
      if (callback == null)
        return;
      return P.Zone_current().bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: {
      "^": "Element;$ti",
      $isHtmlElement: 1,
      $isNoncedElement: 1,
      "%": ";HTMLElement"
    },
    AbortPaymentEvent: {
      "^": "ExtendableEvent;$ti",
      $isAbortPaymentEvent: 1,
      "%": "AbortPaymentEvent"
    },
    AbsoluteOrientationSensor: {
      "^": "OrientationSensor;$ti",
      $isAbsoluteOrientationSensor: 1,
      "%": ""
    },
    AbstractWorker: {
      "^": "Interceptor;$ti",
      $isEventTarget: 1
    },
    Accelerometer: {
      "^": "Sensor;$ti",
      $isAccelerometer: 1,
      "%": ""
    },
    AccessibleNode: {
      "^": "EventTarget;$ti",
      $isAccessibleNode: 1,
      "%": ""
    },
    AccessibleNodeList: {
      "^": "Interceptor;$ti",
      $isAccessibleNodeList: 1,
      "%": ""
    },
    AmbientLightSensor: {
      "^": "Sensor;$ti",
      $isAmbientLightSensor: 1,
      "%": ""
    },
    AnchorElement: {
      "^": "HtmlElement;$ti",
      $isAnchorElement: 1,
      $isHtmlHyperlinkElementUtils: 1,
      "%": ""
    },
    Animation: {
      "^": "EventTarget;$ti",
      $isAnimation: 1,
      "%": ""
    },
    AnimationEffectReadOnly: {
      "^": "Interceptor;$ti",
      $isAnimationEffectReadOnly: 1,
      "%": ""
    },
    AnimationEffectTiming: {
      "^": "AnimationEffectTimingReadOnly;$ti",
      $isAnimationEffectTiming: 1,
      "%": ""
    },
    AnimationEffectTimingReadOnly: {
      "^": "Interceptor;$ti",
      $isAnimationEffectTimingReadOnly: 1,
      "%": ""
    },
    AnimationEvent: {
      "^": "Event;$ti",
      $isAnimationEvent: 1,
      "%": "AnimationEvent"
    },
    AnimationPlaybackEvent: {
      "^": "Event;$ti",
      $isAnimationPlaybackEvent: 1,
      "%": "AnimationPlaybackEvent"
    },
    AnimationTimeline: {
      "^": "Interceptor;$ti",
      $isAnimationTimeline: 1,
      "%": ""
    },
    AnimationWorkletGlobalScope: {
      "^": "WorkletGlobalScope;$ti",
      $isAnimationWorkletGlobalScope: 1,
      "%": ""
    },
    ApplicationCache: {
      "^": "EventTarget;$ti",
      $isApplicationCache: 1,
      "%": ""
    },
    ApplicationCacheErrorEvent: {
      "^": "Event;$ti",
      $isApplicationCacheErrorEvent: 1,
      "%": "ApplicationCacheErrorEvent"
    },
    AreaElement: {
      "^": "HtmlElement;$ti",
      $isAreaElement: 1,
      $isHtmlHyperlinkElementUtils: 1,
      "%": ""
    },
    AudioElement: {
      "^": "MediaElement;$ti",
      $isAudioElement: 1,
      "%": ""
    },
    AuthenticatorAssertionResponse: {
      "^": "AuthenticatorResponse;$ti",
      $isAuthenticatorAssertionResponse: 1,
      "%": ""
    },
    AuthenticatorAttestationResponse: {
      "^": "AuthenticatorResponse;$ti",
      $isAuthenticatorAttestationResponse: 1,
      "%": ""
    },
    AuthenticatorResponse: {
      "^": "Interceptor;$ti",
      $isAuthenticatorResponse: 1,
      "%": ""
    },
    BRElement: {
      "^": "HtmlElement;$ti",
      $isBRElement: 1,
      "%": ""
    },
    BackgroundFetchClickEvent: {
      "^": "BackgroundFetchEvent;$ti",
      $isBackgroundFetchClickEvent: 1,
      "%": "BackgroundFetchClickEvent"
    },
    BackgroundFetchEvent: {
      "^": "ExtendableEvent;$ti",
      $isBackgroundFetchEvent: 1,
      "%": ";BackgroundFetchEvent"
    },
    BackgroundFetchFailEvent: {
      "^": "BackgroundFetchEvent;$ti",
      $isBackgroundFetchFailEvent: 1,
      "%": "BackgroundFetchFailEvent"
    },
    BackgroundFetchFetch: {
      "^": "Interceptor;$ti",
      $isBackgroundFetchFetch: 1,
      "%": ""
    },
    BackgroundFetchManager: {
      "^": "Interceptor;$ti",
      $isBackgroundFetchManager: 1,
      "%": ""
    },
    BackgroundFetchRegistration: {
      "^": "EventTarget;$ti",
      $isBackgroundFetchRegistration: 1,
      "%": ""
    },
    BackgroundFetchSettledFetch: {
      "^": "BackgroundFetchFetch;$ti",
      $isBackgroundFetchSettledFetch: 1,
      "%": ""
    },
    BackgroundFetchedEvent: {
      "^": "BackgroundFetchEvent;$ti",
      $isBackgroundFetchedEvent: 1,
      "%": "BackgroundFetchedEvent"
    },
    BarProp: {
      "^": "Interceptor;$ti",
      $isBarProp: 1,
      "%": ""
    },
    BarcodeDetector: {
      "^": "Interceptor;$ti",
      $isBarcodeDetector: 1,
      "%": ""
    },
    BaseElement: {
      "^": "HtmlElement;$ti",
      $isBaseElement: 1,
      "%": ""
    },
    BatteryManager: {
      "^": "EventTarget;$ti",
      $isBatteryManager: 1,
      "%": ""
    },
    BeforeInstallPromptEvent: {
      "^": "Event;$ti",
      $isBeforeInstallPromptEvent: 1,
      "%": "BeforeInstallPromptEvent"
    },
    BeforeUnloadEvent: {
      "^": "Event;$ti",
      $isBeforeUnloadEvent: 1,
      "%": "BeforeUnloadEvent"
    },
    Blob: {
      "^": "Interceptor;$ti",
      $isBlob: 1,
      "%": ""
    },
    BlobEvent: {
      "^": "Event;$ti",
      $isBlobEvent: 1,
      "%": "BlobEvent"
    },
    BluetoothRemoteGattDescriptor: {
      "^": "Interceptor;$ti",
      $isBluetoothRemoteGattDescriptor: 1,
      "%": ""
    },
    Body: {
      "^": "Interceptor;$ti",
      $isBody: 1,
      "%": ""
    },
    BodyElement: {
      "^": "HtmlElement;$ti",
      $isBodyElement: 1,
      $isWindowEventHandlers: 1,
      "%": "HTMLBodyElement"
    },
    BroadcastChannel: {
      "^": "EventTarget;$ti",
      $isBroadcastChannel: 1,
      "%": ""
    },
    BudgetState: {
      "^": "Interceptor;$ti",
      $isBudgetState: 1,
      "%": ""
    },
    ButtonElement: {
      "^": "HtmlElement;$ti",
      $isButtonElement: 1,
      "%": ""
    },
    CDataSection: {
      "^": "Text;$ti",
      $isCDataSection: 1,
      "%": ""
    },
    CacheStorage: {
      "^": "Interceptor;$ti",
      $isCacheStorage: 1,
      "%": ""
    },
    CanMakePaymentEvent: {
      "^": "ExtendableEvent;$ti",
      $isCanMakePaymentEvent: 1,
      "%": "CanMakePaymentEvent"
    },
    CanvasCaptureMediaStreamTrack: {
      "^": "MediaStreamTrack;$ti",
      $isCanvasCaptureMediaStreamTrack: 1,
      "%": ""
    },
    CanvasElement: {
      "^": "HtmlElement;$ti",
      $isCanvasElement: 1,
      $isCanvasImageSource: 1,
      "%": ""
    },
    CanvasGradient: {
      "^": "Interceptor;$ti",
      $isCanvasGradient: 1,
      "%": ""
    },
    CanvasPattern: {
      "^": "Interceptor;$ti",
      $isCanvasPattern: 1,
      "%": ""
    },
    CanvasRenderingContext: {
      "^": "Object;$ti"
    },
    CanvasRenderingContext2D: {
      "^": "Interceptor;$ti",
      $isCanvasRenderingContext: 1,
      $isCanvasRenderingContext2D: 1,
      "%": ""
    },
    CharacterData: {
      "^": "Node;$ti",
      $isCharacterData: 1,
      $isChildNode: 1,
      $isNonDocumentTypeChildNode: 1,
      "%": ""
    },
    ChildNode: {
      "^": "Interceptor;$ti"
    },
    Client: {
      "^": "Interceptor;$ti",
      $isClient: 1,
      "%": ""
    },
    Clients: {
      "^": "Interceptor;$ti",
      $isClients: 1,
      "%": ""
    },
    ClipboardEvent: {
      "^": "Event;$ti",
      $isClipboardEvent: 1,
      "%": "ClipboardEvent"
    },
    CloseEvent: {
      "^": "Event;$ti",
      $isCloseEvent: 1,
      "%": "CloseEvent"
    },
    Comment: {
      "^": "CharacterData;$ti",
      $isComment: 1,
      "%": ""
    },
    CompositionEvent: {
      "^": "UIEvent;$ti",
      $isCompositionEvent: 1,
      "%": "CompositionEvent"
    },
    ContentElement: {
      "^": "HtmlElement;$ti",
      $isContentElement: 1,
      "%": ""
    },
    CookieStore: {
      "^": "Interceptor;$ti",
      $isCookieStore: 1,
      "%": ""
    },
    Coordinates: {
      "^": "Interceptor;$ti",
      $isCoordinates: 1,
      "%": ""
    },
    Credential: {
      "^": "Interceptor;$ti",
      $isCredential: 1,
      "%": ""
    },
    CredentialUserData: {
      "^": "Interceptor;$ti",
      $isCredentialUserData: 1,
      "%": ""
    },
    CredentialsContainer: {
      "^": "Interceptor;$ti",
      $isCredentialsContainer: 1,
      "%": ""
    },
    Crypto: {
      "^": "Interceptor;$ti",
      $isCrypto: 1,
      "%": ""
    },
    CryptoKey: {
      "^": "Interceptor;$ti",
      $isCryptoKey: 1,
      "%": ""
    },
    Css: {
      "^": "Interceptor;$ti",
      $isCss: 1,
      "%": ""
    },
    CssCharsetRule: {
      "^": "CssRule;$ti",
      $isCssCharsetRule: 1,
      "%": ""
    },
    CssConditionRule: {
      "^": "CssGroupingRule;$ti",
      $isCssConditionRule: 1,
      "%": ""
    },
    CssFontFaceRule: {
      "^": "CssRule;$ti",
      $isCssFontFaceRule: 1,
      "%": ""
    },
    CssGroupingRule: {
      "^": "CssRule;$ti",
      $isCssGroupingRule: 1,
      "%": ""
    },
    CssImageValue: {
      "^": "CssResourceValue;$ti",
      $isCssImageValue: 1,
      "%": ""
    },
    CssImportRule: {
      "^": "CssRule;$ti",
      $isCssImportRule: 1,
      "%": ""
    },
    CssKeyframeRule: {
      "^": "CssRule;$ti",
      $isCssKeyframeRule: 1,
      "%": ""
    },
    CssKeyframesRule: {
      "^": "CssRule;$ti",
      $isCssKeyframesRule: 1,
      "%": ""
    },
    CssKeywordValue: {
      "^": "CssStyleValue;$ti",
      $isCssKeywordValue: 1,
      "%": ""
    },
    CssMatrixComponent: {
      "^": "CssTransformComponent;$ti",
      $isCssMatrixComponent: 1,
      "%": ""
    },
    CssMediaRule: {
      "^": "CssConditionRule;$ti",
      $isCssMediaRule: 1,
      "%": ""
    },
    CssNamespaceRule: {
      "^": "CssRule;$ti",
      $isCssNamespaceRule: 1,
      "%": ""
    },
    CssNumericValue: {
      "^": "CssStyleValue;$ti",
      $isCssNumericValue: 1,
      "%": ""
    },
    CssPageRule: {
      "^": "CssRule;$ti",
      $isCssPageRule: 1,
      "%": ""
    },
    CssPerspective: {
      "^": "CssTransformComponent;$ti",
      $isCssPerspective: 1,
      "%": ""
    },
    CssPositionValue: {
      "^": "CssStyleValue;$ti",
      $isCssPositionValue: 1,
      "%": ""
    },
    CssResourceValue: {
      "^": "CssStyleValue;$ti",
      $isCssResourceValue: 1,
      "%": ""
    },
    CssRotation: {
      "^": "CssTransformComponent;$ti",
      $isCssRotation: 1,
      "%": ""
    },
    CssRule: {
      "^": "Interceptor;$ti",
      $isCssRule: 1,
      "%": ""
    },
    CssScale: {
      "^": "CssTransformComponent;$ti",
      $isCssScale: 1,
      "%": ""
    },
    CssSkew: {
      "^": "CssTransformComponent;$ti",
      $isCssSkew: 1,
      "%": ""
    },
    CssStyleDeclaration: {
      "^": "_CssStyleDeclaration_Interceptor_CssStyleDeclarationBase;$ti",
      $isCssStyleDeclaration: 1,
      $isCssStyleDeclarationBase: 1,
      "%": ""
    },
    _CssStyleDeclarationSet: {
      "^": "__CssStyleDeclarationSet_Object_CssStyleDeclarationBase;$ti",
      $isCssStyleDeclarationBase: 1
    },
    CssStyleDeclarationBase: {
      "^": "Object;$ti"
    },
    CssStyleRule: {
      "^": "CssRule;$ti",
      $isCssStyleRule: 1,
      "%": ""
    },
    CssStyleSheet: {
      "^": "StyleSheet;$ti",
      $isCssStyleSheet: 1,
      "%": ""
    },
    CssStyleValue: {
      "^": "Interceptor;$ti",
      $isCssStyleValue: 1,
      "%": ""
    },
    CssSupportsRule: {
      "^": "CssConditionRule;$ti",
      $isCssSupportsRule: 1,
      "%": ""
    },
    CssTransformComponent: {
      "^": "Interceptor;$ti",
      $isCssTransformComponent: 1,
      "%": ""
    },
    CssTransformValue: {
      "^": "CssStyleValue;$ti",
      $isCssTransformValue: 1,
      "%": ""
    },
    CssTranslation: {
      "^": "CssTransformComponent;$ti",
      $isCssTranslation: 1,
      "%": ""
    },
    CssUnitValue: {
      "^": "CssNumericValue;$ti",
      $isCssUnitValue: 1,
      "%": ""
    },
    CssUnparsedValue: {
      "^": "CssStyleValue;$ti",
      $isCssUnparsedValue: 1,
      "%": ""
    },
    CssVariableReferenceValue: {
      "^": "Interceptor;$ti",
      $isCssVariableReferenceValue: 1,
      "%": ""
    },
    CssViewportRule: {
      "^": "CssRule;$ti",
      $isCssViewportRule: 1,
      "%": ""
    },
    CssurlImageValue: {
      "^": "CssImageValue;$ti",
      $isCssurlImageValue: 1,
      "%": ""
    },
    CustomElementRegistry: {
      "^": "Interceptor;$ti",
      $isCustomElementRegistry: 1,
      "%": ""
    },
    CustomEvent: {
      "^": "Event;$ti",
      $isCustomEvent: 1,
      "%": "CustomEvent"
    },
    DListElement: {
      "^": "HtmlElement;$ti",
      $isDListElement: 1,
      "%": ""
    },
    DataElement: {
      "^": "HtmlElement;$ti",
      $isDataElement: 1,
      "%": ""
    },
    DataListElement: {
      "^": "HtmlElement;$ti",
      $isDataListElement: 1,
      "%": ""
    },
    DataTransfer: {
      "^": "Interceptor;$ti",
      $isDataTransfer: 1,
      "%": ""
    },
    DataTransferItem: {
      "^": "Interceptor;$ti",
      $isDataTransferItem: 1,
      "%": ""
    },
    DataTransferItemList: {
      "^": "Interceptor;$ti",
      $isDataTransferItemList: 1,
      "%": ""
    },
    DedicatedWorkerGlobalScope: {
      "^": "WorkerGlobalScope;$ti",
      $isDedicatedWorkerGlobalScope: 1,
      "%": ""
    },
    DeprecatedStorageInfo: {
      "^": "Interceptor;$ti",
      $isDeprecatedStorageInfo: 1,
      "%": ""
    },
    DeprecatedStorageQuota: {
      "^": "Interceptor;$ti",
      $isDeprecatedStorageQuota: 1,
      "%": ""
    },
    DeprecationReport: {
      "^": "ReportBody;$ti",
      $isDeprecationReport: 1,
      "%": ""
    },
    DetailsElement: {
      "^": "HtmlElement;$ti",
      $isDetailsElement: 1,
      "%": ""
    },
    DetectedBarcode: {
      "^": "Interceptor;$ti",
      $isDetectedBarcode: 1,
      "%": ""
    },
    DetectedFace: {
      "^": "Interceptor;$ti",
      $isDetectedFace: 1,
      "%": ""
    },
    DetectedText: {
      "^": "Interceptor;$ti",
      $isDetectedText: 1,
      "%": ""
    },
    DeviceAcceleration: {
      "^": "Interceptor;$ti",
      $isDeviceAcceleration: 1,
      "%": ""
    },
    DeviceMotionEvent: {
      "^": "Event;$ti",
      $isDeviceMotionEvent: 1,
      "%": "DeviceMotionEvent"
    },
    DeviceOrientationEvent: {
      "^": "Event;$ti",
      $isDeviceOrientationEvent: 1,
      "%": "DeviceOrientationEvent"
    },
    DeviceRotationRate: {
      "^": "Interceptor;$ti",
      $isDeviceRotationRate: 1,
      "%": ""
    },
    DialogElement: {
      "^": "HtmlElement;$ti",
      $isDialogElement: 1,
      "%": ""
    },
    DirectoryEntry: {
      "^": "Entry;$ti",
      $isDirectoryEntry: 1,
      "%": ""
    },
    DirectoryReader: {
      "^": "Interceptor;$ti",
      $isDirectoryReader: 1,
      "%": ""
    },
    DivElement: {
      "^": "HtmlElement;$ti",
      $isDivElement: 1,
      "%": ""
    },
    Document: {
      "^": "Node;$ti",
      $isDocument: 1,
      "%": ";Document"
    },
    DocumentFragment: {
      "^": "Node;$ti",
      $isDocumentFragment: 1,
      $isNonElementParentNode: 1,
      $isParentNode: 1,
      "%": ""
    },
    DocumentOrShadowRoot: {
      "^": "Interceptor;$ti",
      $isDocumentOrShadowRoot: 1,
      "%": ""
    },
    DocumentTimeline: {
      "^": "AnimationTimeline;$ti",
      $isDocumentTimeline: 1,
      "%": ""
    },
    DomError: {
      "^": "Interceptor;$ti",
      $isDomError: 1,
      "%": "DOMError"
    },
    DomException: {
      "^": "Interceptor;$ti",
      toString$0: function(receiver) {
        return String(receiver);
      },
      $isDomException: 1,
      "%": "DOMException"
    },
    DomImplementation: {
      "^": "Interceptor;$ti",
      $isDomImplementation: 1,
      "%": ""
    },
    DomIterator: {
      "^": "Interceptor;$ti",
      $isDomIterator: 1,
      "%": ""
    },
    DomMatrix: {
      "^": "DomMatrixReadOnly;$ti",
      $isDomMatrix: 1,
      "%": ""
    },
    DomMatrixReadOnly: {
      "^": "Interceptor;$ti",
      $isDomMatrixReadOnly: 1,
      "%": ""
    },
    DomParser: {
      "^": "Interceptor;$ti",
      $isDomParser: 1,
      "%": ""
    },
    DomPoint: {
      "^": "DomPointReadOnly;$ti",
      $isDomPoint: 1,
      "%": ""
    },
    DomPointReadOnly: {
      "^": "Interceptor;$ti",
      $isDomPointReadOnly: 1,
      "%": ""
    },
    DomQuad: {
      "^": "Interceptor;$ti",
      $isDomQuad: 1,
      "%": ""
    },
    DomRectList: {
      "^": "_DomRectList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [[P.Rectangle, P.num]];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [[P.Rectangle, P.num]];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isList: 1,
      $asList: function() {
        return [[P.Rectangle, P.num]];
      },
      $isDomRectList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [[P.Rectangle, P.num]];
      },
      "%": ""
    },
    DomRectReadOnly: {
      "^": "Interceptor;$ti",
      $isDomRectReadOnly: 1,
      $is_RectangleBase: 1,
      $as_RectangleBase: function() {
        return [P.num];
      },
      $isRectangle: 1,
      $asRectangle: function() {
        return [P.num];
      },
      "%": ""
    },
    DomStringList: {
      "^": "_DomStringList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [P.String];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [P.String];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [P.String];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isDomStringList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.String];
      },
      "%": ""
    },
    DomStringMap: {
      "^": "Interceptor;$ti",
      $isDomStringMap: 1,
      "%": ""
    },
    DomTokenList: {
      "^": "Interceptor;$ti",
      $isDomTokenList: 1,
      "%": ""
    },
    _ChildrenElementList: {
      "^": "ListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [W.Element];
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asListMixin: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $isNodeListWrapper: 1,
      $as_ListBase_Object_ListMixin: function() {
        return [W.Element];
      }
    },
    ElementList: {
      "^": "ListBase;$ti"
    },
    _FrozenElementList: {
      "^": "ListBase;$ti",
      $isElementList: 1,
      $isNodeListWrapper: 1
    },
    Element: {
      "^": "Node;$ti",
      get$localName: function(receiver) {
        return receiver.localName;
      },
      toString$0: function(receiver) {
        return this.get$localName(receiver);
      },
      get$onClick: function(receiver) {
        return C.EventStreamProvider_click.forElement$1(receiver);
      },
      $isChildNode: 1,
      $isElement: 1,
      $isGlobalEventHandlers: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1,
      "%": ";Element"
    },
    _ElementFactoryProvider: {
      "^": "Object;$ti"
    },
    ScrollAlignment: {
      "^": "Object;$ti"
    },
    EmbedElement: {
      "^": "HtmlElement;$ti",
      $isEmbedElement: 1,
      "%": ""
    },
    Entry: {
      "^": "Interceptor;$ti",
      $isEntry: 1,
      "%": ""
    },
    ErrorEvent: {
      "^": "Event;$ti",
      $isErrorEvent: 1,
      "%": "ErrorEvent"
    },
    Event: {
      "^": "Interceptor;$ti",
      $isEvent: 1,
      "%": ";Event|InputEvent"
    },
    EventSource: {
      "^": "EventTarget;$ti",
      $isEventSource: 1,
      "%": ""
    },
    Events: {
      "^": "Object;$ti"
    },
    ElementEvents: {
      "^": "Events;$ti"
    },
    EventTarget: {
      "^": "Interceptor;$ti",
      addEventListener$3: function(receiver, type, listener, useCapture) {
        H.stringTypeCheck(type);
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        H.boolTypeCheck(useCapture);
        if (listener != null)
          this._addEventListener$3(receiver, type, listener, useCapture);
      },
      removeEventListener$3: function(receiver, type, listener, useCapture) {
        H.stringTypeCheck(type);
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        H.boolTypeCheck(useCapture);
        if (listener != null)
          this._removeEventListener$3(receiver, type, listener, useCapture);
      },
      _addEventListener$3: function(receiver, type, listener, options) {
        H.stringTypeCheck(type);
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        H.boolTypeCheck(options);
        return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), options);
      },
      _removeEventListener$3: function(receiver, type, listener, options) {
        H.stringTypeCheck(type);
        H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
        H.boolTypeCheck(options);
        return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), options);
      },
      $isEventTarget: 1,
      "%": ";EventTarget"
    },
    ExtendableEvent: {
      "^": "Event;$ti",
      $isExtendableEvent: 1,
      "%": ";ExtendableEvent"
    },
    ExtendableMessageEvent: {
      "^": "ExtendableEvent;$ti",
      $isExtendableMessageEvent: 1,
      "%": "ExtendableMessageEvent"
    },
    External: {
      "^": "Interceptor;$ti",
      $isExternal: 1,
      "%": ""
    },
    FaceDetector: {
      "^": "Interceptor;$ti",
      $isFaceDetector: 1,
      "%": ""
    },
    FederatedCredential: {
      "^": "Credential;$ti",
      $isCredentialUserData: 1,
      $isFederatedCredential: 1,
      "%": ""
    },
    FetchEvent: {
      "^": "ExtendableEvent;$ti",
      $isFetchEvent: 1,
      "%": "FetchEvent"
    },
    FieldSetElement: {
      "^": "HtmlElement;$ti",
      $isFieldSetElement: 1,
      "%": ""
    },
    File: {
      "^": "Blob;$ti",
      $isFile: 1,
      "%": ""
    },
    FileEntry: {
      "^": "Entry;$ti",
      $isFileEntry: 1,
      "%": ""
    },
    FileList: {
      "^": "_FileList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.File];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.File];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.File];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.File];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.File];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.File];
      },
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $isFileList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.File];
      },
      "%": ""
    },
    FileReader: {
      "^": "EventTarget;$ti",
      $isFileReader: 1,
      "%": ""
    },
    FileSystem: {
      "^": "Interceptor;$ti",
      $isFileSystem: 1,
      "%": ""
    },
    FileWriter: {
      "^": "EventTarget;$ti",
      $isFileWriter: 1,
      "%": ""
    },
    FocusEvent: {
      "^": "UIEvent;$ti",
      $isFocusEvent: 1,
      "%": "FocusEvent"
    },
    FontFace: {
      "^": "Interceptor;$ti",
      $isFontFace: 1,
      "%": ""
    },
    FontFaceSet: {
      "^": "EventTarget;$ti",
      $isFontFaceSet: 1,
      "%": ""
    },
    FontFaceSetLoadEvent: {
      "^": "Event;$ti",
      $isFontFaceSetLoadEvent: 1,
      "%": "FontFaceSetLoadEvent"
    },
    FontFaceSource: {
      "^": "Interceptor;$ti",
      $isFontFaceSource: 1,
      "%": ""
    },
    ForeignFetchEvent: {
      "^": "ExtendableEvent;$ti",
      $isForeignFetchEvent: 1,
      "%": "ForeignFetchEvent"
    },
    FormData: {
      "^": "Interceptor;$ti",
      $isFormData: 1,
      "%": ""
    },
    FormElement: {
      "^": "HtmlElement;$ti",
      $isFormElement: 1,
      "%": ""
    },
    Gamepad: {
      "^": "Interceptor;$ti",
      $isGamepad: 1,
      "%": ""
    },
    GamepadButton: {
      "^": "Interceptor;$ti",
      $isGamepadButton: 1,
      "%": ""
    },
    GamepadEvent: {
      "^": "Event;$ti",
      $isGamepadEvent: 1,
      "%": "GamepadEvent"
    },
    GamepadPose: {
      "^": "Interceptor;$ti",
      $isGamepadPose: 1,
      "%": ""
    },
    Geolocation: {
      "^": "Interceptor;$ti",
      $isGeolocation: 1,
      "%": ""
    },
    _GeopositionWrapper: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isGeoposition: 1
    },
    Geoposition: {
      "^": "Interceptor;$ti",
      $isGeoposition: 1,
      "%": ""
    },
    GlobalEventHandlers: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isEventTarget: 1
    },
    Gyroscope: {
      "^": "Sensor;$ti",
      $isGyroscope: 1,
      "%": ""
    },
    HRElement: {
      "^": "HtmlElement;$ti",
      $isHRElement: 1,
      "%": ""
    },
    HashChangeEvent: {
      "^": "Event;$ti",
      $isHashChangeEvent: 1,
      "%": "HashChangeEvent"
    },
    HeadElement: {
      "^": "HtmlElement;$ti",
      $isHeadElement: 1,
      "%": ""
    },
    Headers: {
      "^": "Interceptor;$ti",
      $isHeaders: 1,
      "%": ""
    },
    HeadingElement: {
      "^": "HtmlElement;$ti",
      $isHeadingElement: 1,
      "%": ""
    },
    History: {
      "^": "Interceptor;$ti",
      $isHistory: 1,
      $isHistoryBase: 1,
      "%": ""
    },
    HtmlCollection: {
      "^": "_HtmlCollection_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.Node];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isHtmlCollection: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": ""
    },
    HtmlDocument: {
      "^": "Document;0body=,$ti",
      $isHtmlDocument: 1,
      "%": "HTMLDocument"
    },
    HtmlFormControlsCollection: {
      "^": "HtmlCollection;$ti",
      $isHtmlFormControlsCollection: 1,
      "%": ""
    },
    HtmlHtmlElement: {
      "^": "HtmlElement;$ti",
      $isHtmlHtmlElement: 1,
      "%": ""
    },
    HtmlHyperlinkElementUtils: {
      "^": "Interceptor;$ti",
      $isHtmlHyperlinkElementUtils: 1,
      "%": ""
    },
    HtmlOptionsCollection: {
      "^": "HtmlCollection;$ti",
      $isHtmlOptionsCollection: 1,
      "%": ""
    },
    HttpRequest0: {
      "^": "HttpRequestEventTarget;$ti",
      $isHttpRequest0: 1,
      "%": ""
    },
    HttpRequestEventTarget: {
      "^": "EventTarget;$ti",
      $isHttpRequestEventTarget: 1,
      "%": ""
    },
    HttpRequestUpload: {
      "^": "HttpRequestEventTarget;$ti",
      $isHttpRequestUpload: 1,
      "%": ""
    },
    IFrameElement: {
      "^": "HtmlElement;$ti",
      $isIFrameElement: 1,
      "%": ""
    },
    IdleDeadline: {
      "^": "Interceptor;$ti",
      $isIdleDeadline: 1,
      "%": ""
    },
    ImageBitmap: {
      "^": "Interceptor;$ti",
      $isImageBitmap: 1,
      "%": ""
    },
    ImageBitmapRenderingContext: {
      "^": "Interceptor;$ti",
      $isImageBitmapRenderingContext: 1,
      "%": ""
    },
    ImageCapture: {
      "^": "Interceptor;$ti",
      $isImageCapture: 1,
      "%": ""
    },
    ImageData: {
      "^": "Interceptor;$ti",
      $isImageData: 1,
      "%": ""
    },
    ImageElement: {
      "^": "HtmlElement;$ti",
      $isImageElement: 1,
      $isCanvasImageSource: 1,
      "%": ""
    },
    InputDeviceCapabilities: {
      "^": "Interceptor;$ti",
      $isInputDeviceCapabilities: 1,
      "%": ""
    },
    InputElement: {
      "^": "HtmlElement;$ti",
      $isInputElement: 1,
      $isInputElementBase: 1,
      $isHiddenInputElement: 1,
      $isTextInputElementBase: 1,
      $isSearchInputElement: 1,
      $isTextInputElement: 1,
      $isUrlInputElement: 1,
      $isTelephoneInputElement: 1,
      $isEmailInputElement: 1,
      $isPasswordInputElement: 1,
      $isRangeInputElementBase: 1,
      $isDateInputElement: 1,
      $isMonthInputElement: 1,
      $isWeekInputElement: 1,
      $isTimeInputElement: 1,
      $isLocalDateTimeInputElement: 1,
      $isNumberInputElement: 1,
      $isRangeInputElement: 1,
      $isCheckboxInputElement: 1,
      $isRadioButtonInputElement: 1,
      $isFileUploadInputElement: 1,
      $isSubmitButtonInputElement: 1,
      $isImageButtonInputElement: 1,
      $isResetButtonInputElement: 1,
      $isButtonInputElement: 1,
      "%": ""
    },
    InputElementBase: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    HiddenInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    TextInputElementBase: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    SearchInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isTextInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    TextInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isTextInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    UrlInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isTextInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    TelephoneInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isTextInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    EmailInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isTextInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    PasswordInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isTextInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    RangeInputElementBase: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    DateInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isRangeInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    MonthInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isRangeInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    WeekInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isRangeInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    TimeInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isRangeInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    LocalDateTimeInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isRangeInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    NumberInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isRangeInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    RangeInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isRangeInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    CheckboxInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    RadioButtonInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    FileUploadInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    SubmitButtonInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    ImageButtonInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    ResetButtonInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    ButtonInputElement: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isChildNode: 1,
      $isElement: 1,
      $isEventTarget: 1,
      $isGlobalEventHandlers: 1,
      $isInputElementBase: 1,
      $isNode: 1,
      $isNonDocumentTypeChildNode: 1,
      $isParentNode: 1
    },
    InstallEvent: {
      "^": "ExtendableEvent;$ti",
      $isInstallEvent: 1,
      "%": "InstallEvent"
    },
    IntersectionObserver: {
      "^": "Interceptor;$ti",
      $isIntersectionObserver: 1,
      "%": ""
    },
    IntersectionObserverEntry: {
      "^": "Interceptor;$ti",
      $isIntersectionObserverEntry: 1,
      "%": ""
    },
    InterventionReport: {
      "^": "ReportBody;$ti",
      $isInterventionReport: 1,
      "%": ""
    },
    KeyboardEvent: {
      "^": "UIEvent;$ti",
      $isKeyboardEvent: 1,
      "%": "KeyboardEvent"
    },
    KeyframeEffect: {
      "^": "KeyframeEffectReadOnly;$ti",
      $isKeyframeEffect: 1,
      "%": ""
    },
    KeyframeEffectReadOnly: {
      "^": "AnimationEffectReadOnly;$ti",
      $isKeyframeEffectReadOnly: 1,
      "%": ""
    },
    LIElement: {
      "^": "HtmlElement;$ti",
      $isLIElement: 1,
      "%": ""
    },
    LabelElement: {
      "^": "HtmlElement;$ti",
      $isLabelElement: 1,
      "%": ""
    },
    LegendElement: {
      "^": "HtmlElement;$ti",
      $isLegendElement: 1,
      "%": ""
    },
    LinearAccelerationSensor: {
      "^": "Accelerometer;$ti",
      $isLinearAccelerationSensor: 1,
      "%": ""
    },
    LinkElement: {
      "^": "HtmlElement;$ti",
      $isLinkElement: 1,
      "%": ""
    },
    Location: {
      "^": "Interceptor;$ti",
      $isLocation: 1,
      $isLocationBase: 1,
      "%": ""
    },
    Magnetometer: {
      "^": "Sensor;$ti",
      $isMagnetometer: 1,
      "%": ""
    },
    MapElement: {
      "^": "HtmlElement;$ti",
      $isMapElement: 1,
      "%": ""
    },
    MediaCapabilities: {
      "^": "Interceptor;$ti",
      $isMediaCapabilities: 1,
      "%": ""
    },
    MediaCapabilitiesInfo: {
      "^": "Interceptor;$ti",
      $isMediaCapabilitiesInfo: 1,
      "%": ""
    },
    MediaDeviceInfo: {
      "^": "Interceptor;$ti",
      $isMediaDeviceInfo: 1,
      "%": ""
    },
    MediaDevices: {
      "^": "EventTarget;$ti",
      $isMediaDevices: 1,
      "%": ""
    },
    MediaElement: {
      "^": "HtmlElement;$ti",
      $isMediaElement: 1,
      "%": ""
    },
    MediaEncryptedEvent: {
      "^": "Event;$ti",
      $isMediaEncryptedEvent: 1,
      "%": "MediaEncryptedEvent"
    },
    MediaError: {
      "^": "Interceptor;$ti",
      $isMediaError: 1,
      "%": "MediaError"
    },
    MediaKeyMessageEvent: {
      "^": "Event;$ti",
      $isMediaKeyMessageEvent: 1,
      "%": "MediaKeyMessageEvent"
    },
    MediaKeySession: {
      "^": "EventTarget;$ti",
      $isMediaKeySession: 1,
      "%": ""
    },
    MediaKeyStatusMap: {
      "^": "Interceptor;$ti",
      $isMediaKeyStatusMap: 1,
      "%": ""
    },
    MediaKeySystemAccess: {
      "^": "Interceptor;$ti",
      $isMediaKeySystemAccess: 1,
      "%": ""
    },
    MediaKeys: {
      "^": "Interceptor;$ti",
      $isMediaKeys: 1,
      "%": ""
    },
    MediaKeysPolicy: {
      "^": "Interceptor;$ti",
      $isMediaKeysPolicy: 1,
      "%": ""
    },
    MediaList: {
      "^": "Interceptor;$ti",
      $isMediaList: 1,
      "%": ""
    },
    MediaMetadata: {
      "^": "Interceptor;$ti",
      $isMediaMetadata: 1,
      "%": ""
    },
    MediaQueryList: {
      "^": "EventTarget;$ti",
      $isMediaQueryList: 1,
      "%": ""
    },
    MediaQueryListEvent: {
      "^": "Event;$ti",
      $isMediaQueryListEvent: 1,
      "%": "MediaQueryListEvent"
    },
    MediaRecorder: {
      "^": "EventTarget;$ti",
      $isMediaRecorder: 1,
      "%": ""
    },
    MediaSession: {
      "^": "Interceptor;$ti",
      $isMediaSession: 1,
      "%": ""
    },
    MediaSettingsRange: {
      "^": "Interceptor;$ti",
      $isMediaSettingsRange: 1,
      "%": ""
    },
    MediaSource: {
      "^": "EventTarget;$ti",
      $isMediaSource: 1,
      "%": ""
    },
    MediaStream: {
      "^": "EventTarget;$ti",
      $isMediaStream: 1,
      "%": ""
    },
    MediaStreamEvent: {
      "^": "Event;$ti",
      $isMediaStreamEvent: 1,
      "%": "MediaStreamEvent"
    },
    MediaStreamTrack: {
      "^": "EventTarget;$ti",
      $isMediaStreamTrack: 1,
      "%": ""
    },
    MediaStreamTrackEvent: {
      "^": "Event;$ti",
      $isMediaStreamTrackEvent: 1,
      "%": "MediaStreamTrackEvent"
    },
    MemoryInfo: {
      "^": "Interceptor;$ti",
      $isMemoryInfo: 1,
      "%": ""
    },
    MenuElement: {
      "^": "HtmlElement;$ti",
      $isMenuElement: 1,
      "%": ""
    },
    MessageChannel: {
      "^": "Interceptor;$ti",
      $isMessageChannel: 1,
      "%": ""
    },
    MessageEvent: {
      "^": "Event;$ti",
      $isMessageEvent: 1,
      "%": "MessageEvent"
    },
    MessagePort: {
      "^": "EventTarget;$ti",
      $isMessagePort: 1,
      "%": ""
    },
    MetaElement: {
      "^": "HtmlElement;$ti",
      $isMetaElement: 1,
      "%": ""
    },
    Metadata: {
      "^": "Interceptor;$ti",
      $isMetadata: 1,
      "%": ""
    },
    MeterElement: {
      "^": "HtmlElement;$ti",
      $isMeterElement: 1,
      "%": ""
    },
    MidiAccess: {
      "^": "EventTarget;$ti",
      $isMidiAccess: 1,
      "%": ""
    },
    MidiConnectionEvent: {
      "^": "Event;$ti",
      $isMidiConnectionEvent: 1,
      "%": "MIDIConnectionEvent"
    },
    MidiInput: {
      "^": "MidiPort;$ti",
      $isMidiInput: 1,
      "%": ""
    },
    MidiInputMap: {
      "^": "_MidiInputMap_Interceptor_MapMixin;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      },
      $isMidiInputMap: 1,
      "%": ""
    },
    MidiMessageEvent: {
      "^": "Event;$ti",
      $isMidiMessageEvent: 1,
      "%": "MIDIMessageEvent"
    },
    MidiOutput: {
      "^": "MidiPort;$ti",
      $isMidiOutput: 1,
      "%": ""
    },
    MidiOutputMap: {
      "^": "_MidiOutputMap_Interceptor_MapMixin;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      },
      $isMidiOutputMap: 1,
      "%": ""
    },
    MidiPort: {
      "^": "EventTarget;$ti",
      $isMidiPort: 1,
      "%": ""
    },
    MimeType: {
      "^": "Interceptor;$ti",
      $isMimeType: 1,
      "%": ""
    },
    MimeTypeArray: {
      "^": "_MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.MimeType];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.MimeType];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.MimeType];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.MimeType];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.MimeType];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.MimeType];
      },
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isMimeTypeArray: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.MimeType];
      },
      "%": ""
    },
    ModElement: {
      "^": "HtmlElement;$ti",
      $isModElement: 1,
      "%": ""
    },
    MouseEvent: {
      "^": "UIEvent;$ti",
      $isMouseEvent: 1,
      "%": ";DragEvent|MouseEvent"
    },
    MutationEvent: {
      "^": "Event;$ti",
      $isMutationEvent: 1,
      "%": "MutationEvent"
    },
    MutationObserver: {
      "^": "Interceptor;$ti",
      $isMutationObserver: 1,
      "%": ""
    },
    MutationRecord: {
      "^": "Interceptor;$ti",
      $isMutationRecord: 1,
      "%": ""
    },
    NavigationPreloadManager: {
      "^": "Interceptor;$ti",
      $isNavigationPreloadManager: 1,
      "%": ""
    },
    Navigator: {
      "^": "NavigatorConcurrentHardware;$ti",
      $isNavigator: 1,
      $isNavigatorAutomationInformation: 1,
      $isNavigatorCookies: 1,
      $isNavigatorID: 1,
      $isNavigatorLanguage: 1,
      $isNavigatorOnLine: 1,
      "%": ""
    },
    NavigatorAutomationInformation: {
      "^": "Interceptor;$ti",
      $isNavigatorAutomationInformation: 1,
      "%": ""
    },
    NavigatorConcurrentHardware: {
      "^": "Interceptor;$ti",
      $isNavigatorConcurrentHardware: 1,
      "%": ""
    },
    NavigatorCookies: {
      "^": "Interceptor;$ti",
      $isNavigatorCookies: 1,
      "%": ""
    },
    NavigatorID: {
      "^": "Interceptor;$ti"
    },
    NavigatorLanguage: {
      "^": "Interceptor;$ti"
    },
    NavigatorOnLine: {
      "^": "Interceptor;$ti"
    },
    NavigatorUserMediaError: {
      "^": "Interceptor;$ti",
      $isNavigatorUserMediaError: 1,
      "%": "NavigatorUserMediaError"
    },
    NetworkInformation: {
      "^": "EventTarget;$ti",
      $isNetworkInformation: 1,
      "%": ""
    },
    _ChildNodeListLazy: {
      "^": "ListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $asListBase: function() {
        return [W.Node];
      },
      $asListMixin: function() {
        return [W.Node];
      },
      $asIterable: function() {
        return [W.Node];
      },
      $asList: function() {
        return [W.Node];
      },
      $isNodeListWrapper: 1,
      $as_ListBase_Object_ListMixin: function() {
        return [W.Node];
      }
    },
    Node: {
      "^": "EventTarget;$ti",
      toString$0: function(receiver) {
        var value = receiver.nodeValue;
        return value == null ? this.super$Interceptor$toString(receiver) : value;
      },
      $isNode: 1,
      "%": ";Node"
    },
    NodeFilter: {
      "^": "Interceptor;$ti",
      $isNodeFilter: 1,
      "%": ""
    },
    NodeIterator: {
      "^": "Interceptor;$ti",
      $isNodeIterator: 1,
      "%": ""
    },
    NodeList: {
      "^": "_NodeList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.Node];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isNodeList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": ""
    },
    NonDocumentTypeChildNode: {
      "^": "Interceptor;$ti",
      $isNonDocumentTypeChildNode: 1,
      "%": ""
    },
    NonElementParentNode: {
      "^": "Interceptor;$ti",
      $isNonElementParentNode: 1,
      "%": ""
    },
    NoncedElement: {
      "^": "Interceptor;$ti",
      $isNoncedElement: 1,
      "%": ""
    },
    Notification: {
      "^": "EventTarget;$ti",
      $isNotification: 1,
      "%": ""
    },
    NotificationEvent: {
      "^": "ExtendableEvent;$ti",
      $isNotificationEvent: 1,
      "%": "NotificationEvent"
    },
    OListElement: {
      "^": "HtmlElement;$ti",
      $isOListElement: 1,
      "%": ""
    },
    ObjectElement: {
      "^": "HtmlElement;$ti",
      $isObjectElement: 1,
      "%": ""
    },
    OffscreenCanvas: {
      "^": "EventTarget;$ti",
      $isOffscreenCanvas: 1,
      "%": ""
    },
    OffscreenCanvasRenderingContext2D: {
      "^": "Interceptor;$ti",
      $isOffscreenCanvasRenderingContext2D: 1,
      $is_CanvasPath: 1,
      "%": ""
    },
    OptGroupElement: {
      "^": "HtmlElement;$ti",
      $isOptGroupElement: 1,
      "%": ""
    },
    OptionElement: {
      "^": "HtmlElement;$ti",
      $isOptionElement: 1,
      "%": ""
    },
    OrientationSensor: {
      "^": "Sensor;$ti",
      $isOrientationSensor: 1,
      "%": ""
    },
    OutputElement: {
      "^": "HtmlElement;$ti",
      $isOutputElement: 1,
      "%": ""
    },
    OverconstrainedError: {
      "^": "Interceptor;$ti",
      $isOverconstrainedError: 1,
      "%": "OverconstrainedError"
    },
    PageTransitionEvent: {
      "^": "Event;$ti",
      $isPageTransitionEvent: 1,
      "%": "PageTransitionEvent"
    },
    PaintRenderingContext2D: {
      "^": "Interceptor;$ti",
      $isPaintRenderingContext2D: 1,
      $is_CanvasPath: 1,
      "%": ""
    },
    PaintSize: {
      "^": "Interceptor;$ti",
      $isPaintSize: 1,
      "%": ""
    },
    PaintWorkletGlobalScope: {
      "^": "WorkletGlobalScope;$ti",
      $isPaintWorkletGlobalScope: 1,
      "%": ""
    },
    ParagraphElement: {
      "^": "HtmlElement;$ti",
      $isParagraphElement: 1,
      "%": ""
    },
    ParamElement: {
      "^": "HtmlElement;$ti",
      $isParamElement: 1,
      "%": ""
    },
    ParentNode: {
      "^": "Interceptor;$ti"
    },
    PasswordCredential: {
      "^": "Credential;$ti",
      $isCredentialUserData: 1,
      $isPasswordCredential: 1,
      "%": ""
    },
    Path2D: {
      "^": "Interceptor;$ti",
      $isPath2D: 1,
      $is_CanvasPath: 1,
      "%": ""
    },
    PaymentAddress: {
      "^": "Interceptor;$ti",
      $isPaymentAddress: 1,
      "%": ""
    },
    PaymentInstruments: {
      "^": "Interceptor;$ti",
      $isPaymentInstruments: 1,
      "%": ""
    },
    PaymentManager: {
      "^": "Interceptor;$ti",
      $isPaymentManager: 1,
      "%": ""
    },
    PaymentRequest: {
      "^": "EventTarget;$ti",
      $isPaymentRequest: 1,
      "%": ""
    },
    PaymentRequestEvent: {
      "^": "ExtendableEvent;$ti",
      $isPaymentRequestEvent: 1,
      "%": "PaymentRequestEvent"
    },
    PaymentRequestUpdateEvent: {
      "^": "Event;$ti",
      $isPaymentRequestUpdateEvent: 1,
      "%": "PaymentRequestUpdateEvent"
    },
    PaymentResponse: {
      "^": "Interceptor;$ti",
      $isPaymentResponse: 1,
      "%": ""
    },
    Performance: {
      "^": "EventTarget;$ti",
      $isPerformance: 1,
      "%": ""
    },
    PerformanceEntry: {
      "^": "Interceptor;$ti",
      $isPerformanceEntry: 1,
      "%": ""
    },
    PerformanceLongTaskTiming: {
      "^": "PerformanceEntry;$ti",
      $isPerformanceLongTaskTiming: 1,
      "%": ""
    },
    PerformanceMark: {
      "^": "PerformanceEntry;$ti",
      $isPerformanceMark: 1,
      "%": ""
    },
    PerformanceMeasure: {
      "^": "PerformanceEntry;$ti",
      $isPerformanceMeasure: 1,
      "%": ""
    },
    PerformanceNavigation: {
      "^": "Interceptor;$ti",
      $isPerformanceNavigation: 1,
      "%": ""
    },
    PerformanceNavigationTiming: {
      "^": "PerformanceResourceTiming;$ti",
      $isPerformanceNavigationTiming: 1,
      "%": ""
    },
    PerformanceObserver: {
      "^": "Interceptor;$ti",
      $isPerformanceObserver: 1,
      "%": ""
    },
    PerformanceObserverEntryList: {
      "^": "Interceptor;$ti",
      $isPerformanceObserverEntryList: 1,
      "%": ""
    },
    PerformancePaintTiming: {
      "^": "PerformanceEntry;$ti",
      $isPerformancePaintTiming: 1,
      "%": ""
    },
    PerformanceResourceTiming: {
      "^": "PerformanceEntry;$ti",
      $isPerformanceResourceTiming: 1,
      "%": ""
    },
    PerformanceServerTiming: {
      "^": "Interceptor;$ti",
      $isPerformanceServerTiming: 1,
      "%": ""
    },
    PerformanceTiming: {
      "^": "Interceptor;$ti",
      $isPerformanceTiming: 1,
      "%": ""
    },
    PermissionStatus: {
      "^": "EventTarget;$ti",
      $isPermissionStatus: 1,
      "%": ""
    },
    Permissions: {
      "^": "Interceptor;$ti",
      $isPermissions: 1,
      "%": ""
    },
    PhotoCapabilities: {
      "^": "Interceptor;$ti",
      $isPhotoCapabilities: 1,
      "%": ""
    },
    PictureElement: {
      "^": "HtmlElement;$ti",
      $isPictureElement: 1,
      "%": ""
    },
    Plugin: {
      "^": "Interceptor;$ti",
      $isPlugin: 1,
      "%": ""
    },
    PluginArray: {
      "^": "_PluginArray_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Plugin];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.Plugin];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Plugin];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Plugin];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Plugin];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Plugin];
      },
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isPluginArray: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Plugin];
      },
      "%": ""
    },
    PointerEvent: {
      "^": "MouseEvent;$ti",
      $isPointerEvent: 1,
      "%": "PointerEvent"
    },
    PopStateEvent: {
      "^": "Event;$ti",
      $isPopStateEvent: 1,
      "%": "PopStateEvent"
    },
    PositionError: {
      "^": "Interceptor;$ti",
      $isPositionError: 1,
      "%": "PositionError"
    },
    PreElement: {
      "^": "HtmlElement;$ti",
      $isPreElement: 1,
      "%": ""
    },
    Presentation: {
      "^": "Interceptor;$ti",
      $isPresentation: 1,
      "%": ""
    },
    PresentationAvailability: {
      "^": "EventTarget;$ti",
      $isPresentationAvailability: 1,
      "%": ""
    },
    PresentationConnection: {
      "^": "EventTarget;$ti",
      $isPresentationConnection: 1,
      "%": ""
    },
    PresentationConnectionAvailableEvent: {
      "^": "Event;$ti",
      $isPresentationConnectionAvailableEvent: 1,
      "%": "PresentationConnectionAvailableEvent"
    },
    PresentationConnectionCloseEvent: {
      "^": "Event;$ti",
      $isPresentationConnectionCloseEvent: 1,
      "%": "PresentationConnectionCloseEvent"
    },
    PresentationConnectionList: {
      "^": "EventTarget;$ti",
      $isPresentationConnectionList: 1,
      "%": ""
    },
    PresentationReceiver: {
      "^": "Interceptor;$ti",
      $isPresentationReceiver: 1,
      "%": ""
    },
    PresentationRequest: {
      "^": "EventTarget;$ti",
      $isPresentationRequest: 1,
      "%": ""
    },
    ProcessingInstruction: {
      "^": "CharacterData;$ti",
      $isProcessingInstruction: 1,
      "%": ""
    },
    ProgressElement: {
      "^": "HtmlElement;$ti",
      $isProgressElement: 1,
      "%": ""
    },
    ProgressEvent: {
      "^": "Event;$ti",
      $isProgressEvent: 1,
      "%": ";ProgressEvent"
    },
    PromiseRejectionEvent: {
      "^": "Event;$ti",
      $isPromiseRejectionEvent: 1,
      "%": "PromiseRejectionEvent"
    },
    PublicKeyCredential: {
      "^": "Credential;$ti",
      $isPublicKeyCredential: 1,
      "%": ""
    },
    PushEvent: {
      "^": "ExtendableEvent;$ti",
      $isPushEvent: 1,
      "%": "PushEvent"
    },
    PushManager: {
      "^": "Interceptor;$ti",
      $isPushManager: 1,
      "%": ""
    },
    PushMessageData: {
      "^": "Interceptor;$ti",
      $isPushMessageData: 1,
      "%": ""
    },
    PushSubscription: {
      "^": "Interceptor;$ti",
      $isPushSubscription: 1,
      "%": ""
    },
    PushSubscriptionOptions: {
      "^": "Interceptor;$ti",
      $isPushSubscriptionOptions: 1,
      "%": ""
    },
    QuoteElement: {
      "^": "HtmlElement;$ti",
      $isQuoteElement: 1,
      "%": ""
    },
    Range: {
      "^": "Interceptor;$ti",
      $isRange: 1,
      "%": ""
    },
    RelatedApplication: {
      "^": "Interceptor;$ti",
      $isRelatedApplication: 1,
      "%": ""
    },
    RelativeOrientationSensor: {
      "^": "OrientationSensor;$ti",
      $isRelativeOrientationSensor: 1,
      "%": ""
    },
    RemotePlayback: {
      "^": "EventTarget;$ti",
      $isRemotePlayback: 1,
      "%": ""
    },
    ReportBody: {
      "^": "Interceptor;$ti",
      $isReportBody: 1,
      "%": ""
    },
    ReportingObserver: {
      "^": "Interceptor;$ti",
      $isReportingObserver: 1,
      "%": ""
    },
    ResizeObserver: {
      "^": "Interceptor;$ti",
      $isResizeObserver: 1,
      "%": ""
    },
    ResizeObserverEntry: {
      "^": "Interceptor;$ti",
      $isResizeObserverEntry: 1,
      "%": ""
    },
    RtcCertificate: {
      "^": "Interceptor;$ti",
      $isRtcCertificate: 1,
      "%": ""
    },
    RtcDataChannel: {
      "^": "EventTarget;$ti",
      $isRtcDataChannel: 1,
      "%": ""
    },
    RtcDataChannelEvent: {
      "^": "Event;$ti",
      $isRtcDataChannelEvent: 1,
      "%": "RTCDataChannelEvent"
    },
    RtcDtmfSender: {
      "^": "EventTarget;$ti",
      $isRtcDtmfSender: 1,
      "%": ""
    },
    RtcDtmfToneChangeEvent: {
      "^": "Event;$ti",
      $isRtcDtmfToneChangeEvent: 1,
      "%": "RTCDTMFToneChangeEvent"
    },
    RtcIceCandidate: {
      "^": "Interceptor;$ti",
      $isRtcIceCandidate: 1,
      "%": ""
    },
    RtcLegacyStatsReport: {
      "^": "Interceptor;$ti",
      $isRtcLegacyStatsReport: 1,
      "%": ""
    },
    RtcPeerConnection: {
      "^": "EventTarget;$ti",
      $isRtcPeerConnection: 1,
      "%": ""
    },
    RtcPeerConnectionIceEvent: {
      "^": "Event;$ti",
      $isRtcPeerConnectionIceEvent: 1,
      "%": "RTCPeerConnectionIceEvent"
    },
    RtcRtpContributingSource: {
      "^": "Interceptor;$ti",
      $isRtcRtpContributingSource: 1,
      "%": ""
    },
    RtcRtpReceiver: {
      "^": "Interceptor;$ti",
      $isRtcRtpReceiver: 1,
      "%": ""
    },
    RtcRtpSender: {
      "^": "Interceptor;$ti",
      $isRtcRtpSender: 1,
      "%": ""
    },
    RtcSessionDescription: {
      "^": "Interceptor;$ti",
      $isRtcSessionDescription: 1,
      "%": ""
    },
    RtcStatsReport: {
      "^": "_RtcStatsReport_Interceptor_MapMixin;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      },
      $isRtcStatsReport: 1,
      "%": ""
    },
    RtcStatsResponse: {
      "^": "Interceptor;$ti",
      $isRtcStatsResponse: 1,
      "%": ""
    },
    RtcTrackEvent: {
      "^": "Event;$ti",
      $isRtcTrackEvent: 1,
      "%": "RTCTrackEvent"
    },
    Screen: {
      "^": "Interceptor;$ti",
      $isScreen: 1,
      "%": ""
    },
    ScreenOrientation: {
      "^": "EventTarget;$ti",
      $isScreenOrientation: 1,
      "%": ""
    },
    ScriptElement: {
      "^": "HtmlElement;$ti",
      $isScriptElement: 1,
      "%": ""
    },
    ScrollState: {
      "^": "Interceptor;$ti",
      $isScrollState: 1,
      "%": ""
    },
    ScrollTimeline: {
      "^": "AnimationTimeline;$ti",
      $isScrollTimeline: 1,
      "%": ""
    },
    SecurityPolicyViolationEvent: {
      "^": "Event;$ti",
      $isSecurityPolicyViolationEvent: 1,
      "%": "SecurityPolicyViolationEvent"
    },
    SelectElement: {
      "^": "HtmlElement;$ti",
      $isSelectElement: 1,
      "%": ""
    },
    Selection: {
      "^": "Interceptor;$ti",
      $isSelection: 1,
      "%": ""
    },
    Sensor: {
      "^": "EventTarget;$ti",
      $isSensor: 1,
      "%": ""
    },
    SensorErrorEvent: {
      "^": "Event;$ti",
      $isSensorErrorEvent: 1,
      "%": "SensorErrorEvent"
    },
    ServiceWorker: {
      "^": "EventTarget;$ti",
      $isAbstractWorker: 1,
      $isServiceWorker: 1,
      "%": ""
    },
    ServiceWorkerContainer: {
      "^": "EventTarget;$ti",
      $isServiceWorkerContainer: 1,
      "%": ""
    },
    ServiceWorkerGlobalScope: {
      "^": "WorkerGlobalScope;$ti",
      $isServiceWorkerGlobalScope: 1,
      "%": ""
    },
    ServiceWorkerRegistration: {
      "^": "EventTarget;$ti",
      $isServiceWorkerRegistration: 1,
      "%": ""
    },
    ShadowElement: {
      "^": "HtmlElement;$ti",
      $isShadowElement: 1,
      "%": ""
    },
    ShadowRoot: {
      "^": "DocumentFragment;$ti",
      $isDocumentOrShadowRoot: 1,
      $isShadowRoot: 1,
      "%": ""
    },
    SharedArrayBuffer: {
      "^": "Interceptor;$ti",
      $isSharedArrayBuffer: 1,
      "%": ""
    },
    SharedWorker: {
      "^": "EventTarget;$ti",
      $isAbstractWorker: 1,
      $isSharedWorker: 1,
      "%": ""
    },
    SharedWorkerGlobalScope: {
      "^": "WorkerGlobalScope;$ti",
      $isSharedWorkerGlobalScope: 1,
      "%": ""
    },
    SlotElement: {
      "^": "HtmlElement;$ti",
      $isSlotElement: 1,
      "%": ""
    },
    SourceBuffer: {
      "^": "EventTarget;$ti",
      $isSourceBuffer: 1,
      "%": ""
    },
    SourceBufferList: {
      "^": "_SourceBufferList_EventTarget_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SourceBuffer];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.SourceBuffer];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SourceBuffer];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SourceBuffer];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SourceBuffer];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SourceBuffer];
      },
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isSourceBufferList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.SourceBuffer];
      },
      "%": ""
    },
    SourceElement: {
      "^": "HtmlElement;$ti",
      $isSourceElement: 1,
      "%": ""
    },
    SpanElement: {
      "^": "HtmlElement;$ti",
      $isSpanElement: 1,
      "%": ""
    },
    SpeechGrammar: {
      "^": "Interceptor;$ti",
      $isSpeechGrammar: 1,
      "%": ""
    },
    SpeechGrammarList: {
      "^": "_SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SpeechGrammar];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.SpeechGrammar];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SpeechGrammar];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SpeechGrammar];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SpeechGrammar];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechGrammar];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isSpeechGrammarList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.SpeechGrammar];
      },
      "%": ""
    },
    SpeechRecognition: {
      "^": "EventTarget;$ti",
      $isSpeechRecognition: 1,
      "%": ""
    },
    SpeechRecognitionAlternative: {
      "^": "Interceptor;$ti",
      $isSpeechRecognitionAlternative: 1,
      "%": ""
    },
    SpeechRecognitionError: {
      "^": "Event;$ti",
      $isSpeechRecognitionError: 1,
      "%": "SpeechRecognitionError"
    },
    SpeechRecognitionEvent: {
      "^": "Event;$ti",
      $isSpeechRecognitionEvent: 1,
      "%": "SpeechRecognitionEvent"
    },
    SpeechRecognitionResult: {
      "^": "Interceptor;$ti",
      $isSpeechRecognitionResult: 1,
      "%": ""
    },
    SpeechSynthesis: {
      "^": "EventTarget;$ti",
      $isSpeechSynthesis: 1,
      "%": ""
    },
    SpeechSynthesisEvent: {
      "^": "Event;$ti",
      $isSpeechSynthesisEvent: 1,
      "%": "SpeechSynthesisEvent"
    },
    SpeechSynthesisUtterance: {
      "^": "EventTarget;$ti",
      $isSpeechSynthesisUtterance: 1,
      "%": ""
    },
    SpeechSynthesisVoice: {
      "^": "Interceptor;$ti",
      $isSpeechSynthesisVoice: 1,
      "%": ""
    },
    StaticRange: {
      "^": "Interceptor;$ti",
      $isStaticRange: 1,
      "%": ""
    },
    Storage: {
      "^": "_Storage_Interceptor_MapMixin;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      },
      $isStorage: 1,
      "%": ""
    },
    StorageEvent: {
      "^": "Event;$ti",
      $isStorageEvent: 1,
      "%": "StorageEvent"
    },
    StorageManager: {
      "^": "Interceptor;$ti",
      $isStorageManager: 1,
      "%": ""
    },
    StyleElement: {
      "^": "HtmlElement;$ti",
      $isStyleElement: 1,
      "%": ""
    },
    StyleMedia: {
      "^": "Interceptor;$ti",
      $isStyleMedia: 1,
      "%": ""
    },
    StylePropertyMap: {
      "^": "StylePropertyMapReadonly;$ti",
      $isStylePropertyMap: 1,
      "%": ""
    },
    StylePropertyMapReadonly: {
      "^": "Interceptor;$ti",
      $isStylePropertyMapReadonly: 1,
      "%": ""
    },
    StyleSheet: {
      "^": "Interceptor;$ti",
      $isStyleSheet: 1,
      "%": ""
    },
    SyncEvent: {
      "^": "ExtendableEvent;$ti",
      $isSyncEvent: 1,
      "%": "SyncEvent"
    },
    SyncManager: {
      "^": "Interceptor;$ti",
      $isSyncManager: 1,
      "%": ""
    },
    TableCaptionElement: {
      "^": "HtmlElement;$ti",
      $isTableCaptionElement: 1,
      "%": ""
    },
    TableCellElement: {
      "^": "HtmlElement;$ti",
      $isTableCellElement: 1,
      "%": ""
    },
    TableColElement: {
      "^": "HtmlElement;$ti",
      $isTableColElement: 1,
      "%": ""
    },
    TableElement: {
      "^": "HtmlElement;$ti",
      $isTableElement: 1,
      "%": ""
    },
    TableRowElement: {
      "^": "HtmlElement;$ti",
      $isTableRowElement: 1,
      "%": ""
    },
    TableSectionElement: {
      "^": "HtmlElement;$ti",
      $isTableSectionElement: 1,
      "%": ""
    },
    TaskAttributionTiming: {
      "^": "PerformanceEntry;$ti",
      $isTaskAttributionTiming: 1,
      "%": ""
    },
    TemplateElement: {
      "^": "HtmlElement;$ti",
      $isTemplateElement: 1,
      "%": ""
    },
    Text: {
      "^": "CharacterData;$ti",
      $isText: 1,
      "%": ""
    },
    TextAreaElement: {
      "^": "HtmlElement;$ti",
      $isTextAreaElement: 1,
      "%": ""
    },
    TextDetector: {
      "^": "Interceptor;$ti",
      $isTextDetector: 1,
      "%": ""
    },
    TextEvent: {
      "^": "UIEvent;$ti",
      $isTextEvent: 1,
      "%": "TextEvent"
    },
    TextMetrics: {
      "^": "Interceptor;$ti",
      $isTextMetrics: 1,
      "%": ""
    },
    TextTrack: {
      "^": "EventTarget;$ti",
      $isTextTrack: 1,
      "%": ""
    },
    TextTrackCue: {
      "^": "EventTarget;$ti",
      $isTextTrackCue: 1,
      "%": ""
    },
    TextTrackCueList: {
      "^": "_TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.TextTrackCue];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.TextTrackCue];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.TextTrackCue];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.TextTrackCue];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.TextTrackCue];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrackCue];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isTextTrackCueList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.TextTrackCue];
      },
      "%": ""
    },
    TextTrackList: {
      "^": "_TextTrackList_EventTarget_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.TextTrack];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.TextTrack];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.TextTrack];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.TextTrack];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.TextTrack];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrack];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isTextTrackList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.TextTrack];
      },
      "%": ""
    },
    TimeElement: {
      "^": "HtmlElement;$ti",
      $isTimeElement: 1,
      "%": ""
    },
    TimeRanges: {
      "^": "Interceptor;$ti",
      $isTimeRanges: 1,
      "%": ""
    },
    TitleElement: {
      "^": "HtmlElement;$ti",
      $isTitleElement: 1,
      "%": ""
    },
    Touch: {
      "^": "Interceptor;$ti",
      $isTouch: 1,
      "%": ""
    },
    TouchEvent: {
      "^": "UIEvent;$ti",
      $isTouchEvent: 1,
      "%": "TouchEvent"
    },
    TouchList: {
      "^": "_TouchList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Touch];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.Touch];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Touch];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Touch];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Touch];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Touch];
      },
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isTouchList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Touch];
      },
      "%": ""
    },
    TrackDefault: {
      "^": "Interceptor;$ti",
      $isTrackDefault: 1,
      "%": ""
    },
    TrackDefaultList: {
      "^": "Interceptor;$ti",
      $isTrackDefaultList: 1,
      "%": ""
    },
    TrackElement: {
      "^": "HtmlElement;$ti",
      $isTrackElement: 1,
      "%": ""
    },
    TrackEvent: {
      "^": "Event;$ti",
      $isTrackEvent: 1,
      "%": "TrackEvent"
    },
    TransitionEvent: {
      "^": "Event;$ti",
      $isTransitionEvent: 1,
      "%": "TransitionEvent|WebKitTransitionEvent"
    },
    TreeWalker: {
      "^": "Interceptor;$ti",
      $isTreeWalker: 1,
      "%": ""
    },
    TrustedHtml: {
      "^": "Interceptor;$ti",
      $isTrustedHtml: 1,
      "%": ""
    },
    TrustedScriptUrl: {
      "^": "Interceptor;$ti",
      $isTrustedScriptUrl: 1,
      "%": ""
    },
    TrustedUrl: {
      "^": "Interceptor;$ti",
      $isTrustedUrl: 1,
      "%": ""
    },
    UIEvent: {
      "^": "Event;$ti",
      $isUIEvent: 1,
      "%": ";UIEvent"
    },
    UListElement: {
      "^": "HtmlElement;$ti",
      $isUListElement: 1,
      "%": ""
    },
    UnderlyingSourceBase: {
      "^": "Interceptor;$ti",
      $isUnderlyingSourceBase: 1,
      "%": ""
    },
    UnknownElement: {
      "^": "HtmlElement;$ti",
      $isUnknownElement: 1,
      "%": ""
    },
    Url: {
      "^": "Interceptor;$ti",
      $isUrl: 1,
      "%": ""
    },
    UrlSearchParams: {
      "^": "Interceptor;$ti",
      $isUrlSearchParams: 1,
      "%": ""
    },
    UrlUtilsReadOnly: {
      "^": "Interceptor;$ti"
    },
    VR: {
      "^": "EventTarget;$ti",
      $isVR: 1,
      "%": ""
    },
    VRCoordinateSystem: {
      "^": "Interceptor;$ti",
      $isVRCoordinateSystem: 1,
      "%": ""
    },
    VRDevice: {
      "^": "EventTarget;$ti",
      $isVRDevice: 1,
      "%": ""
    },
    VRDeviceEvent: {
      "^": "Event;$ti",
      $isVRDeviceEvent: 1,
      "%": "VRDeviceEvent"
    },
    VRDisplay: {
      "^": "EventTarget;$ti",
      $isVRDisplay: 1,
      "%": ""
    },
    VRDisplayCapabilities: {
      "^": "Interceptor;$ti",
      $isVRDisplayCapabilities: 1,
      "%": ""
    },
    VRDisplayEvent: {
      "^": "Event;$ti",
      $isVRDisplayEvent: 1,
      "%": "VRDisplayEvent"
    },
    VREyeParameters: {
      "^": "Interceptor;$ti",
      $isVREyeParameters: 1,
      "%": ""
    },
    VRFrameData: {
      "^": "Interceptor;$ti",
      $isVRFrameData: 1,
      "%": ""
    },
    VRFrameOfReference: {
      "^": "VRCoordinateSystem;$ti",
      $isVRFrameOfReference: 1,
      "%": ""
    },
    VRPose: {
      "^": "Interceptor;$ti",
      $isVRPose: 1,
      "%": ""
    },
    VRSession: {
      "^": "EventTarget;$ti",
      $isVRSession: 1,
      "%": ""
    },
    VRSessionEvent: {
      "^": "Event;$ti",
      $isVRSessionEvent: 1,
      "%": "VRSessionEvent"
    },
    VRStageBounds: {
      "^": "Interceptor;$ti",
      $isVRStageBounds: 1,
      "%": ""
    },
    VRStageBoundsPoint: {
      "^": "Interceptor;$ti",
      $isVRStageBoundsPoint: 1,
      "%": ""
    },
    VRStageParameters: {
      "^": "Interceptor;$ti",
      $isVRStageParameters: 1,
      "%": ""
    },
    ValidityState: {
      "^": "Interceptor;$ti",
      $isValidityState: 1,
      "%": ""
    },
    VideoElement: {
      "^": "MediaElement;$ti",
      $isVideoElement: 1,
      $isCanvasImageSource: 1,
      "%": ""
    },
    VideoPlaybackQuality: {
      "^": "Interceptor;$ti",
      $isVideoPlaybackQuality: 1,
      "%": ""
    },
    VideoTrack: {
      "^": "Interceptor;$ti",
      $isVideoTrack: 1,
      "%": ""
    },
    VideoTrackList: {
      "^": "EventTarget;$ti",
      $isVideoTrackList: 1,
      "%": ""
    },
    VisualViewport: {
      "^": "EventTarget;$ti",
      $isVisualViewport: 1,
      "%": ""
    },
    VttCue: {
      "^": "TextTrackCue;$ti",
      $isVttCue: 1,
      "%": ""
    },
    VttRegion: {
      "^": "Interceptor;$ti",
      $isVttRegion: 1,
      "%": ""
    },
    WebSocket0: {
      "^": "EventTarget;$ti",
      $isWebSocket0: 1,
      "%": ""
    },
    WheelEvent: {
      "^": "MouseEvent;$ti",
      $isWheelEvent: 1,
      "%": "WheelEvent"
    },
    Window: {
      "^": "EventTarget;$ti",
      $isGlobalEventHandlers: 1,
      $isWindow: 1,
      $isWindowBase64: 1,
      $isWindowEventHandlers: 1,
      $is_WindowTimers: 1,
      $isWindowBase: 1,
      "%": ""
    },
    _BeforeUnloadEvent: {
      "^": "_WrappedEvent;$ti",
      $isBeforeUnloadEvent: 1
    },
    _BeforeUnloadEventStreamProvider: {
      "^": "Object;$ti",
      $isEventStreamProvider: 1,
      $asEventStreamProvider: function() {
        return [W.BeforeUnloadEvent];
      }
    },
    WindowBase64: {
      "^": "Interceptor;$ti"
    },
    WindowClient: {
      "^": "Client;$ti",
      $isWindowClient: 1,
      "%": ""
    },
    WindowEventHandlers: {
      "^": "EventTarget;$ti"
    },
    Worker: {
      "^": "EventTarget;$ti",
      $isAbstractWorker: 1,
      $isWorker: 1,
      "%": ""
    },
    WorkerGlobalScope: {
      "^": "EventTarget;$ti",
      $isWindowBase64: 1,
      $isWorkerGlobalScope: 1,
      $is_WindowTimers: 1,
      "%": ""
    },
    WorkerPerformance: {
      "^": "EventTarget;$ti",
      $isWorkerPerformance: 1,
      "%": ""
    },
    WorkletAnimation: {
      "^": "Interceptor;$ti",
      $isWorkletAnimation: 1,
      "%": ""
    },
    WorkletGlobalScope: {
      "^": "Interceptor;$ti",
      $isWorkletGlobalScope: 1,
      "%": ""
    },
    XPathEvaluator: {
      "^": "Interceptor;$ti",
      $isXPathEvaluator: 1,
      "%": ""
    },
    XPathExpression: {
      "^": "Interceptor;$ti",
      $isXPathExpression: 1,
      "%": ""
    },
    XPathNSResolver: {
      "^": "Interceptor;$ti",
      $isXPathNSResolver: 1,
      "%": ""
    },
    XPathResult: {
      "^": "Interceptor;$ti",
      $isXPathResult: 1,
      "%": ""
    },
    XmlDocument: {
      "^": "Document;$ti",
      $isXmlDocument: 1,
      "%": ""
    },
    XmlSerializer: {
      "^": "Interceptor;$ti",
      $isXmlSerializer: 1,
      "%": ""
    },
    XsltProcessor: {
      "^": "Interceptor;$ti",
      $isXsltProcessor: 1,
      "%": ""
    },
    _Attr: {
      "^": "Node;$ti",
      $is_Attr: 1,
      "%": ""
    },
    _Bluetooth: {
      "^": "Interceptor;$ti",
      $is_Bluetooth: 1,
      "%": ""
    },
    _BluetoothCharacteristicProperties: {
      "^": "Interceptor;$ti",
      $is_BluetoothCharacteristicProperties: 1,
      "%": ""
    },
    _BluetoothDevice: {
      "^": "EventTarget;$ti",
      $is_BluetoothDevice: 1,
      "%": ""
    },
    _BluetoothRemoteGATTCharacteristic: {
      "^": "EventTarget;$ti",
      $is_BluetoothRemoteGATTCharacteristic: 1,
      "%": ""
    },
    _BluetoothRemoteGATTServer: {
      "^": "Interceptor;$ti",
      $is_BluetoothRemoteGATTServer: 1,
      "%": ""
    },
    _BluetoothRemoteGATTService: {
      "^": "Interceptor;$ti",
      $is_BluetoothRemoteGATTService: 1,
      "%": ""
    },
    _BluetoothUUID: {
      "^": "Interceptor;$ti",
      $is_BluetoothUUID: 1,
      "%": ""
    },
    _BudgetService: {
      "^": "Interceptor;$ti",
      $is_BudgetService: 1,
      "%": ""
    },
    _Cache: {
      "^": "Interceptor;$ti",
      $is_Cache: 1,
      "%": ""
    },
    _CanvasPath: {
      "^": "Interceptor;$ti"
    },
    _Clipboard: {
      "^": "EventTarget;$ti",
      $is_Clipboard: 1,
      "%": ""
    },
    _CssRuleList: {
      "^": "__CssRuleList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.CssRule];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.CssRule];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.CssRule];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.CssRule];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.CssRule];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.CssRule];
      },
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $is_CssRuleList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.CssRule];
      },
      "%": ""
    },
    _DOMFileSystemSync: {
      "^": "Interceptor;$ti",
      $is_DOMFileSystemSync: 1,
      "%": ""
    },
    _DirectoryEntrySync: {
      "^": "_EntrySync;$ti",
      $is_DirectoryEntrySync: 1,
      "%": ""
    },
    _DirectoryReaderSync: {
      "^": "Interceptor;$ti",
      $is_DirectoryReaderSync: 1,
      "%": ""
    },
    _DocumentType: {
      "^": "Node;$ti",
      $isChildNode: 1,
      $is_DocumentType: 1,
      "%": ""
    },
    _DomRect: {
      "^": "DomRectReadOnly;$ti",
      $is_DomRect: 1,
      "%": ""
    },
    _JenkinsSmiHash: {
      "^": "Object;$ti"
    },
    _EntrySync: {
      "^": "Interceptor;$ti",
      $is_EntrySync: 1,
      "%": ""
    },
    _FileEntrySync: {
      "^": "_EntrySync;$ti",
      $is_FileEntrySync: 1,
      "%": ""
    },
    _FileReaderSync: {
      "^": "Interceptor;$ti",
      $is_FileReaderSync: 1,
      "%": ""
    },
    _FileWriterSync: {
      "^": "Interceptor;$ti",
      $is_FileWriterSync: 1,
      "%": ""
    },
    _GamepadList: {
      "^": "__GamepadList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Gamepad];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.Gamepad];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Gamepad];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Gamepad];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Gamepad];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Gamepad];
      },
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $is_GamepadList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Gamepad];
      },
      "%": ""
    },
    _HTMLAllCollection: {
      "^": "Interceptor;$ti",
      $is_HTMLAllCollection: 1,
      "%": ""
    },
    _HTMLDirectoryElement: {
      "^": "HtmlElement;$ti",
      $is_HTMLDirectoryElement: 1,
      "%": ""
    },
    _HTMLFontElement: {
      "^": "HtmlElement;$ti",
      $is_HTMLFontElement: 1,
      "%": ""
    },
    _HTMLFrameElement: {
      "^": "HtmlElement;$ti",
      $is_HTMLFrameElement: 1,
      "%": ""
    },
    _HTMLFrameSetElement: {
      "^": "HtmlElement;$ti",
      $isWindowEventHandlers: 1,
      $is_HTMLFrameSetElement: 1,
      "%": ""
    },
    _HTMLMarqueeElement: {
      "^": "HtmlElement;$ti",
      $is_HTMLMarqueeElement: 1,
      "%": ""
    },
    _Mojo: {
      "^": "Interceptor;$ti",
      $is_Mojo: 1,
      "%": ""
    },
    _MojoHandle: {
      "^": "Interceptor;$ti",
      $is_MojoHandle: 1,
      "%": ""
    },
    _MojoInterfaceInterceptor: {
      "^": "EventTarget;$ti",
      $is_MojoInterfaceInterceptor: 1,
      "%": ""
    },
    _MojoInterfaceRequestEvent: {
      "^": "Event;$ti",
      $is_MojoInterfaceRequestEvent: 1,
      "%": "MojoInterfaceRequestEvent"
    },
    _MojoWatcher: {
      "^": "Interceptor;$ti",
      $is_MojoWatcher: 1,
      "%": ""
    },
    _NFC: {
      "^": "Interceptor;$ti",
      $is_NFC: 1,
      "%": ""
    },
    _NamedNodeMap: {
      "^": "__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.Node];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.Node];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $is_NamedNodeMap: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Node];
      },
      "%": ""
    },
    _PagePopupController: {
      "^": "Interceptor;$ti",
      $is_PagePopupController: 1,
      "%": ""
    },
    _Report: {
      "^": "Interceptor;$ti",
      $is_Report: 1,
      "%": ""
    },
    _Request: {
      "^": "Body;$ti",
      $is_Request: 1,
      "%": ""
    },
    _ResourceProgressEvent: {
      "^": "ProgressEvent;$ti",
      $is_ResourceProgressEvent: 1,
      "%": "ResourceProgressEvent"
    },
    _Response: {
      "^": "Body;$ti",
      $is_Response: 1,
      "%": ""
    },
    _SpeechRecognitionResultList: {
      "^": "__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.SpeechRecognitionResult];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SpeechRecognitionResult];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $is_SpeechRecognitionResultList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.SpeechRecognitionResult];
      },
      "%": ""
    },
    _StyleSheetList: {
      "^": "__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isJSIndexable: 1,
      $asJSIndexable: function() {
        return [W.StyleSheet];
      },
      $isJSMutableIndexable: 1,
      $asJSMutableIndexable: function() {
        return [W.StyleSheet];
      },
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.StyleSheet];
      },
      $isJavaScriptIndexingBehavior: 1,
      $asJavaScriptIndexingBehavior: function() {
        return [W.StyleSheet];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.StyleSheet];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.StyleSheet];
      },
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $is_StyleSheetList: 1,
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.StyleSheet];
      },
      "%": ""
    },
    _SubtleCrypto: {
      "^": "Interceptor;$ti",
      $is_SubtleCrypto: 1,
      "%": ""
    },
    _USB: {
      "^": "EventTarget;$ti",
      $is_USB: 1,
      "%": ""
    },
    _USBAlternateInterface: {
      "^": "Interceptor;$ti",
      $is_USBAlternateInterface: 1,
      "%": ""
    },
    _USBConfiguration: {
      "^": "Interceptor;$ti",
      $is_USBConfiguration: 1,
      "%": ""
    },
    _USBConnectionEvent: {
      "^": "Event;$ti",
      $is_USBConnectionEvent: 1,
      "%": "USBConnectionEvent"
    },
    _USBDevice: {
      "^": "Interceptor;$ti",
      $is_USBDevice: 1,
      "%": ""
    },
    _USBEndpoint: {
      "^": "Interceptor;$ti",
      $is_USBEndpoint: 1,
      "%": ""
    },
    _USBInTransferResult: {
      "^": "Interceptor;$ti",
      $is_USBInTransferResult: 1,
      "%": ""
    },
    _USBInterface: {
      "^": "Interceptor;$ti",
      $is_USBInterface: 1,
      "%": ""
    },
    _USBIsochronousInTransferPacket: {
      "^": "Interceptor;$ti",
      $is_USBIsochronousInTransferPacket: 1,
      "%": ""
    },
    _USBIsochronousInTransferResult: {
      "^": "Interceptor;$ti",
      $is_USBIsochronousInTransferResult: 1,
      "%": ""
    },
    _USBIsochronousOutTransferPacket: {
      "^": "Interceptor;$ti",
      $is_USBIsochronousOutTransferPacket: 1,
      "%": ""
    },
    _USBIsochronousOutTransferResult: {
      "^": "Interceptor;$ti",
      $is_USBIsochronousOutTransferResult: 1,
      "%": ""
    },
    _USBOutTransferResult: {
      "^": "Interceptor;$ti",
      $is_USBOutTransferResult: 1,
      "%": ""
    },
    _WindowTimers: {
      "^": "Interceptor;$ti"
    },
    _WorkerLocation: {
      "^": "Interceptor;$ti",
      $isUrlUtilsReadOnly: 1,
      $is_WorkerLocation: 1,
      "%": ""
    },
    _WorkerNavigator: {
      "^": "NavigatorConcurrentHardware;$ti",
      $isNavigatorID: 1,
      $isNavigatorOnLine: 1,
      $is_WorkerNavigator: 1,
      "%": ""
    },
    _Worklet: {
      "^": "Interceptor;$ti",
      $is_Worklet: 1,
      "%": ""
    },
    _AttributeMap: {
      "^": "MapBase;$ti",
      $asMapBase: function() {
        return [P.String, P.String];
      },
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _ElementAttributeMap: {
      "^": "_AttributeMap;$ti"
    },
    _NamespacedAttributeMap: {
      "^": "_AttributeMap;$ti"
    },
    _DataAttributeMap: {
      "^": "MapBase;$ti",
      $asMapBase: function() {
        return [P.String, P.String];
      },
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    CanvasImageSource: {
      "^": "Object;$ti"
    },
    WindowBase: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isEventTarget: 1
    },
    LocationBase: {
      "^": "Object;$ti"
    },
    HistoryBase: {
      "^": "Object;$ti"
    },
    CssClassSet: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isSet: 1,
      $asSet: function() {
        return [P.String];
      }
    },
    _ContentCssRect: {
      "^": "CssRect;$ti"
    },
    _ContentCssListRect: {
      "^": "_ContentCssRect;$ti"
    },
    _PaddingCssRect: {
      "^": "CssRect;$ti"
    },
    _BorderCssRect: {
      "^": "CssRect;$ti"
    },
    _MarginCssRect: {
      "^": "CssRect;$ti"
    },
    CssRect: {
      "^": "Object;$ti",
      $is_RectangleBase: 1,
      $as_RectangleBase: function() {
        return [P.num];
      },
      $isRectangle: 1,
      $asRectangle: function() {
        return [P.num];
      }
    },
    _MultiElementCssClassSet: {
      "^": "CssClassSetImpl;$ti"
    },
    _ElementCssClassSet: {
      "^": "CssClassSetImpl;$ti"
    },
    Dimension: {
      "^": "Object;$ti"
    },
    EventStreamProvider: {
      "^": "Object;_eventType,$ti",
      forElement$2$useCapture: function(e, useCapture) {
        return W._ElementEventStreamImpl$(H.interceptedTypeCheck(e, "$isElement"), this._eventType, H.boolTypeCheck(useCapture), H.getTypeArgumentByIndex(this, 0));
      },
      forElement$1: function(e) {
        return this.forElement$2$useCapture(e, false);
      }
    },
    ElementStream: {
      "^": "Object;$ti",
      $isStream: 1
    },
    _EventStream: {
      "^": "Stream;$ti",
      listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
        var t1 = H.getTypeArgumentByIndex(this, 0);
        H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
        H.interceptedTypeCheck(onError, "$isFunction");
        H.functionTypeCheck(onDone, {func: 1, ret: -1});
        H.boolTypeCheck(cancelOnError);
        return W._EventStreamSubscription$(this._html$_target, this._eventType, onData, this._useCapture, t1);
      },
      listen$1: function(onData) {
        return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
      }
    },
    _ElementEventStreamImpl: {
      "^": "_EventStream;_html$_target,_eventType,_useCapture,$ti",
      $isElementStream: 1,
      static: {
        _ElementEventStreamImpl$: function(target, eventType, useCapture, $T) {
          return new W._ElementEventStreamImpl(H.interceptedTypeCheck(target, "$isEventTarget"), H.stringTypeCheck(eventType), H.boolTypeCheck(useCapture), [$T]);
        }
      }
    },
    _ElementListEventStreamImpl: {
      "^": "Stream;$ti",
      $isElementStream: 1
    },
    _EventStreamSubscription: {
      "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture,$ti",
      _EventStreamSubscription$4: function(_target, _eventType, onData, _useCapture, $T) {
        this._tryResume$0();
      },
      get$_canceled: function() {
        return this._html$_target == null;
      },
      pause$1: function(resumeSignal) {
        H.interceptedTypeCheck(resumeSignal, "$isFuture");
        if (this.get$_canceled())
          return;
        this._pauseCount = H.intTypeCheck(J.$add$ns(this._pauseCount, 1));
        this._unlisten$0();
        if (resumeSignal != null)
          resumeSignal.whenComplete$1(this.get$resume());
      },
      pause$0: function() {
        return this.pause$1(null);
      },
      get$isPaused: function() {
        return J.$gt$n(this._pauseCount, 0);
      },
      resume$0: [function() {
        if (this.get$_canceled() || !this.get$isPaused())
          return;
        var t1 = this._pauseCount;
        if (typeof t1 !== "number")
          return t1.$sub();
        this._pauseCount = H.intTypeCheck(t1 - 1);
        this._tryResume$0();
      }, "call$0", "get$resume", 0, 0, 1],
      _tryResume$0: function() {
        var t1 = this._onData;
        if (t1 != null && !this.get$isPaused())
          J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
      },
      _unlisten$0: function() {
        var t1 = this._onData;
        if (t1 != null)
          J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
      },
      static: {
        _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
          var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
          t1 = new W._EventStreamSubscription(0, _target, _eventType, t1, _useCapture, [$T]);
          t1._EventStreamSubscription$4(_target, _eventType, onData, _useCapture, $T);
          return t1;
        }
      }
    },
    _EventStreamSubscription_closure: {
      "^": "Closure:17;onData,$ti",
      call$1: function(e) {
        return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
      }
    },
    CustomStream: {
      "^": "Object;$ti",
      $isStream: 1
    },
    _CustomEventStreamImpl: {
      "^": "Stream;$ti",
      $isCustomStream: 1
    },
    _CustomKeyEventStreamImpl: {
      "^": "_CustomEventStreamImpl;$ti",
      $asStream: function() {
        return [W.KeyEvent];
      },
      $asCustomStream: function() {
        return [W.KeyEvent];
      },
      $as_CustomEventStreamImpl: function() {
        return [W.KeyEvent];
      }
    },
    _StreamPool: {
      "^": "Object;$ti"
    },
    _CustomEventStreamProvider: {
      "^": "Object;$ti",
      $isEventStreamProvider: 1
    },
    _Html5NodeValidator: {
      "^": "Object;$ti",
      $isNodeValidator: 1
    },
    ImmutableListMixin: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $isIterable: 1,
      $isList: 1
    },
    KeyCode: {
      "^": "Object;$ti"
    },
    KeyLocation: {
      "^": "Object;$ti"
    },
    _KeyName: {
      "^": "Object;$ti"
    },
    _KeyboardEventHandler: {
      "^": "EventStreamProvider;$ti",
      $asEventStreamProvider: function() {
        return [W.KeyEvent];
      }
    },
    KeyboardEventStream: {
      "^": "Object;$ti"
    },
    NodeValidatorBuilder: {
      "^": "Object;$ti",
      $isNodeValidator: 1
    },
    _SimpleNodeValidator: {
      "^": "Object;$ti",
      $isNodeValidator: 1
    },
    _CustomElementNodeValidator: {
      "^": "_SimpleNodeValidator;$ti"
    },
    _TemplatingNodeValidator: {
      "^": "_SimpleNodeValidator;$ti"
    },
    _SvgNodeValidator: {
      "^": "Object;$ti",
      $isNodeValidator: 1
    },
    ReadyState: {
      "^": "Object;$ti"
    },
    _WrappedList: {
      "^": "ListBase;$ti",
      $isNodeListWrapper: 1
    },
    _WrappedIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    _HttpRequestUtils: {
      "^": "Object;$ti"
    },
    FixedSizeListIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    _VariableSizeListIterator: {
      "^": "Object;$ti",
      $isIterator: 1
    },
    Console: {
      "^": "Object;$ti"
    },
    _JSElementUpgrader: {
      "^": "Object;$ti",
      $isElementUpgrader: 1
    },
    _DOMWindowCrossFrame: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isEventTarget: 1,
      $isWindowBase: 1
    },
    _LocationCrossFrame: {
      "^": "Object;$ti",
      $isLocationBase: 1
    },
    _HistoryCrossFrame: {
      "^": "Object;$ti",
      $isHistoryBase: 1
    },
    KeyEvent: {
      "^": "_WrappedEvent;$ti",
      $isKeyboardEvent: 1,
      $isUIEvent: 1
    },
    Platform: {
      "^": "Object;$ti"
    },
    _WrappedEvent: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isEvent: 1
    },
    ElementUpgrader: {
      "^": "Object;$ti"
    },
    NodeValidator: {
      "^": "Object;$ti"
    },
    NodeTreeSanitizer: {
      "^": "Object;$ti"
    },
    _TrustedHtmlTreeSanitizer: {
      "^": "Object;$ti",
      $isNodeTreeSanitizer: 1
    },
    UriPolicy: {
      "^": "Object;$ti"
    },
    _SameOriginUriPolicy: {
      "^": "Object;$ti",
      $isUriPolicy: 1
    },
    _ThrowsNodeValidator: {
      "^": "Object;$ti",
      $isNodeValidator: 1
    },
    _ValidatingTreeSanitizer: {
      "^": "Object;$ti",
      $isNodeTreeSanitizer: 1
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: {
      "^": "Interceptor;$ti",
      $isCssStyleDeclarationBase: 1
    },
    _DomRectList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [[P.Rectangle, P.num]];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isList: 1,
      $asList: function() {
        return [[P.Rectangle, P.num]];
      }
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_DomRectList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [[P.Rectangle, P.num]];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [[P.Rectangle, P.num]];
      },
      $isList: 1,
      $asList: function() {
        return [[P.Rectangle, P.num]];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [[P.Rectangle, P.num]];
      }
    },
    _DomStringList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      }
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_DomStringList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.String];
      }
    },
    _FileList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.File];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.File];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.File];
      },
      $isList: 1,
      $asList: function() {
        return [W.File];
      }
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_FileList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.File];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.File];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.File];
      },
      $isList: 1,
      $asList: function() {
        return [W.File];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.File];
      }
    },
    _HtmlCollection_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      }
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_HtmlCollection_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Node];
      }
    },
    _MidiInputMap_Interceptor_MapMixin: {
      "^": "Interceptor;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      }
    },
    _MidiOutputMap_Interceptor_MapMixin: {
      "^": "Interceptor;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      }
    },
    _MimeTypeArray_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.MimeType];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.MimeType];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.MimeType];
      },
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      }
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_MimeTypeArray_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.MimeType];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.MimeType];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.MimeType];
      },
      $isList: 1,
      $asList: function() {
        return [W.MimeType];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.MimeType];
      }
    },
    _NodeList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      }
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_NodeList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Node];
      }
    },
    _PluginArray_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Plugin];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Plugin];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Plugin];
      },
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      }
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_PluginArray_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Plugin];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Plugin];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Plugin];
      },
      $isList: 1,
      $asList: function() {
        return [W.Plugin];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Plugin];
      }
    },
    _RtcStatsReport_Interceptor_MapMixin: {
      "^": "Interceptor;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      }
    },
    _SourceBufferList_EventTarget_ListMixin: {
      "^": "EventTarget;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SourceBuffer];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SourceBuffer];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SourceBuffer];
      },
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      }
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: {
      "^": "_SourceBufferList_EventTarget_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SourceBuffer];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SourceBuffer];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SourceBuffer];
      },
      $isList: 1,
      $asList: function() {
        return [W.SourceBuffer];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.SourceBuffer];
      }
    },
    _SpeechGrammarList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SpeechGrammar];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SpeechGrammar];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechGrammar];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      }
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_SpeechGrammarList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SpeechGrammar];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SpeechGrammar];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechGrammar];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechGrammar];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.SpeechGrammar];
      }
    },
    _Storage_Interceptor_MapMixin: {
      "^": "Interceptor;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, P.String];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, P.String];
      }
    },
    _TextTrackCueList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.TextTrackCue];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.TextTrackCue];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrackCue];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      }
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_TextTrackCueList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.TextTrackCue];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.TextTrackCue];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrackCue];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrackCue];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.TextTrackCue];
      }
    },
    _TextTrackList_EventTarget_ListMixin: {
      "^": "EventTarget;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.TextTrack];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.TextTrack];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrack];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      }
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: {
      "^": "_TextTrackList_EventTarget_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.TextTrack];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.TextTrack];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.TextTrack];
      },
      $isList: 1,
      $asList: function() {
        return [W.TextTrack];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.TextTrack];
      }
    },
    _TouchList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Touch];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Touch];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Touch];
      },
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      }
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_TouchList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Touch];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Touch];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Touch];
      },
      $isList: 1,
      $asList: function() {
        return [W.Touch];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Touch];
      }
    },
    __CssRuleList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.CssRule];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.CssRule];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.CssRule];
      },
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      }
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__CssRuleList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.CssRule];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.CssRule];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.CssRule];
      },
      $isList: 1,
      $asList: function() {
        return [W.CssRule];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.CssRule];
      }
    },
    __CssStyleDeclarationSet_Object_CssStyleDeclarationBase: {
      "^": "Object;$ti",
      $isCssStyleDeclarationBase: 1
    },
    __GamepadList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Gamepad];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Gamepad];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Gamepad];
      },
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      }
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__GamepadList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Gamepad];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Gamepad];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Gamepad];
      },
      $isList: 1,
      $asList: function() {
        return [W.Gamepad];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Gamepad];
      }
    },
    __NamedNodeMap_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      }
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__NamedNodeMap_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.Node];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.Node];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.Node];
      },
      $isList: 1,
      $asList: function() {
        return [W.Node];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.Node];
      }
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SpeechRecognitionResult];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      }
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__SpeechRecognitionResultList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.SpeechRecognitionResult];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.SpeechRecognitionResult];
      },
      $isList: 1,
      $asList: function() {
        return [W.SpeechRecognitionResult];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.SpeechRecognitionResult];
      }
    },
    __StyleSheetList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.StyleSheet];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.StyleSheet];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.StyleSheet];
      },
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      }
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "__StyleSheetList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [W.StyleSheet];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [W.StyleSheet];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [W.StyleSheet];
      },
      $isList: 1,
      $asList: function() {
        return [W.StyleSheet];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [W.StyleSheet];
      }
    }
  }], ["html_common", "dart:html_common",, P, {
    "^": "",
    _StructuredClone: {
      "^": "Object;$ti"
    },
    _AcceptStructuredClone: {
      "^": "Object;$ti"
    },
    ContextAttributes: {
      "^": "Object;$ti"
    },
    _TypedImageData: {
      "^": "Object;$ti",
      $isInterceptor: 1,
      $isImageData: 1
    },
    _StructuredCloneDart2Js: {
      "^": "_StructuredClone;$ti"
    },
    _AcceptStructuredCloneDart2Js: {
      "^": "_AcceptStructuredClone;$ti"
    },
    CssClassSetImpl: {
      "^": "SetBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $asSetMixin: function() {
        return [P.String];
      },
      $asSetBase: function() {
        return [P.String];
      },
      $asIterable: function() {
        return [P.String];
      },
      $asSet: function() {
        return [P.String];
      },
      $isCssClassSet: 1
    },
    Device: {
      "^": "Object;$ti"
    },
    FilteredElementList: {
      "^": "ListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [W.Element];
      },
      $asListBase: function() {
        return [W.Element];
      },
      $asListMixin: function() {
        return [W.Element];
      },
      $asIterable: function() {
        return [W.Element];
      },
      $asList: function() {
        return [W.Element];
      },
      $isNodeListWrapper: 1,
      $as_ListBase_Object_ListMixin: function() {
        return [W.Element];
      }
    },
    Lists: {
      "^": "Object;$ti"
    },
    NodeListWrapper: {
      "^": "Object;$ti"
    }
  }], ["dart.dom.indexed_db", "dart:indexed_db",, P, {
    "^": "",
    _KeyRangeFactoryProvider: {
      "^": "Object;$ti"
    },
    Cursor: {
      "^": "Interceptor;$ti",
      $isCursor: 1,
      "%": ""
    },
    CursorWithValue: {
      "^": "Cursor;$ti",
      $isCursorWithValue: 1,
      "%": ""
    },
    Database: {
      "^": "EventTarget;$ti",
      $isDatabase: 1,
      "%": ""
    },
    IdbFactory: {
      "^": "Interceptor;$ti",
      $isIdbFactory: 1,
      "%": ""
    },
    Index: {
      "^": "Interceptor;$ti",
      $isIndex: 1,
      "%": ""
    },
    KeyRange: {
      "^": "Interceptor;$ti",
      $isKeyRange: 1,
      "%": ""
    },
    ObjectStore: {
      "^": "Interceptor;$ti",
      $isObjectStore: 1,
      "%": ""
    },
    Observation: {
      "^": "Interceptor;$ti",
      $isObservation: 1,
      "%": ""
    },
    Observer: {
      "^": "Interceptor;$ti",
      $isObserver: 1,
      "%": ""
    },
    ObserverChanges: {
      "^": "Interceptor;$ti",
      $isObserverChanges: 1,
      "%": ""
    },
    OpenDBRequest: {
      "^": "Request;$ti",
      $isOpenDBRequest: 1,
      "%": ""
    },
    Request: {
      "^": "EventTarget;$ti",
      $isRequest: 1,
      "%": ""
    },
    Transaction: {
      "^": "EventTarget;$ti",
      $isTransaction: 1,
      "%": ""
    },
    VersionChangeEvent: {
      "^": "Event;$ti",
      $isVersionChangeEvent: 1,
      "%": "IDBVersionChangeEvent"
    }
  }], ["dart.io", "dart:io",, P, {
    "^": "",
    BytesBuilder: {
      "^": "Object;$ti"
    },
    _CopyingBytesBuilder0: {
      "^": "Object;$ti",
      $isBytesBuilder: 1
    },
    _BytesBuilder: {
      "^": "Object;$ti",
      $isBytesBuilder: 1
    },
    IOException: {
      "^": "Object;$ti",
      $isException: 1
    },
    OSError: {
      "^": "Object;$ti"
    },
    _BufferAndStart: {
      "^": "Object;$ti"
    },
    _IOCrypto: {
      "^": "Object;$ti"
    },
    ZLibOption: {
      "^": "Object;$ti"
    },
    ZLibCodec: {
      "^": "Codec;$ti",
      $asCodec: function() {
        return [[P.List, P.int], [P.List, P.int]];
      }
    },
    GZipCodec: {
      "^": "Codec;$ti",
      $asCodec: function() {
        return [[P.List, P.int], [P.List, P.int]];
      }
    },
    ZLibEncoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [[P.List, P.int], [P.List, P.int]];
      },
      $asStreamTransformerBase: function() {
        return [[P.List, P.int], [P.List, P.int]];
      },
      $asConverter: function() {
        return [[P.List, P.int], [P.List, P.int]];
      }
    },
    ZLibDecoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [[P.List, P.int], [P.List, P.int]];
      },
      $asStreamTransformerBase: function() {
        return [[P.List, P.int], [P.List, P.int]];
      },
      $asConverter: function() {
        return [[P.List, P.int], [P.List, P.int]];
      }
    },
    RawZLibFilter: {
      "^": "Object;$ti"
    },
    _BufferSink: {
      "^": "ByteConversionSink;$ti"
    },
    _ZLibEncoderSink: {
      "^": "_FilterSink;$ti"
    },
    _ZLibDecoderSink: {
      "^": "_FilterSink;$ti"
    },
    _FilterSink: {
      "^": "ByteConversionSink;$ti"
    },
    Directory: {
      "^": "Object;$ti",
      $isFileSystemEntity: 1
    },
    _Directory: {
      "^": "FileSystemEntity;$ti",
      $isDirectory: 1
    },
    _AsyncDirectoryListerOps: {
      "^": "Object;$ti"
    },
    _AsyncDirectoryLister: {
      "^": "Object;$ti"
    },
    _EmbedderConfig: {
      "^": "Object;$ti"
    },
    _EventHandler: {
      "^": "Object;$ti"
    },
    FileMode: {
      "^": "Object;$ti"
    },
    FileLock: {
      "^": "Object;$ti"
    },
    File0: {
      "^": "Object;$ti",
      $isFileSystemEntity: 1
    },
    RandomAccessFile: {
      "^": "Object;$ti"
    },
    FileSystemException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    _FileStream: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [[P.List, P.int]];
      }
    },
    _FileStreamConsumer: {
      "^": "StreamConsumer;$ti",
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      }
    },
    _File: {
      "^": "FileSystemEntity;$ti",
      $isFile0: 1
    },
    _RandomAccessFileOps: {
      "^": "Object;$ti"
    },
    _RandomAccessFile: {
      "^": "Object;$ti",
      $isRandomAccessFile: 1
    },
    FileSystemEntityType: {
      "^": "Object;$ti"
    },
    FileStat: {
      "^": "Object;$ti"
    },
    FileSystemEntity: {
      "^": "Object;$ti"
    },
    FileSystemEvent: {
      "^": "Object;$ti"
    },
    FileSystemCreateEvent: {
      "^": "FileSystemEvent;$ti"
    },
    FileSystemModifyEvent: {
      "^": "FileSystemEvent;$ti"
    },
    FileSystemDeleteEvent: {
      "^": "FileSystemEvent;$ti"
    },
    FileSystemMoveEvent: {
      "^": "FileSystemEvent;$ti"
    },
    _FileSystemWatcher: {
      "^": "Object;$ti"
    },
    _IOResourceInfo: {
      "^": "Object;$ti"
    },
    _ReadWriteResourceInfo: {
      "^": "_IOResourceInfo;$ti"
    },
    _FileResourceInfo: {
      "^": "_ReadWriteResourceInfo;$ti"
    },
    _ProcessResourceInfo: {
      "^": "_IOResourceInfo;$ti"
    },
    _SocketResourceInfo: {
      "^": "_ReadWriteResourceInfo;$ti"
    },
    _IOService: {
      "^": "Object;$ti"
    },
    IOSink: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $isStreamSink: 1,
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $isSink: 1,
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1
    },
    _StreamSinkImpl0: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $isStreamConsumer: 1,
      $isStreamSink: 1,
      $isSink: 1
    },
    _IOSinkImpl0: {
      "^": "_StreamSinkImpl0;$ti",
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1,
      $isIOSink: 1,
      $as_StreamSinkImpl0: function() {
        return [[P.List, P.int]];
      }
    },
    Link: {
      "^": "Object;$ti",
      $isFileSystemEntity: 1
    },
    _Link: {
      "^": "FileSystemEntity;$ti",
      $isLink: 1
    },
    _Namespace: {
      "^": "Object;$ti"
    },
    IOOverrides: {
      "^": "Object;$ti"
    },
    _IOOverridesScope: {
      "^": "IOOverrides;$ti"
    },
    Platform0: {
      "^": "Object;$ti"
    },
    _Platform: {
      "^": "Object;$ti"
    },
    _CaseInsensitiveStringMap: {
      "^": "MapBase;$ti",
      $asMapBase: function($V) {
        return [P.String, $V];
      },
      $asMapMixin: function($V) {
        return [P.String, $V];
      },
      $asMap: function($V) {
        return [P.String, $V];
      }
    },
    _ProcessUtils: {
      "^": "Object;$ti"
    },
    ProcessInfo: {
      "^": "Object;$ti"
    },
    ProcessStartMode: {
      "^": "Object;$ti"
    },
    Process: {
      "^": "Object;$ti"
    },
    ProcessResult: {
      "^": "Object;$ti"
    },
    ProcessSignal: {
      "^": "Object;$ti"
    },
    SignalException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    ProcessException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    SecureServerSocket: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [P.SecureSocket];
      }
    },
    RawSecureServerSocket: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [P.RawSecureSocket];
      }
    },
    SecureSocket: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [[P.List, P.int]];
      },
      $isEventSink: 1,
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $isStreamSink: 1,
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $isSink: 1,
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1,
      $isIOSink: 1,
      $isSocket: 1
    },
    RawSecureSocket: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [P.RawSocketEvent];
      },
      $isRawSocket: 1
    },
    X509Certificate: {
      "^": "Object;$ti"
    },
    _FilterStatus: {
      "^": "Object;$ti"
    },
    _RawSecureSocket: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [P.RawSocketEvent];
      },
      $isRawSecureSocket: 1,
      $isRawSocket: 1
    },
    _ExternalBuffer: {
      "^": "Object;$ti"
    },
    _SecureFilter: {
      "^": "Object;$ti"
    },
    TlsException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    HandshakeException: {
      "^": "TlsException;$ti"
    },
    CertificateException: {
      "^": "TlsException;$ti"
    },
    SecurityContext: {
      "^": "Object;$ti"
    },
    _ServiceObject0: {
      "^": "Object;$ti"
    },
    InternetAddressType: {
      "^": "Object;$ti"
    },
    InternetAddress: {
      "^": "Object;$ti"
    },
    NetworkInterface: {
      "^": "Object;$ti"
    },
    RawServerSocket: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [P.RawSocket];
      }
    },
    ServerSocket: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [P.Socket];
      }
    },
    SocketDirection: {
      "^": "Object;$ti"
    },
    SocketOption: {
      "^": "Object;$ti"
    },
    RawSocketEvent: {
      "^": "Object;$ti"
    },
    ConnectionTask: {
      "^": "Object;$ti"
    },
    RawSocket: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [P.RawSocketEvent];
      }
    },
    Socket: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: function() {
        return [[P.List, P.int]];
      },
      $isEventSink: 1,
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $isStreamSink: 1,
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $isSink: 1,
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1,
      $isIOSink: 1
    },
    Datagram: {
      "^": "Object;$ti"
    },
    RawDatagramSocket: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [P.RawSocketEvent];
      }
    },
    SocketException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    _StdStream: {
      "^": "Stream;$ti",
      $asStream: function() {
        return [[P.List, P.int]];
      }
    },
    Stdin: {
      "^": "_StdStream;$ti"
    },
    Stdout: {
      "^": "_StdSink;$ti"
    },
    StdoutException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    StdinException: {
      "^": "Object;$ti",
      $isException: 1,
      $isIOException: 1
    },
    _StdConsumer: {
      "^": "Object;$ti",
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      }
    },
    _StdSink: {
      "^": "Object;$ti",
      $isEventSink: 1,
      $asEventSink: function() {
        return [[P.List, P.int]];
      },
      $isStreamConsumer: 1,
      $asStreamConsumer: function() {
        return [[P.List, P.int]];
      },
      $isStreamSink: 1,
      $asStreamSink: function() {
        return [[P.List, P.int]];
      },
      $isSink: 1,
      $asSink: function() {
        return [[P.List, P.int]];
      },
      $isStringSink: 1,
      $isIOSink: 1
    },
    StdioType: {
      "^": "Object;$ti"
    },
    _StdIOUtils: {
      "^": "Object;$ti"
    },
    SystemEncoding: {
      "^": "Encoding;$ti"
    },
    _WindowsCodePageEncoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [P.String, [P.List, P.int]];
      },
      $asStreamTransformerBase: function() {
        return [P.String, [P.List, P.int]];
      },
      $asConverter: function() {
        return [P.String, [P.List, P.int]];
      }
    },
    _WindowsCodePageEncoderSink: {
      "^": "StringConversionSinkBase;$ti"
    },
    _WindowsCodePageDecoder: {
      "^": "Converter;$ti",
      $asStreamTransformer: function() {
        return [[P.List, P.int], P.String];
      },
      $asStreamTransformerBase: function() {
        return [[P.List, P.int], P.String];
      },
      $asConverter: function() {
        return [[P.List, P.int], P.String];
      }
    },
    _WindowsCodePageDecoderSink: {
      "^": "ByteConversionSinkBase;$ti"
    },
    RawSynchronousSocket: {
      "^": "Object;$ti"
    }
  }], ["dart.isolate", "dart:isolate",, P, {
    "^": "",
    _ReceivePortImpl: {
      "^": "Stream;$ti",
      $asStream: Isolate.functionThatReturnsNull,
      $isReceivePort: 1
    },
    Capability: {
      "^": "Object;$ti"
    },
    IsolateSpawnException: {
      "^": "Object;$ti",
      $isException: 1
    },
    Isolate: {
      "^": "Object;$ti"
    },
    SendPort: {
      "^": "Object;$ti",
      $isCapability: 1
    },
    ReceivePort: {
      "^": "Object;$ti",
      $isStream: 1,
      $asStream: Isolate.functionThatReturnsNull
    },
    RawReceivePort: {
      "^": "Object;$ti"
    },
    RemoteError: {
      "^": "Object;$ti",
      $isError: 1
    }
  }], ["dart.js", "dart:js",, P, {
    "^": "",
    JsObject: {
      "^": "Object;$ti"
    },
    JsFunction: {
      "^": "JsObject;$ti"
    },
    JsArray: {
      "^": "_JsArray_JsObject_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $isListMixin: 1,
      $isIterable: 1,
      $isList: 1
    },
    _JsArray_JsObject_ListMixin: {
      "^": "JsObject;$ti",
      $isEfficientLengthIterable: 1,
      $isListMixin: 1,
      $isIterable: 1,
      $isList: 1
    }
  }], ["dart.math", "dart:math",, P, {
    "^": "",
    _JSRandom: {
      "^": "Object;$ti",
      $isRandom: 1
    },
    _Random: {
      "^": "Object;$ti",
      $isRandom: 1
    },
    _JSSecureRandom: {
      "^": "Object;$ti",
      $isRandom: 1
    },
    _JenkinsSmiHash0: {
      "^": "Object;$ti"
    },
    Point: {
      "^": "Object;$ti"
    },
    Random: {
      "^": "Object;$ti"
    },
    _RectangleBase: {
      "^": "Object;$ti"
    },
    Rectangle: {
      "^": "_RectangleBase;$ti"
    },
    MutableRectangle: {
      "^": "_RectangleBase;$ti",
      $isRectangle: 1
    }
  }], ["dart.mirrors", "dart:mirrors",, P, {
    "^": "",
    MirrorSystem: {
      "^": "Object;$ti"
    },
    Mirror: {
      "^": "Object;$ti"
    },
    IsolateMirror: {
      "^": "Object;$ti",
      $isMirror: 1
    },
    DeclarationMirror: {
      "^": "Object;$ti",
      $isMirror: 1
    },
    ObjectMirror: {
      "^": "Object;$ti",
      $isMirror: 1
    },
    InstanceMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isObjectMirror: 1
    },
    ClosureMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isObjectMirror: 1,
      $isInstanceMirror: 1
    },
    LibraryMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isDeclarationMirror: 1,
      $isObjectMirror: 1
    },
    LibraryDependencyMirror: {
      "^": "Object;$ti",
      $isMirror: 1
    },
    CombinatorMirror: {
      "^": "Object;$ti",
      $isMirror: 1
    },
    TypeMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isDeclarationMirror: 1
    },
    ClassMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isDeclarationMirror: 1,
      $isObjectMirror: 1,
      $isTypeMirror: 1
    },
    FunctionTypeMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isDeclarationMirror: 1,
      $isObjectMirror: 1,
      $isTypeMirror: 1,
      $isClassMirror: 1
    },
    TypeVariableMirror: {
      "^": "TypeMirror;$ti"
    },
    TypedefMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isDeclarationMirror: 1,
      $isTypeMirror: 1
    },
    MethodMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isDeclarationMirror: 1
    },
    VariableMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isDeclarationMirror: 1
    },
    ParameterMirror: {
      "^": "Object;$ti",
      $isMirror: 1,
      $isDeclarationMirror: 1,
      $isVariableMirror: 1
    },
    SourceLocation: {
      "^": "Object;$ti"
    },
    Comment0: {
      "^": "Object;$ti"
    },
    MirrorsUsed: {
      "^": "Object;$ti"
    }
  }], ["dart.dom.svg", "dart:svg",, P, {
    "^": "",
    _SvgElementFactoryProvider: {
      "^": "Object;$ti"
    },
    AElement: {
      "^": "GraphicsElement;$ti",
      $isAElement: 1,
      $isUriReference: 1,
      "%": ""
    },
    Angle: {
      "^": "Interceptor;$ti",
      $isAngle: 1,
      "%": ""
    },
    AnimateElement: {
      "^": "AnimationElement;$ti",
      $isAnimateElement: 1,
      "%": ""
    },
    AnimateMotionElement: {
      "^": "AnimationElement;$ti",
      $isAnimateMotionElement: 1,
      "%": ""
    },
    AnimateTransformElement: {
      "^": "AnimationElement;$ti",
      $isAnimateTransformElement: 1,
      "%": ""
    },
    AnimatedAngle: {
      "^": "Interceptor;$ti",
      $isAnimatedAngle: 1,
      "%": ""
    },
    AnimatedBoolean: {
      "^": "Interceptor;$ti",
      $isAnimatedBoolean: 1,
      "%": ""
    },
    AnimatedEnumeration: {
      "^": "Interceptor;$ti",
      $isAnimatedEnumeration: 1,
      "%": ""
    },
    AnimatedInteger: {
      "^": "Interceptor;$ti",
      $isAnimatedInteger: 1,
      "%": ""
    },
    AnimatedLength: {
      "^": "Interceptor;$ti",
      $isAnimatedLength: 1,
      "%": ""
    },
    AnimatedLengthList: {
      "^": "Interceptor;$ti",
      $isAnimatedLengthList: 1,
      "%": ""
    },
    AnimatedNumber: {
      "^": "Interceptor;$ti",
      $isAnimatedNumber: 1,
      "%": ""
    },
    AnimatedNumberList: {
      "^": "Interceptor;$ti",
      $isAnimatedNumberList: 1,
      "%": ""
    },
    AnimatedPreserveAspectRatio: {
      "^": "Interceptor;$ti",
      $isAnimatedPreserveAspectRatio: 1,
      "%": ""
    },
    AnimatedRect: {
      "^": "Interceptor;$ti",
      $isAnimatedRect: 1,
      "%": ""
    },
    AnimatedString: {
      "^": "Interceptor;$ti",
      $isAnimatedString: 1,
      "%": ""
    },
    AnimatedTransformList: {
      "^": "Interceptor;$ti",
      $isAnimatedTransformList: 1,
      "%": ""
    },
    AnimationElement: {
      "^": "SvgElement;$ti",
      $isAnimationElement: 1,
      $isTests: 1,
      "%": ""
    },
    CircleElement: {
      "^": "GeometryElement;$ti",
      $isCircleElement: 1,
      "%": ""
    },
    ClipPathElement: {
      "^": "GraphicsElement;$ti",
      $isClipPathElement: 1,
      "%": ""
    },
    DefsElement: {
      "^": "GraphicsElement;$ti",
      $isDefsElement: 1,
      "%": ""
    },
    DescElement: {
      "^": "SvgElement;$ti",
      $isDescElement: 1,
      "%": ""
    },
    DiscardElement: {
      "^": "SvgElement;$ti",
      $isDiscardElement: 1,
      "%": ""
    },
    EllipseElement: {
      "^": "GeometryElement;$ti",
      $isEllipseElement: 1,
      "%": ""
    },
    FEBlendElement: {
      "^": "SvgElement;$ti",
      $isFEBlendElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEColorMatrixElement: {
      "^": "SvgElement;$ti",
      $isFEColorMatrixElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEComponentTransferElement: {
      "^": "SvgElement;$ti",
      $isFEComponentTransferElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FECompositeElement: {
      "^": "SvgElement;$ti",
      $isFECompositeElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEConvolveMatrixElement: {
      "^": "SvgElement;$ti",
      $isFEConvolveMatrixElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEDiffuseLightingElement: {
      "^": "SvgElement;$ti",
      $isFEDiffuseLightingElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEDisplacementMapElement: {
      "^": "SvgElement;$ti",
      $isFEDisplacementMapElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEDistantLightElement: {
      "^": "SvgElement;$ti",
      $isFEDistantLightElement: 1,
      "%": ""
    },
    FEFloodElement: {
      "^": "SvgElement;$ti",
      $isFEFloodElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEFuncAElement: {
      "^": "_SVGComponentTransferFunctionElement;$ti",
      $isFEFuncAElement: 1,
      "%": ""
    },
    FEFuncBElement: {
      "^": "_SVGComponentTransferFunctionElement;$ti",
      $isFEFuncBElement: 1,
      "%": ""
    },
    FEFuncGElement: {
      "^": "_SVGComponentTransferFunctionElement;$ti",
      $isFEFuncGElement: 1,
      "%": ""
    },
    FEFuncRElement: {
      "^": "_SVGComponentTransferFunctionElement;$ti",
      $isFEFuncRElement: 1,
      "%": ""
    },
    FEGaussianBlurElement: {
      "^": "SvgElement;$ti",
      $isFEGaussianBlurElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEImageElement: {
      "^": "SvgElement;$ti",
      $isFEImageElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      $isUriReference: 1,
      "%": ""
    },
    FEMergeElement: {
      "^": "SvgElement;$ti",
      $isFEMergeElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEMergeNodeElement: {
      "^": "SvgElement;$ti",
      $isFEMergeNodeElement: 1,
      "%": ""
    },
    FEMorphologyElement: {
      "^": "SvgElement;$ti",
      $isFEMorphologyElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEOffsetElement: {
      "^": "SvgElement;$ti",
      $isFEOffsetElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FEPointLightElement: {
      "^": "SvgElement;$ti",
      $isFEPointLightElement: 1,
      "%": ""
    },
    FESpecularLightingElement: {
      "^": "SvgElement;$ti",
      $isFESpecularLightingElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FESpotLightElement: {
      "^": "SvgElement;$ti",
      $isFESpotLightElement: 1,
      "%": ""
    },
    FETileElement: {
      "^": "SvgElement;$ti",
      $isFETileElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FETurbulenceElement: {
      "^": "SvgElement;$ti",
      $isFETurbulenceElement: 1,
      $isFilterPrimitiveStandardAttributes: 1,
      "%": ""
    },
    FilterElement: {
      "^": "SvgElement;$ti",
      $isFilterElement: 1,
      $isUriReference: 1,
      "%": ""
    },
    FilterPrimitiveStandardAttributes: {
      "^": "Interceptor;$ti"
    },
    FitToViewBox: {
      "^": "Interceptor;$ti"
    },
    ForeignObjectElement: {
      "^": "GraphicsElement;$ti",
      $isForeignObjectElement: 1,
      "%": ""
    },
    GElement: {
      "^": "GraphicsElement;$ti",
      $isGElement: 1,
      "%": ""
    },
    GeometryElement: {
      "^": "GraphicsElement;$ti",
      $isGeometryElement: 1,
      "%": ""
    },
    GraphicsElement: {
      "^": "SvgElement;$ti",
      $isGraphicsElement: 1,
      $isTests: 1,
      "%": ""
    },
    ImageElement0: {
      "^": "GraphicsElement;$ti",
      $isImageElement0: 1,
      $isUriReference: 1,
      "%": ""
    },
    Length: {
      "^": "Interceptor;$ti",
      $isLength: 1,
      "%": ""
    },
    LengthList: {
      "^": "_LengthList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Length];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Length];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.Length];
      },
      $isLengthList: 1,
      "%": ""
    },
    LineElement: {
      "^": "GeometryElement;$ti",
      $isLineElement: 1,
      "%": ""
    },
    LinearGradientElement: {
      "^": "_GradientElement;$ti",
      $isLinearGradientElement: 1,
      "%": ""
    },
    MarkerElement: {
      "^": "SvgElement;$ti",
      $isFitToViewBox: 1,
      $isMarkerElement: 1,
      "%": ""
    },
    MaskElement: {
      "^": "SvgElement;$ti",
      $isMaskElement: 1,
      $isTests: 1,
      "%": ""
    },
    Matrix: {
      "^": "Interceptor;$ti",
      $isMatrix: 1,
      "%": ""
    },
    MetadataElement: {
      "^": "SvgElement;$ti",
      $isMetadataElement: 1,
      "%": ""
    },
    Number: {
      "^": "Interceptor;$ti",
      $isNumber: 1,
      "%": ""
    },
    NumberList: {
      "^": "_NumberList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Number];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Number];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.Number];
      },
      $isNumberList: 1,
      "%": ""
    },
    PathElement: {
      "^": "GeometryElement;$ti",
      $isPathElement: 1,
      "%": ""
    },
    PatternElement: {
      "^": "SvgElement;$ti",
      $isFitToViewBox: 1,
      $isPatternElement: 1,
      $isTests: 1,
      $isUriReference: 1,
      "%": ""
    },
    Point0: {
      "^": "Interceptor;$ti",
      $isPoint0: 1,
      "%": ""
    },
    PointList: {
      "^": "Interceptor;$ti",
      $isPointList: 1,
      "%": ""
    },
    PolygonElement: {
      "^": "GeometryElement;$ti",
      $isPolygonElement: 1,
      "%": ""
    },
    PolylineElement: {
      "^": "GeometryElement;$ti",
      $isPolylineElement: 1,
      "%": ""
    },
    PreserveAspectRatio: {
      "^": "Interceptor;$ti",
      $isPreserveAspectRatio: 1,
      "%": ""
    },
    RadialGradientElement: {
      "^": "_GradientElement;$ti",
      $isRadialGradientElement: 1,
      "%": ""
    },
    Rect: {
      "^": "Interceptor;$ti",
      $isRect: 1,
      "%": ""
    },
    RectElement: {
      "^": "GeometryElement;$ti",
      $isRectElement: 1,
      "%": ""
    },
    ScriptElement0: {
      "^": "SvgElement;$ti",
      $isScriptElement0: 1,
      $isUriReference: 1,
      "%": ""
    },
    SetElement: {
      "^": "AnimationElement;$ti",
      $isSetElement: 1,
      "%": ""
    },
    StopElement: {
      "^": "SvgElement;$ti",
      $isStopElement: 1,
      "%": ""
    },
    StringList: {
      "^": "_StringList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.String];
      },
      $isStringList: 1,
      "%": ""
    },
    StyleElement0: {
      "^": "SvgElement;$ti",
      $isStyleElement0: 1,
      "%": ""
    },
    AttributeClassSet: {
      "^": "CssClassSetImpl;$ti"
    },
    SvgElement: {
      "^": "Element;$ti",
      $isNoncedElement: 1,
      $isSvgElement: 1,
      "%": ""
    },
    SvgSvgElement: {
      "^": "GraphicsElement;$ti",
      $isFitToViewBox: 1,
      $isSvgSvgElement: 1,
      $isZoomAndPan: 1,
      "%": ""
    },
    SwitchElement: {
      "^": "GraphicsElement;$ti",
      $isSwitchElement: 1,
      "%": ""
    },
    SymbolElement: {
      "^": "SvgElement;$ti",
      $isFitToViewBox: 1,
      $isSymbolElement: 1,
      "%": ""
    },
    TSpanElement: {
      "^": "TextPositioningElement;$ti",
      $isTSpanElement: 1,
      "%": ""
    },
    Tests: {
      "^": "Interceptor;$ti"
    },
    TextContentElement: {
      "^": "GraphicsElement;$ti",
      $isTextContentElement: 1,
      "%": ""
    },
    TextElement: {
      "^": "TextPositioningElement;$ti",
      $isTextElement: 1,
      "%": ""
    },
    TextPathElement: {
      "^": "TextContentElement;$ti",
      $isTextPathElement: 1,
      $isUriReference: 1,
      "%": ""
    },
    TextPositioningElement: {
      "^": "TextContentElement;$ti",
      $isTextPositioningElement: 1,
      "%": ""
    },
    TitleElement0: {
      "^": "SvgElement;$ti",
      $isTitleElement0: 1,
      "%": ""
    },
    Transform: {
      "^": "Interceptor;$ti",
      $isTransform: 1,
      "%": ""
    },
    TransformList: {
      "^": "_TransformList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Transform];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Transform];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Transform];
      },
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.Transform];
      },
      $isTransformList: 1,
      "%": ""
    },
    UnitTypes: {
      "^": "Interceptor;$ti",
      $isUnitTypes: 1,
      "%": ""
    },
    UriReference: {
      "^": "Interceptor;$ti"
    },
    UseElement: {
      "^": "GraphicsElement;$ti",
      $isUriReference: 1,
      $isUseElement: 1,
      "%": ""
    },
    ViewElement: {
      "^": "SvgElement;$ti",
      $isFitToViewBox: 1,
      $isViewElement: 1,
      $isZoomAndPan: 1,
      "%": ""
    },
    ZoomAndPan: {
      "^": "Interceptor;$ti"
    },
    _GradientElement: {
      "^": "SvgElement;$ti",
      $isUriReference: 1,
      $is_GradientElement: 1,
      "%": ""
    },
    _SVGComponentTransferFunctionElement: {
      "^": "SvgElement;$ti",
      $is_SVGComponentTransferFunctionElement: 1,
      "%": ""
    },
    _SVGFEDropShadowElement: {
      "^": "SvgElement;$ti",
      $isFilterPrimitiveStandardAttributes: 1,
      $is_SVGFEDropShadowElement: 1,
      "%": ""
    },
    _SVGMPathElement: {
      "^": "SvgElement;$ti",
      $isUriReference: 1,
      $is_SVGMPathElement: 1,
      "%": ""
    },
    _LengthList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Length];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Length];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      }
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_LengthList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Length];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Length];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Length];
      },
      $isList: 1,
      $asList: function() {
        return [P.Length];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.Length];
      }
    },
    _NumberList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Number];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Number];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      }
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_NumberList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Number];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Number];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Number];
      },
      $isList: 1,
      $asList: function() {
        return [P.Number];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.Number];
      }
    },
    _StringList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      }
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_StringList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.String];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.String];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.String];
      },
      $isList: 1,
      $asList: function() {
        return [P.String];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.String];
      }
    },
    _TransformList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Transform];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Transform];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Transform];
      },
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      }
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_TransformList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Transform];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [P.Transform];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Transform];
      },
      $isList: 1,
      $asList: function() {
        return [P.Transform];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [P.Transform];
      }
    }
  }], ["dart.typed_data", "dart:typed_data",, P, {
    "^": "",
    ByteBuffer: {
      "^": "Object;$ti"
    },
    TypedData: {
      "^": "Object;$ti"
    },
    _TypedIntList: {
      "^": "TypedData;$ti"
    },
    _TypedFloatList: {
      "^": "TypedData;$ti"
    },
    Endian: {
      "^": "Object;$ti"
    },
    ByteData: {
      "^": "Object;$ti",
      $isTypedData: 1
    },
    Int8List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Uint8List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Uint8ClampedList: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Int16List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Uint16List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Int32List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Uint32List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Int64List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Uint64List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.int];
      },
      $isList: 1,
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1
    },
    Float32List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $asList: function() {
        return [P.double];
      },
      $isTypedData: 1,
      $is_TypedFloatList: 1
    },
    Float64List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.double];
      },
      $isList: 1,
      $asList: function() {
        return [P.double];
      },
      $isTypedData: 1,
      $is_TypedFloatList: 1
    },
    Float32x4List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Float32x4];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Float32x4];
      },
      $isList: 1,
      $asList: function() {
        return [P.Float32x4];
      },
      $isTypedData: 1
    },
    Int32x4List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Int32x4];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Int32x4];
      },
      $isList: 1,
      $asList: function() {
        return [P.Int32x4];
      },
      $isTypedData: 1
    },
    Float64x2List: {
      "^": "Object;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [P.Float64x2];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [P.Float64x2];
      },
      $isList: 1,
      $asList: function() {
        return [P.Float64x2];
      },
      $isTypedData: 1
    },
    Float32x4: {
      "^": "Object;$ti"
    },
    Int32x4: {
      "^": "Object;$ti"
    },
    Float64x2: {
      "^": "Object;$ti"
    },
    UnmodifiableByteBufferView: {
      "^": "Object;$ti",
      $isByteBuffer: 1
    },
    UnmodifiableByteDataView: {
      "^": "Object;$ti",
      $isTypedData: 1,
      $isByteData: 1
    },
    _UnmodifiableListMixin: {
      "^": "Object;$ti"
    },
    UnmodifiableUint8ListView: {
      "^": "_UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isUint8List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint8List, P.Uint8List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableInt8ListView: {
      "^": "_UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isInt8List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Int8List, P.Int8List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableUint8ClampedListView: {
      "^": "_UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isUint8ClampedList: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint8ClampedList, P.Uint8ClampedList];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableUint16ListView: {
      "^": "_UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isUint16List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint16List, P.Uint16List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableInt16ListView: {
      "^": "_UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isInt16List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Int16List, P.Int16List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableUint32ListView: {
      "^": "_UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isUint32List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint32List, P.Uint32List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableInt32ListView: {
      "^": "_UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isInt32List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Int32List, P.Int32List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableUint64ListView: {
      "^": "_UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isUint64List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint64List, P.Uint64List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableInt64ListView: {
      "^": "_UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $isTypedData: 1,
      $is_TypedIntList: 1,
      $isInt64List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Int64List, P.Int64List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    UnmodifiableInt32x4ListView: {
      "^": "_UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.Int32x4];
      },
      $asUnmodifiableListMixin: function() {
        return [P.Int32x4];
      },
      $asUnmodifiableListBase: function() {
        return [P.Int32x4];
      },
      $asListBase: function() {
        return [P.Int32x4];
      },
      $asListMixin: function() {
        return [P.Int32x4];
      },
      $asIterable: function() {
        return [P.Int32x4];
      },
      $asList: function() {
        return [P.Int32x4];
      },
      $isTypedData: 1,
      $isInt32x4List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.Int32x4, P.Int32x4List, P.Int32x4List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.Int32x4];
      }
    },
    UnmodifiableFloat32x4ListView: {
      "^": "_UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.Float32x4];
      },
      $asUnmodifiableListMixin: function() {
        return [P.Float32x4];
      },
      $asUnmodifiableListBase: function() {
        return [P.Float32x4];
      },
      $asListBase: function() {
        return [P.Float32x4];
      },
      $asListMixin: function() {
        return [P.Float32x4];
      },
      $asIterable: function() {
        return [P.Float32x4];
      },
      $asList: function() {
        return [P.Float32x4];
      },
      $isTypedData: 1,
      $isFloat32x4List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.Float32x4, P.Float32x4List, P.Float32x4List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.Float32x4];
      }
    },
    UnmodifiableFloat64x2ListView: {
      "^": "_UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.Float64x2];
      },
      $asUnmodifiableListMixin: function() {
        return [P.Float64x2];
      },
      $asUnmodifiableListBase: function() {
        return [P.Float64x2];
      },
      $asListBase: function() {
        return [P.Float64x2];
      },
      $asListMixin: function() {
        return [P.Float64x2];
      },
      $asIterable: function() {
        return [P.Float64x2];
      },
      $asList: function() {
        return [P.Float64x2];
      },
      $isTypedData: 1,
      $isFloat64x2List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.Float64x2, P.Float64x2List, P.Float64x2List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.Float64x2];
      }
    },
    UnmodifiableFloat32ListView: {
      "^": "_UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $asUnmodifiableListMixin: function() {
        return [P.double];
      },
      $asUnmodifiableListBase: function() {
        return [P.double];
      },
      $asListBase: function() {
        return [P.double];
      },
      $asListMixin: function() {
        return [P.double];
      },
      $asIterable: function() {
        return [P.double];
      },
      $asList: function() {
        return [P.double];
      },
      $isTypedData: 1,
      $is_TypedFloatList: 1,
      $isFloat32List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.double, P.Float32List, P.Float32List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.double];
      }
    },
    UnmodifiableFloat64ListView: {
      "^": "_UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin;$ti",
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $asUnmodifiableListMixin: function() {
        return [P.double];
      },
      $asUnmodifiableListBase: function() {
        return [P.double];
      },
      $asListBase: function() {
        return [P.double];
      },
      $asListMixin: function() {
        return [P.double];
      },
      $asIterable: function() {
        return [P.double];
      },
      $asList: function() {
        return [P.double];
      },
      $isTypedData: 1,
      $is_TypedFloatList: 1,
      $isFloat64List: 1,
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.double, P.Float64List, P.Float64List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.double];
      }
    },
    _UnmodifiableFloat32ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $asUnmodifiableListMixin: function() {
        return [P.double];
      },
      $asUnmodifiableListBase: function() {
        return [P.double];
      },
      $asListBase: function() {
        return [P.double];
      },
      $asListMixin: function() {
        return [P.double];
      },
      $asIterable: function() {
        return [P.double];
      },
      $asList: function() {
        return [P.double];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.double, P.Float32List, P.Float32List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.double];
      }
    },
    _UnmodifiableFloat32x4ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.Float32x4];
      },
      $asUnmodifiableListMixin: function() {
        return [P.Float32x4];
      },
      $asUnmodifiableListBase: function() {
        return [P.Float32x4];
      },
      $asListBase: function() {
        return [P.Float32x4];
      },
      $asListMixin: function() {
        return [P.Float32x4];
      },
      $asIterable: function() {
        return [P.Float32x4];
      },
      $asList: function() {
        return [P.Float32x4];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.Float32x4, P.Float32x4List, P.Float32x4List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.Float32x4];
      }
    },
    _UnmodifiableFloat64ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.double];
      },
      $asUnmodifiableListMixin: function() {
        return [P.double];
      },
      $asUnmodifiableListBase: function() {
        return [P.double];
      },
      $asListBase: function() {
        return [P.double];
      },
      $asListMixin: function() {
        return [P.double];
      },
      $asIterable: function() {
        return [P.double];
      },
      $asList: function() {
        return [P.double];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.double, P.Float64List, P.Float64List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.double];
      }
    },
    _UnmodifiableFloat64x2ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.Float64x2];
      },
      $asUnmodifiableListMixin: function() {
        return [P.Float64x2];
      },
      $asUnmodifiableListBase: function() {
        return [P.Float64x2];
      },
      $asListBase: function() {
        return [P.Float64x2];
      },
      $asListMixin: function() {
        return [P.Float64x2];
      },
      $asIterable: function() {
        return [P.Float64x2];
      },
      $asList: function() {
        return [P.Float64x2];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.Float64x2, P.Float64x2List, P.Float64x2List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.Float64x2];
      }
    },
    _UnmodifiableInt16ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Int16List, P.Int16List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    _UnmodifiableInt32ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Int32List, P.Int32List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    _UnmodifiableInt32x4ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.Int32x4];
      },
      $asUnmodifiableListMixin: function() {
        return [P.Int32x4];
      },
      $asUnmodifiableListBase: function() {
        return [P.Int32x4];
      },
      $asListBase: function() {
        return [P.Int32x4];
      },
      $asListMixin: function() {
        return [P.Int32x4];
      },
      $asIterable: function() {
        return [P.Int32x4];
      },
      $asList: function() {
        return [P.Int32x4];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.Int32x4, P.Int32x4List, P.Int32x4List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.Int32x4];
      }
    },
    _UnmodifiableInt64ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Int64List, P.Int64List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    _UnmodifiableInt8ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Int8List, P.Int8List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    _UnmodifiableUint16ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint16List, P.Uint16List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    _UnmodifiableUint32ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint32List, P.Uint32List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    _UnmodifiableUint64ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint64List, P.Uint64List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    _UnmodifiableUint8ClampedListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint8ClampedList, P.Uint8ClampedList];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    },
    _UnmodifiableUint8ListView_UnmodifiableListBase__UnmodifiableListMixin: {
      "^": "UnmodifiableListBase;$ti",
      $asEfficientLengthIterable: function() {
        return [P.int];
      },
      $asUnmodifiableListMixin: function() {
        return [P.int];
      },
      $asUnmodifiableListBase: function() {
        return [P.int];
      },
      $asListBase: function() {
        return [P.int];
      },
      $asListMixin: function() {
        return [P.int];
      },
      $asIterable: function() {
        return [P.int];
      },
      $asList: function() {
        return [P.int];
      },
      $is_UnmodifiableListMixin: 1,
      $as_UnmodifiableListMixin: function() {
        return [P.int, P.Uint8List, P.Uint8List];
      },
      $as_ListBase_Object_ListMixin: function() {
        return [P.int];
      }
    }
  }], ["dart.dom.web_audio", "dart:web_audio",, P, {
    "^": "",
    AnalyserNode: {
      "^": "AudioNode;$ti",
      $isAnalyserNode: 1,
      "%": ""
    },
    AudioBuffer: {
      "^": "Interceptor;$ti",
      $isAudioBuffer: 1,
      "%": ""
    },
    AudioBufferSourceNode: {
      "^": "AudioScheduledSourceNode;$ti",
      $isAudioBufferSourceNode: 1,
      "%": ""
    },
    AudioContext: {
      "^": "BaseAudioContext;$ti",
      $isAudioContext: 1,
      "%": ""
    },
    AudioDestinationNode: {
      "^": "AudioNode;$ti",
      $isAudioDestinationNode: 1,
      "%": ""
    },
    AudioListener: {
      "^": "Interceptor;$ti",
      $isAudioListener: 1,
      "%": ""
    },
    AudioNode: {
      "^": "EventTarget;$ti",
      $isAudioNode: 1,
      "%": ""
    },
    AudioParam: {
      "^": "Interceptor;$ti",
      $isAudioParam: 1,
      "%": ""
    },
    AudioParamMap: {
      "^": "_AudioParamMap_Interceptor_MapMixin;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      },
      $isAudioParamMap: 1,
      "%": ""
    },
    AudioProcessingEvent: {
      "^": "Event;$ti",
      $isAudioProcessingEvent: 1,
      "%": "AudioProcessingEvent"
    },
    AudioScheduledSourceNode: {
      "^": "AudioNode;$ti",
      $isAudioScheduledSourceNode: 1,
      "%": ""
    },
    AudioTrack: {
      "^": "Interceptor;$ti",
      $isAudioTrack: 1,
      "%": ""
    },
    AudioTrackList: {
      "^": "EventTarget;$ti",
      $isAudioTrackList: 1,
      "%": ""
    },
    AudioWorkletGlobalScope: {
      "^": "WorkletGlobalScope;$ti",
      $isAudioWorkletGlobalScope: 1,
      "%": ""
    },
    AudioWorkletNode: {
      "^": "AudioNode;$ti",
      $isAudioWorkletNode: 1,
      "%": ""
    },
    AudioWorkletProcessor: {
      "^": "Interceptor;$ti",
      $isAudioWorkletProcessor: 1,
      "%": ""
    },
    BaseAudioContext: {
      "^": "EventTarget;$ti",
      $isBaseAudioContext: 1,
      "%": ""
    },
    BiquadFilterNode: {
      "^": "AudioNode;$ti",
      $isBiquadFilterNode: 1,
      "%": ""
    },
    ChannelMergerNode: {
      "^": "AudioNode;$ti",
      $isChannelMergerNode: 1,
      "%": ""
    },
    ChannelSplitterNode: {
      "^": "AudioNode;$ti",
      $isChannelSplitterNode: 1,
      "%": ""
    },
    ConstantSourceNode: {
      "^": "AudioScheduledSourceNode;$ti",
      $isConstantSourceNode: 1,
      "%": ""
    },
    ConvolverNode: {
      "^": "AudioNode;$ti",
      $isConvolverNode: 1,
      "%": ""
    },
    DelayNode: {
      "^": "AudioNode;$ti",
      $isDelayNode: 1,
      "%": ""
    },
    DynamicsCompressorNode: {
      "^": "AudioNode;$ti",
      $isDynamicsCompressorNode: 1,
      "%": ""
    },
    GainNode: {
      "^": "AudioNode;$ti",
      $isGainNode: 1,
      "%": ""
    },
    IirFilterNode: {
      "^": "AudioNode;$ti",
      $isIirFilterNode: 1,
      "%": ""
    },
    MediaElementAudioSourceNode: {
      "^": "AudioNode;$ti",
      $isMediaElementAudioSourceNode: 1,
      "%": ""
    },
    MediaStreamAudioDestinationNode: {
      "^": "AudioNode;$ti",
      $isMediaStreamAudioDestinationNode: 1,
      "%": ""
    },
    MediaStreamAudioSourceNode: {
      "^": "AudioNode;$ti",
      $isMediaStreamAudioSourceNode: 1,
      "%": ""
    },
    OfflineAudioCompletionEvent: {
      "^": "Event;$ti",
      $isOfflineAudioCompletionEvent: 1,
      "%": "OfflineAudioCompletionEvent"
    },
    OfflineAudioContext: {
      "^": "BaseAudioContext;$ti",
      $isOfflineAudioContext: 1,
      "%": ""
    },
    OscillatorNode: {
      "^": "AudioScheduledSourceNode;$ti",
      $isOscillatorNode: 1,
      "%": ""
    },
    PannerNode: {
      "^": "AudioNode;$ti",
      $isPannerNode: 1,
      "%": ""
    },
    PeriodicWave: {
      "^": "Interceptor;$ti",
      $isPeriodicWave: 1,
      "%": ""
    },
    ScriptProcessorNode: {
      "^": "AudioNode;$ti",
      $isScriptProcessorNode: 1,
      "%": ""
    },
    StereoPannerNode: {
      "^": "AudioNode;$ti",
      $isStereoPannerNode: 1,
      "%": ""
    },
    WaveShaperNode: {
      "^": "AudioNode;$ti",
      $isWaveShaperNode: 1,
      "%": ""
    },
    _AudioParamMap_Interceptor_MapMixin: {
      "^": "Interceptor;$ti",
      $isMapMixin: 1,
      $asMapMixin: function() {
        return [P.String, null];
      },
      $isMap: 1,
      $asMap: function() {
        return [P.String, null];
      }
    }
  }], ["dart.dom.web_gl", "dart:web_gl",, P, {
    "^": "",
    ActiveInfo: {
      "^": "Interceptor;$ti",
      $isActiveInfo: 1,
      "%": ""
    },
    AngleInstancedArrays: {
      "^": "Interceptor;$ti",
      $isAngleInstancedArrays: 1,
      "%": ""
    },
    Buffer: {
      "^": "Interceptor;$ti",
      $isBuffer: 1,
      "%": ""
    },
    Canvas: {
      "^": "Interceptor;$ti",
      $isCanvas: 1,
      "%": ""
    },
    ColorBufferFloat: {
      "^": "Interceptor;$ti",
      $isColorBufferFloat: 1,
      "%": ""
    },
    CompressedTextureAstc: {
      "^": "Interceptor;$ti",
      $isCompressedTextureAstc: 1,
      "%": ""
    },
    CompressedTextureAtc: {
      "^": "Interceptor;$ti",
      $isCompressedTextureAtc: 1,
      "%": ""
    },
    CompressedTextureETC1: {
      "^": "Interceptor;$ti",
      $isCompressedTextureETC1: 1,
      "%": ""
    },
    CompressedTextureEtc: {
      "^": "Interceptor;$ti",
      $isCompressedTextureEtc: 1,
      "%": ""
    },
    CompressedTexturePvrtc: {
      "^": "Interceptor;$ti",
      $isCompressedTexturePvrtc: 1,
      "%": ""
    },
    CompressedTextureS3TC: {
      "^": "Interceptor;$ti",
      $isCompressedTextureS3TC: 1,
      "%": ""
    },
    CompressedTextureS3TCsRgb: {
      "^": "Interceptor;$ti",
      $isCompressedTextureS3TCsRgb: 1,
      "%": ""
    },
    ContextEvent: {
      "^": "Event;$ti",
      $isContextEvent: 1,
      "%": "WebGLContextEvent"
    },
    DebugRendererInfo: {
      "^": "Interceptor;$ti",
      $isDebugRendererInfo: 1,
      "%": ""
    },
    DebugShaders: {
      "^": "Interceptor;$ti",
      $isDebugShaders: 1,
      "%": ""
    },
    DepthTexture: {
      "^": "Interceptor;$ti",
      $isDepthTexture: 1,
      "%": ""
    },
    DrawBuffers: {
      "^": "Interceptor;$ti",
      $isDrawBuffers: 1,
      "%": ""
    },
    EXTsRgb: {
      "^": "Interceptor;$ti",
      $isEXTsRgb: 1,
      "%": ""
    },
    ExtBlendMinMax: {
      "^": "Interceptor;$ti",
      $isExtBlendMinMax: 1,
      "%": ""
    },
    ExtColorBufferFloat: {
      "^": "Interceptor;$ti",
      $isExtColorBufferFloat: 1,
      "%": ""
    },
    ExtColorBufferHalfFloat: {
      "^": "Interceptor;$ti",
      $isExtColorBufferHalfFloat: 1,
      "%": ""
    },
    ExtDisjointTimerQuery: {
      "^": "Interceptor;$ti",
      $isExtDisjointTimerQuery: 1,
      "%": ""
    },
    ExtDisjointTimerQueryWebGL2: {
      "^": "Interceptor;$ti",
      $isExtDisjointTimerQueryWebGL2: 1,
      "%": ""
    },
    ExtFragDepth: {
      "^": "Interceptor;$ti",
      $isExtFragDepth: 1,
      "%": ""
    },
    ExtShaderTextureLod: {
      "^": "Interceptor;$ti",
      $isExtShaderTextureLod: 1,
      "%": ""
    },
    ExtTextureFilterAnisotropic: {
      "^": "Interceptor;$ti",
      $isExtTextureFilterAnisotropic: 1,
      "%": ""
    },
    Framebuffer: {
      "^": "Interceptor;$ti",
      $isFramebuffer: 1,
      "%": ""
    },
    GetBufferSubDataAsync: {
      "^": "Interceptor;$ti",
      $isGetBufferSubDataAsync: 1,
      "%": ""
    },
    LoseContext: {
      "^": "Interceptor;$ti",
      $isLoseContext: 1,
      "%": ""
    },
    OesElementIndexUint: {
      "^": "Interceptor;$ti",
      $isOesElementIndexUint: 1,
      "%": ""
    },
    OesStandardDerivatives: {
      "^": "Interceptor;$ti",
      $isOesStandardDerivatives: 1,
      "%": ""
    },
    OesTextureFloat: {
      "^": "Interceptor;$ti",
      $isOesTextureFloat: 1,
      "%": ""
    },
    OesTextureFloatLinear: {
      "^": "Interceptor;$ti",
      $isOesTextureFloatLinear: 1,
      "%": ""
    },
    OesTextureHalfFloat: {
      "^": "Interceptor;$ti",
      $isOesTextureHalfFloat: 1,
      "%": ""
    },
    OesTextureHalfFloatLinear: {
      "^": "Interceptor;$ti",
      $isOesTextureHalfFloatLinear: 1,
      "%": ""
    },
    OesVertexArrayObject: {
      "^": "Interceptor;$ti",
      $isOesVertexArrayObject: 1,
      "%": ""
    },
    Program: {
      "^": "Interceptor;$ti",
      $isProgram: 1,
      "%": ""
    },
    Query: {
      "^": "Interceptor;$ti",
      $isQuery: 1,
      "%": ""
    },
    Renderbuffer: {
      "^": "Interceptor;$ti",
      $isRenderbuffer: 1,
      "%": ""
    },
    RenderingContext: {
      "^": "Interceptor;$ti",
      $isCanvasRenderingContext: 1,
      $isRenderingContext: 1,
      "%": ""
    },
    RenderingContext2: {
      "^": "Interceptor;$ti",
      $isRenderingContext2: 1,
      $is_WebGL2RenderingContextBase: 1,
      $is_WebGLRenderingContextBase: 1,
      "%": ""
    },
    Sampler: {
      "^": "Interceptor;$ti",
      $isSampler: 1,
      "%": ""
    },
    Shader: {
      "^": "Interceptor;$ti",
      $isShader: 1,
      "%": ""
    },
    ShaderPrecisionFormat: {
      "^": "Interceptor;$ti",
      $isShaderPrecisionFormat: 1,
      "%": ""
    },
    Sync: {
      "^": "Interceptor;$ti",
      $isSync: 1,
      "%": ""
    },
    Texture: {
      "^": "Interceptor;$ti",
      $isTexture: 1,
      "%": ""
    },
    TimerQueryExt: {
      "^": "Interceptor;$ti",
      $isTimerQueryExt: 1,
      "%": ""
    },
    TransformFeedback: {
      "^": "Interceptor;$ti",
      $isTransformFeedback: 1,
      "%": ""
    },
    UniformLocation: {
      "^": "Interceptor;$ti",
      $isUniformLocation: 1,
      "%": ""
    },
    VertexArrayObject: {
      "^": "Interceptor;$ti",
      $isVertexArrayObject: 1,
      "%": ""
    },
    VertexArrayObjectOes: {
      "^": "Interceptor;$ti",
      $isVertexArrayObjectOes: 1,
      "%": ""
    },
    WebGL: {
      "^": "Interceptor;$ti",
      $isWebGL: 1,
      "%": ""
    },
    _WebGL2RenderingContextBase: {
      "^": "Interceptor;$ti",
      $is_WebGL2RenderingContextBase: 1,
      $is_WebGLRenderingContextBase: 1,
      "%": ""
    },
    _WebGLRenderingContextBase: {
      "^": "Interceptor;$ti"
    }
  }], ["dart.dom.web_sql", "dart:web_sql",, P, {
    "^": "",
    SqlDatabase: {
      "^": "Interceptor;$ti",
      $isSqlDatabase: 1,
      "%": ""
    },
    SqlError: {
      "^": "Interceptor;$ti",
      $isSqlError: 1,
      "%": "SQLError"
    },
    SqlResultSet: {
      "^": "Interceptor;$ti",
      $isSqlResultSet: 1,
      "%": ""
    },
    SqlResultSetRowList: {
      "^": "_SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [[P.Map,,,]];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [[P.Map,,,]];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [[P.Map,,,]];
      },
      $isList: 1,
      $asList: function() {
        return [[P.Map,,,]];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [[P.Map,,,]];
      },
      $isSqlResultSetRowList: 1,
      "%": ""
    },
    SqlTransaction: {
      "^": "Interceptor;$ti",
      $isSqlTransaction: 1,
      "%": ""
    },
    _SqlResultSetRowList_Interceptor_ListMixin: {
      "^": "Interceptor;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [[P.Map,,,]];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [[P.Map,,,]];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [[P.Map,,,]];
      },
      $isList: 1,
      $asList: function() {
        return [[P.Map,,,]];
      }
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: {
      "^": "_SqlResultSetRowList_Interceptor_ListMixin;$ti",
      $isEfficientLengthIterable: 1,
      $asEfficientLengthIterable: function() {
        return [[P.Map,,,]];
      },
      $isListMixin: 1,
      $asListMixin: function() {
        return [[P.Map,,,]];
      },
      $isIterable: 1,
      $asIterable: function() {
        return [[P.Map,,,]];
      },
      $isList: 1,
      $asList: function() {
        return [[P.Map,,,]];
      },
      $isImmutableListMixin: 1,
      $asImmutableListMixin: function() {
        return [[P.Map,,,]];
      }
    }
  }], ["", "1.dart",, U, {
    "^": "",
    main: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(null);
      var $async$main = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              J.get$onClick$x(J.get$body$x(W.document())).listen$1(new U.main_closure());
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$main, $async$completer);
    },
    main_closure: {
      "^": "Closure:18;$ti",
      call$1: function(e) {
        H.interceptedTypeCheck(e, "$isMouseEvent");
        return P.print("clicked");
      }
    }
  }, 1]];
  setupProgram(dart, 0, 0);
  // getInterceptor methods
  J.getInterceptor$ = function(receiver) {
    if (typeof receiver == "number") {
      if (Math.floor(receiver) == receiver)
        return J.JSInt.prototype;
      return J.JSDouble.prototype;
    }
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return J.JSNull.prototype;
    if (typeof receiver == "boolean")
      return J.JSBool.prototype;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$a = function(receiver) {
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$as = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (receiver.constructor == Array)
      return J.JSArray.prototype;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$n = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$ns = function(receiver) {
    if (typeof receiver == "number")
      return J.JSNumber.prototype;
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$s = function(receiver) {
    if (typeof receiver == "string")
      return J.JSString.prototype;
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.getInterceptor$x = function(receiver) {
    if (receiver == null)
      return receiver;
    if (typeof receiver != "object") {
      if (typeof receiver == "function")
        return J.JavaScriptFunction.prototype;
      return receiver;
    }
    if (receiver instanceof P.Object)
      return receiver;
    return J.getNativeInterceptor(receiver);
  };
  J.getInterceptor$z = function(receiver) {
    if (receiver == null)
      return receiver;
    if (!(receiver instanceof P.Object))
      return J.UnknownJavaScriptObject.prototype;
    return receiver;
  };
  J.get$body$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$body(receiver);
  };
  J.get$error$z = function(receiver) {
    return J.getInterceptor$z(receiver).get$error(receiver);
  };
  J.get$isEmpty$s = function(receiver) {
    return J.getInterceptor$s(receiver).get$isEmpty(receiver);
  };
  J.get$iterator$a = function(receiver) {
    return J.getInterceptor$a(receiver).get$iterator(receiver);
  };
  J.get$length$as = function(receiver) {
    return J.getInterceptor$as(receiver).get$length(receiver);
  };
  J.get$onClick$x = function(receiver) {
    return J.getInterceptor$x(receiver).get$onClick(receiver);
  };
  J.$add$ns = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver + a0;
    return J.getInterceptor$ns(receiver).$add(receiver, a0);
  };
  J.$eq$ = function(receiver, a0) {
    if (receiver == null)
      return a0 == null;
    if (typeof receiver != "object")
      return a0 != null && receiver === a0;
    return J.getInterceptor$(receiver).$eq(receiver, a0);
  };
  J.$ge$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver >= a0;
    return J.getInterceptor$n(receiver).$ge(receiver, a0);
  };
  J.$gt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver > a0;
    return J.getInterceptor$n(receiver).$gt(receiver, a0);
  };
  J.$index$as = function(receiver, a0) {
    if (typeof a0 === "number")
      if (receiver.constructor == Array || typeof receiver == "string")
        if (a0 >>> 0 === a0 && a0 < receiver.length)
          return receiver[a0];
    return J.getInterceptor$as(receiver).$index(receiver, a0);
  };
  J.$le$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver <= a0;
    return J.getInterceptor$n(receiver).$le(receiver, a0);
  };
  J.$lt$n = function(receiver, a0) {
    if (typeof receiver == "number" && typeof a0 == "number")
      return receiver < a0;
    return J.getInterceptor$n(receiver).$lt(receiver, a0);
  };
  J.add$1$a = function(receiver, a0) {
    return J.getInterceptor$a(receiver).add$1(receiver, a0);
  };
  J.addEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
  };
  J.remainder$1$n = function(receiver, a0) {
    return J.getInterceptor$n(receiver).remainder$1(receiver, a0);
  };
  J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
    return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
  };
  J.toString$0$ = function(receiver) {
    return J.getInterceptor$(receiver).toString$0(receiver);
  };
  // Output contains no constant list.
  var $ = Isolate.$isolateProperties;
  C.Interceptor_methods = J.Interceptor.prototype;
  C.JSArray_methods = J.JSArray.prototype;
  C.JSInt_methods = J.JSInt.prototype;
  C.JSNumber_methods = J.JSNumber.prototype;
  C.JSString_methods = J.JSString.prototype;
  C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
  C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
  C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
  C.C__RootZone = new P._RootZone([]);
  C.Duration_0 = new P.Duration(0, []);
  C.EventStreamProvider_click = new W.EventStreamProvider("click", [W.MouseEvent]);
  C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
  C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
  C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
  C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
  C.JS_CONST_bDt = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
  C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
  C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
  C.JS_CONST_u2C = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
  C._ZoneFunction__RootZone__rootScheduleMicrotask = new P._ZoneFunction(C.C__RootZone, P.async___rootScheduleMicrotask$closure(), [{func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}]);
  $.printToZone = null;
  $.Closure_functionCounter = 0;
  $.BoundClosure_selfFieldNameCache = null;
  $.BoundClosure_receiverFieldNameCache = null;
  $._inTypeAssertion = false;
  $.getTagFunction = null;
  $.alternateTagFunction = null;
  $.prototypeForTagFunction = null;
  $.dispatchRecordsForInstanceTags = null;
  $.interceptorsForUncacheableTags = null;
  $.initNativeDispatchFlag = null;
  $._nextCallback = null;
  $._lastCallback = null;
  $._lastPriorityCallback = null;
  $._isInCallbackLoop = false;
  $.Zone__current = C.C__RootZone;
  $ = null;
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers$[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    var hunk = $dart_deferred_initializers$[hunkHash];
    if (hunk == null)
      throw "DeferredLoading state error: code with hash '" + hunkHash + "' was not loaded";
    hunk($globals$, $);
    init.deferredInitialized[hunkHash] = true;
  };
  init.deferredLibraryParts = {};
  init.deferredPartUris = [];
  init.deferredPartHashes = [];
  // Empty type-to-interceptor map.
  (function(lazies) {
    for (var i = 0; i < lazies.length;) {
      var fieldName = lazies[i++];
      var getterName = lazies[i++];
      var lazyValue = lazies[i++];
      var staticName = lazies[i++];
      Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
    }
  })(["DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
    return H.getIsolateAffinityTag("_$dart_dartClosure");
  }, "DART_CLOSURE_PROPERTY_NAME", "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
    return H.getIsolateAffinityTag("_$dart_js");
  }, "JS_INTEROP_INTERCEPTOR_TAG", "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObject())), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(H.TypeErrorDecoder_buildJavaScriptObjectWithNonClosure())), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_notClosurePattern", "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null)), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnNull()), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0)), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOnUndefined()), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null)), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnNull()), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0)), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
    return H.interceptedTypeCheck(H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOnUndefined()), "$isTypeErrorDecoder");
  }, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
    return P._AsyncRun__initializeScheduleImmediate();
  }, "_AsyncRun__scheduleImmediateClosure", "Future__falseFuture", "$get$Future__falseFuture", function() {
    return P._Future$zoneValue(false, C.C__RootZone, P.bool);
  }, "Future__falseFuture", "_toStringVisiting", "$get$_toStringVisiting", function() {
    return [];
  }, "_toStringVisiting"]);
  Isolate = Isolate.$finishIsolateConstructor(Isolate);
  $ = new Isolate();
  init.metadata = [];
  init.types = [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, args: [,]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: -1, opt: [P.Object]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, args: [, P.String]}, {func: 1, args: [P.String]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, ret: P.Null, args: [P.int,,]}, {func: 1, ret: P.Null, args: [,], opt: [,]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, args: [W.Event]}, {func: 1, ret: -1, args: [W.MouseEvent]}, {func: 1, ret: -1, args: [P.Zone, P.ZoneDelegate, P.Zone, {func: 1, ret: -1}]}];
  function convertToFastObject(properties) {
    function MyClass() {
    }
    MyClass.prototype = properties;
    new MyClass();
    return properties;
  }
  function convertToSlowObject(properties) {
    properties.__MAGIC_SLOW_PROPERTY = 1;
    delete properties.__MAGIC_SLOW_PROPERTY;
    return properties;
  }
  A = convertToFastObject(A);
  B = convertToFastObject(B);
  C = convertToFastObject(C);
  D = convertToFastObject(D);
  E = convertToFastObject(E);
  F = convertToFastObject(F);
  G = convertToFastObject(G);
  H = convertToFastObject(H);
  J = convertToFastObject(J);
  K = convertToFastObject(K);
  L = convertToFastObject(L);
  M = convertToFastObject(M);
  N = convertToFastObject(N);
  O = convertToFastObject(O);
  P = convertToFastObject(P);
  Q = convertToFastObject(Q);
  R = convertToFastObject(R);
  S = convertToFastObject(S);
  T = convertToFastObject(T);
  U = convertToFastObject(U);
  V = convertToFastObject(V);
  W = convertToFastObject(W);
  X = convertToFastObject(X);
  Y = convertToFastObject(Y);
  Z = convertToFastObject(Z);
  function init() {
    Isolate.$isolateProperties = Object.create(null);
    init.allClasses = map();
    init.getTypeFromName = function(name) {
      return init.allClasses[name];
    };
    init.interceptorsByTag = map();
    init.leafTags = map();
    init.finishedClasses = map();
    Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
      if (!init.lazies)
        init.lazies = Object.create(null);
      init.lazies[fieldName] = getterName;
      prototype = prototype || Isolate.$isolateProperties;
      var sentinelUndefined = {};
      var sentinelInProgress = {};
      prototype[fieldName] = sentinelUndefined;
      prototype[getterName] = function() {
        var result = this[fieldName];
        if (result == sentinelInProgress)
          H.throwCyclicInit(staticName || fieldName);
        try {
          if (result === sentinelUndefined) {
            this[fieldName] = sentinelInProgress;
            try {
              result = this[fieldName] = lazyValue();
            } finally {
              if (result === sentinelUndefined)
                this[fieldName] = null;
            }
          }
          return result;
        } finally {
          this[getterName] = function() {
            return this[fieldName];
          };
        }
      };
    };
    Isolate.$finishIsolateConstructor = function(oldIsolate) {
      var isolateProperties = oldIsolate.$isolateProperties;
      function Isolate() {
        var staticNames = Object.keys(isolateProperties);
        for (var i = 0; i < staticNames.length; i++) {
          var staticName = staticNames[i];
          this[staticName] = isolateProperties[staticName];
        }
        var lazies = init.lazies;
        var lazyInitializers = lazies ? Object.keys(lazies) : [];
        for (var i = 0; i < lazyInitializers.length; i++)
          this[lazies[lazyInitializers[i]]] = null;
        function ForceEfficientMap() {
        }
        ForceEfficientMap.prototype = this;
        new ForceEfficientMap();
        for (var i = 0; i < lazyInitializers.length; i++) {
          var lazyInitName = lazies[lazyInitializers[i]];
          this[lazyInitName] = isolateProperties[lazyInitName];
        }
      }
      Isolate.prototype = oldIsolate.prototype;
      Isolate.prototype.constructor = Isolate;
      Isolate.$isolateProperties = isolateProperties;
      Isolate.functionThatReturnsNull = oldIsolate.functionThatReturnsNull;
      return Isolate;
    };
  }
  !function() {
    var intern = function(s) {
      var o = {};
      o[s] = 1;
      return Object.keys(convertToFastObject(o))[0];
    };
    init.getIsolateTag = function(name) {
      return intern("___dart_" + name + init.isolateTag);
    };
    var tableProperty = "___dart_isolate_tags_";
    var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
    var rootProperty = "_ZxYxX";
    for (var i = 0;; i++) {
      var property = intern(rootProperty + "_" + i + "_");
      if (!(property in usedProperties)) {
        usedProperties[property] = 1;
        init.isolateTag = property;
        break;
      }
    }
    init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
  }();
  // BEGIN invoke [main].
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(U.main, []);
    else
      U.main([]);
  });
  // END invoke [main].
})();

//# sourceMappingURL=nonopimized.js.map
